// Author: Igor compiler
// Compiler version: igorc 2.1.3
// DO NOT EDIT THIS FILE - it is machine generated

import { Injectable } from '@angular/core';
import { HttpClient, HttpErrorResponse, HttpHeaders } from '@angular/common/http';
import { Observable, throwError } from 'rxjs';
import { map, catchError } from 'rxjs/operators';
import * as Igor from './igor';
import * as WebProtocol from './web-protocol.data';

@Injectable({
    providedIn: 'root',
})
export class HeliosMobileService {
    public baseUrl = '';

    constructor(private http: HttpClient) { }

    public getMobileGames(platform: WebProtocol.Platform): Observable<WebProtocol.GameItemList> {
        return this.http
            .get(`${this.baseUrl}/api/mobile/games?platform=${WebProtocol.Platform.toJson(platform)}`)
            .pipe(
                catchError(response => {
                    if (response instanceof HttpErrorResponse) {
                        switch (response.status) {
                            case 403: return throwError(WebProtocol.ForbiddenError.fromJson(response.error));
                        }
                    }
                    return throwError(response);
                }),
                map(response => WebProtocol.GameItemList.fromJson(response as Igor.Json.JsonValue))
            );
    }

    public getMobileBuilds(guid: string, platform: WebProtocol.Platform, orderBy: WebProtocol.BuildOrderBy, orderDir: WebProtocol.OrderDirection, offset: number, limit: number): Observable<WebProtocol.CollectionSlice<WebProtocol.Build>> {
        return this.http
            .get(`${this.baseUrl}/api/mobile/games/${guid}/builds?platform=${WebProtocol.Platform.toJson(platform)}&order_by=${WebProtocol.BuildOrderBy.toJson(orderBy)}&order_dir=${WebProtocol.OrderDirection.toJson(orderDir)}&offset=${offset}&limit=${limit}`)
            .pipe(
                catchError(response => {
                    if (response instanceof HttpErrorResponse) {
                        switch (response.status) {
                            case 403: return throwError(WebProtocol.ForbiddenError.fromJson(response.error));
                        }
                    }
                    return throwError(response);
                }),
                map(response => WebProtocol.CollectionSlice.instanceJsonSerializer<WebProtocol.Build>(WebProtocol.Build).fromJson(response as Igor.Json.JsonValue))
            );
    }
}
