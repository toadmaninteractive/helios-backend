// Author: Igor compiler
// Compiler version: igorc 2.1.3
// DO NOT EDIT THIS FILE - it is machine generated

import * as Igor from './igor';
import * as WebProtocol from './web-protocol.data';

export enum NotificationKind {
    Hello = 1,
    GameCategoryCreated = 2,
    GameCategoryUpdated = 3,
    GameCategoryDeleted = 4,
    GameItemUpdated = 5,
}

export namespace NotificationKind {
    export function toJson(value: NotificationKind): Igor.Json.JsonValue {
        return toJsonKey(value);
    }

    export function fromJson(json: Igor.Json.JsonValue): NotificationKind {
        return fromJsonKey(json);
    }

    export function toJsonKey(value: NotificationKind): Igor.Json.JsonValue {
        switch (value) {
            case NotificationKind.Hello: return 'hello';
            case NotificationKind.GameCategoryCreated: return 'game_category_created';
            case NotificationKind.GameCategoryUpdated: return 'game_category_updated';
            case NotificationKind.GameCategoryDeleted: return 'game_category_deleted';
            case NotificationKind.GameItemUpdated: return 'game_item_updated';
            default: throw new Error(`Invalid NotificationKind value: ${value}`);
        }
    }

    export function fromJsonKey(json: Igor.Json.JsonValue): NotificationKind {
        switch (json) {
            case 'hello': return NotificationKind.Hello;
            case 'game_category_created': return NotificationKind.GameCategoryCreated;
            case 'game_category_updated': return NotificationKind.GameCategoryUpdated;
            case 'game_category_deleted': return NotificationKind.GameCategoryDeleted;
            case 'game_item_updated': return NotificationKind.GameItemUpdated;
            default: throw new Error(`Invalid NotificationKind value: ${json}`);
        }
    }
}

export interface IActor {
    actorId: number;
    actorName: string;
}

export interface IData<T> {
    data: T;
}

export abstract class Notification {
    kind!: NotificationKind;

    static fromJson(json: Igor.Json.JsonValue): Notification {
        const jsonObject = json as Igor.Json.JsonObject;
        const kind = NotificationKind.fromJson(jsonObject['kind']);
        switch(kind) {
            case NotificationKind.Hello:
                return Hello.fromJson(json);
            case NotificationKind.GameCategoryCreated:
                return GameCategoryCreated.fromJson(json);
            case NotificationKind.GameCategoryUpdated:
                return GameCategoryUpdated.fromJson(json);
            case NotificationKind.GameCategoryDeleted:
                return GameCategoryDeleted.fromJson(json);
            case NotificationKind.GameItemUpdated:
                return GameItemUpdated.fromJson(json);
            default:
                throw new Error(`Invalid NotificationKind value: ${kind}`);
        }
    }

    static toJson(value: Notification): Igor.Json.JsonValue {
        return value.toJson();
    }

    abstract toJson(): Igor.Json.JsonValue;
}

export class Hello extends Notification {
    kind: NotificationKind = NotificationKind.Hello;

    static fromJson(json: Igor.Json.JsonValue): Hello {
        const obj = new Hello();
        return obj;
    }

    static toJson(value: Hello): Igor.Json.JsonValue {
        const result: Igor.Json.JsonObject = {};
        result['kind'] = NotificationKind.toJson(value.kind);
        return result;
    }

    toJson(): Igor.Json.JsonValue {
        return Hello.toJson(this);
    }
}

export class GameCategoryCreated extends Notification implements IData<WebProtocol.GameCategoryExcerpt> {
    kind: NotificationKind = NotificationKind.GameCategoryCreated;
    data!: WebProtocol.GameCategoryExcerpt;

    static fromJson(json: Igor.Json.JsonValue): GameCategoryCreated {
        const jsonObject = json as Igor.Json.JsonObject;
        const obj = new GameCategoryCreated();
        obj.data = WebProtocol.GameCategoryExcerpt.fromJson(jsonObject['data']);
        return obj;
    }

    static toJson(value: GameCategoryCreated): Igor.Json.JsonValue {
        const result: Igor.Json.JsonObject = {};
        result['kind'] = NotificationKind.toJson(value.kind);
        result['data'] = value.data.toJson();
        return result;
    }

    toJson(): Igor.Json.JsonValue {
        return GameCategoryCreated.toJson(this);
    }
}

export class GameCategoryUpdated extends Notification implements IData<WebProtocol.GameCategoryExcerpt> {
    kind: NotificationKind = NotificationKind.GameCategoryUpdated;
    data!: WebProtocol.GameCategoryExcerpt;

    static fromJson(json: Igor.Json.JsonValue): GameCategoryUpdated {
        const jsonObject = json as Igor.Json.JsonObject;
        const obj = new GameCategoryUpdated();
        obj.data = WebProtocol.GameCategoryExcerpt.fromJson(jsonObject['data']);
        return obj;
    }

    static toJson(value: GameCategoryUpdated): Igor.Json.JsonValue {
        const result: Igor.Json.JsonObject = {};
        result['kind'] = NotificationKind.toJson(value.kind);
        result['data'] = value.data.toJson();
        return result;
    }

    toJson(): Igor.Json.JsonValue {
        return GameCategoryUpdated.toJson(this);
    }
}

export class GameCategoryDeleted extends Notification implements IData<WebProtocol.GameCategoryExcerpt> {
    kind: NotificationKind = NotificationKind.GameCategoryDeleted;
    data!: WebProtocol.GameCategoryExcerpt;

    static fromJson(json: Igor.Json.JsonValue): GameCategoryDeleted {
        const jsonObject = json as Igor.Json.JsonObject;
        const obj = new GameCategoryDeleted();
        obj.data = WebProtocol.GameCategoryExcerpt.fromJson(jsonObject['data']);
        return obj;
    }

    static toJson(value: GameCategoryDeleted): Igor.Json.JsonValue {
        const result: Igor.Json.JsonObject = {};
        result['kind'] = NotificationKind.toJson(value.kind);
        result['data'] = value.data.toJson();
        return result;
    }

    toJson(): Igor.Json.JsonValue {
        return GameCategoryDeleted.toJson(this);
    }
}

export class GameItemUpdated extends Notification implements IData<WebProtocol.GameItem> {
    kind: NotificationKind = NotificationKind.GameItemUpdated;
    data!: WebProtocol.GameItem;

    static fromJson(json: Igor.Json.JsonValue): GameItemUpdated {
        const jsonObject = json as Igor.Json.JsonObject;
        const obj = new GameItemUpdated();
        obj.data = WebProtocol.GameItem.fromJson(jsonObject['data']);
        return obj;
    }

    static toJson(value: GameItemUpdated): Igor.Json.JsonValue {
        const result: Igor.Json.JsonObject = {};
        result['kind'] = NotificationKind.toJson(value.kind);
        result['data'] = value.data.toJson();
        return result;
    }

    toJson(): Igor.Json.JsonValue {
        return GameItemUpdated.toJson(this);
    }
}
