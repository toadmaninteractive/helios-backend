%% @author Igor compiler
%% @doc Compiler version: igorc 2.1.3
%% DO NOT EDIT THIS FILE - it is machine generated

-module(web_protocol).

-include_lib("stdlib/include/assert.hrl").
-include("web_protocol.hrl").

-export([
    order_direction_to_string/1,
    order_direction_from_string/1,
    order_direction_to_json/1,
    order_direction_from_json/1,
    game_engine_to_string/1,
    game_engine_from_string/1,
    game_engine_to_json/1,
    game_engine_from_json/1,
    platform_to_string/1,
    platform_from_string/1,
    platform_to_json/1,
    platform_from_json/1,
    access_role_to_string/1,
    access_role_from_string/1,
    access_role_to_json/1,
    access_role_from_json/1,
    currency_to_string/1,
    currency_from_string/1,
    currency_to_json/1,
    currency_from_json/1,
    game_ownership_to_string/1,
    game_ownership_from_string/1,
    game_ownership_to_json/1,
    game_ownership_from_json/1,
    registry_value_type_to_string/1,
    registry_value_type_from_string/1,
    registry_value_type_to_json/1,
    registry_value_type_from_json/1,
    client_registration_error_to_string/1,
    client_registration_error_from_string/1,
    client_registration_error_to_json/1,
    client_registration_error_from_json/1,
    client_login_error_to_string/1,
    client_login_error_from_string/1,
    client_login_error_to_json/1,
    client_login_error_from_json/1,
    client_password_reset_error_to_string/1,
    client_password_reset_error_from_string/1,
    client_password_reset_error_to_json/1,
    client_password_reset_error_from_json/1,
    client_password_change_error_to_string/1,
    client_password_change_error_from_string/1,
    client_password_change_error_to_json/1,
    client_password_change_error_from_json/1,
    personnel_login_error_to_string/1,
    personnel_login_error_from_string/1,
    personnel_login_error_to_json/1,
    personnel_login_error_from_json/1,
    captcha_error_to_string/1,
    captcha_error_from_string/1,
    captcha_error_to_json/1,
    captcha_error_from_json/1,
    game_order_by_to_string/1,
    game_order_by_from_string/1,
    game_order_by_to_json/1,
    game_order_by_from_json/1,
    game_create_error_to_string/1,
    game_create_error_from_string/1,
    game_create_error_to_json/1,
    game_create_error_from_json/1,
    game_update_error_to_string/1,
    game_update_error_from_string/1,
    game_update_error_to_json/1,
    game_update_error_from_json/1,
    game_branch_order_by_to_string/1,
    game_branch_order_by_from_string/1,
    game_branch_order_by_to_json/1,
    game_branch_order_by_from_json/1,
    game_branch_create_error_to_string/1,
    game_branch_create_error_from_string/1,
    game_branch_create_error_to_json/1,
    game_branch_create_error_from_json/1,
    game_branch_update_error_to_string/1,
    game_branch_update_error_from_string/1,
    game_branch_update_error_to_json/1,
    game_branch_update_error_from_json/1,
    game_branch_build_error_to_string/1,
    game_branch_build_error_from_string/1,
    game_branch_build_error_to_json/1,
    game_branch_build_error_from_json/1,
    game_category_manage_error_to_string/1,
    game_category_manage_error_from_string/1,
    game_category_manage_error_to_json/1,
    game_category_manage_error_from_json/1,
    client_account_order_by_to_string/1,
    client_account_order_by_from_string/1,
    client_account_order_by_to_json/1,
    client_account_order_by_from_json/1,
    personnel_account_order_by_to_string/1,
    personnel_account_order_by_from_string/1,
    personnel_account_order_by_to_json/1,
    personnel_account_order_by_from_json/1,
    personnel_group_order_by_to_string/1,
    personnel_group_order_by_from_string/1,
    personnel_group_order_by_to_json/1,
    personnel_group_order_by_from_json/1,
    personnel_account_role_order_by_to_string/1,
    personnel_account_role_order_by_from_string/1,
    personnel_account_role_order_by_to_json/1,
    personnel_account_role_order_by_from_json/1,
    personnel_group_role_order_by_to_string/1,
    personnel_group_role_order_by_from_string/1,
    personnel_group_role_order_by_to_json/1,
    personnel_group_role_order_by_from_json/1,
    build_order_by_to_string/1,
    build_order_by_from_string/1,
    build_order_by_to_json/1,
    build_order_by_from_json/1,
    draft_build_create_error_to_string/1,
    draft_build_create_error_from_string/1,
    draft_build_create_error_to_json/1,
    draft_build_create_error_from_json/1,
    draft_build_update_error_to_string/1,
    draft_build_update_error_from_string/1,
    draft_build_update_error_to_json/1,
    draft_build_update_error_from_json/1,
    build_publish_error_to_string/1,
    build_publish_error_from_string/1,
    build_publish_error_to_json/1,
    build_publish_error_from_json/1,
    build_update_error_to_string/1,
    build_update_error_from_string/1,
    build_update_error_to_json/1,
    build_update_error_from_json/1,
    build_delete_error_to_string/1,
    build_delete_error_from_string/1,
    build_delete_error_to_json/1,
    build_delete_error_from_json/1,
    popular_game_order_by_to_string/1,
    popular_game_order_by_from_string/1,
    popular_game_order_by_to_json/1,
    popular_game_order_by_from_json/1,
    add_game_build_error_to_string/1,
    add_game_build_error_from_string/1,
    add_game_build_error_to_json/1,
    add_game_build_error_from_json/1,
    generic_response_to_json/1,
    generic_response_from_json/1,
    empty_to_json/1,
    empty_from_json/1,
    collection_to_json/2,
    collection_from_json/2,
    collection_slice_to_json/2,
    collection_slice_from_json/2,
    bad_request_error_to_json/2,
    bad_request_error_from_json/2,
    forbidden_error_to_json/1,
    forbidden_error_from_json/1,
    not_found_error_to_json/1,
    not_found_error_from_json/1,
    internal_server_error_to_json/1,
    internal_server_error_from_json/1,
    price_to_json/1,
    price_from_json/1,
    ini_file_entry_to_json/1,
    ini_file_entry_from_json/1,
    registry_config_entry_to_json/1,
    registry_config_entry_from_json/1,
    redistributable_entry_to_json/1,
    redistributable_entry_from_json/1,
    client_status_response_to_json/1,
    client_status_response_from_json/1,
    client_register_request_to_json/1,
    client_register_request_from_json/1,
    client_register_response_to_json/1,
    client_register_response_from_json/1,
    client_register_confirm_request_to_json/1,
    client_register_confirm_request_from_json/1,
    client_resend_request_to_json/1,
    client_resend_request_from_json/1,
    client_login_request_to_json/1,
    client_login_request_from_json/1,
    client_login_response_to_json/1,
    client_login_response_from_json/1,
    client_password_reset_request_to_json/1,
    client_password_reset_request_from_json/1,
    client_password_reset_response_to_json/1,
    client_password_reset_response_from_json/1,
    client_password_reset_confirm_request_to_json/1,
    client_password_reset_confirm_request_from_json/1,
    client_password_change_request_to_json/1,
    client_password_change_request_from_json/1,
    client_password_change_response_to_json/1,
    client_password_change_response_from_json/1,
    personnel_status_response_to_json/1,
    personnel_status_response_from_json/1,
    personnel_login_request_to_json/1,
    personnel_login_request_from_json/1,
    personnel_login_response_to_json/1,
    personnel_login_response_from_json/1,
    captcha_response_to_json/1,
    captcha_response_from_json/1,
    game_branch_item_to_json/1,
    game_branch_item_from_json/1,
    game_branch_to_json/1,
    game_branch_from_json/1,
    game_item_to_json/1,
    game_item_from_json/1,
    game_to_json/1,
    game_from_json/1,
    game_file_to_json/1,
    game_file_from_json/1,
    game_item_list_to_json/1,
    game_item_list_from_json/1,
    game_manifest_to_json/1,
    game_manifest_from_json/1,
    branch_unlock_request_to_json/1,
    branch_unlock_request_from_json/1,
    change_log_to_json/1,
    change_log_from_json/1,
    game_create_request_to_json/1,
    game_create_request_from_json/1,
    game_create_response_to_json/1,
    game_create_response_from_json/1,
    game_update_request_to_json/1,
    game_update_request_from_json/1,
    game_update_response_to_json/1,
    game_update_response_from_json/1,
    game_branch_create_request_to_json/1,
    game_branch_create_request_from_json/1,
    game_branch_create_response_to_json/1,
    game_branch_create_response_from_json/1,
    game_branch_update_request_to_json/1,
    game_branch_update_request_from_json/1,
    game_branch_update_response_to_json/1,
    game_branch_update_response_from_json/1,
    game_branch_build_request_to_json/1,
    game_branch_build_request_from_json/1,
    game_branch_build_response_to_json/1,
    game_branch_build_response_from_json/1,
    game_category_to_json/1,
    game_category_from_json/1,
    game_category_excerpt_to_json/1,
    game_category_excerpt_from_json/1,
    game_category_manage_response_to_json/1,
    game_category_manage_response_from_json/1,
    game_category_create_request_to_json/1,
    game_category_create_request_from_json/1,
    game_category_update_request_to_json/1,
    game_category_update_request_from_json/1,
    game_category_excerpt_list_to_json/1,
    game_category_excerpt_list_from_json/1,
    client_account_to_json/1,
    client_account_from_json/1,
    personnel_account_to_json/1,
    personnel_account_from_json/1,
    personnel_account_profile_to_json/1,
    personnel_account_profile_from_json/1,
    personnel_api_key_update_response_to_json/1,
    personnel_api_key_update_response_from_json/1,
    personnel_group_to_json/1,
    personnel_group_from_json/1,
    personnel_account_role_to_json/1,
    personnel_account_role_from_json/1,
    personnel_group_role_to_json/1,
    personnel_group_role_from_json/1,
    access_role_update_request_to_json/1,
    access_role_update_request_from_json/1,
    settings_to_json/1,
    settings_from_json/1,
    settings_update_request_to_json/1,
    settings_update_request_from_json/1,
    regenerate_ci_api_key_response_to_json/1,
    regenerate_ci_api_key_response_from_json/1,
    build_to_json/1,
    build_from_json/1,
    build_file_to_json/1,
    build_file_from_json/1,
    draft_build_create_request_to_json/1,
    draft_build_create_request_from_json/1,
    draft_build_create_response_to_json/1,
    draft_build_create_response_from_json/1,
    draft_build_update_request_to_json/1,
    draft_build_update_request_from_json/1,
    draft_build_update_response_to_json/1,
    draft_build_update_response_from_json/1,
    build_publish_response_to_json/1,
    build_publish_response_from_json/1,
    build_update_request_to_json/1,
    build_update_request_from_json/1,
    build_update_response_to_json/1,
    build_update_response_from_json/1,
    build_delete_response_to_json/1,
    build_delete_response_from_json/1,
    popular_game_to_json/1,
    popular_game_from_json/1,
    build_manifest_to_json/1,
    build_manifest_from_json/1
]).

-export_type([
    order_direction/0,
    game_engine/0,
    platform/0,
    access_role/0,
    generic_response/0,
    empty/0,
    collection/1,
    collection_slice/1,
    bad_request_error/1,
    forbidden_error/0,
    not_found_error/0,
    internal_server_error/0,
    currency/0,
    price/0,
    game_ownership/0,
    ini_file_entry/0,
    registry_value_type/0,
    registry_config_entry/0,
    redistributable_entry/0,
    client_status_response/0,
    client_register_request/0,
    client_registration_error/0,
    client_register_response/0,
    client_register_confirm_request/0,
    client_resend_request/0,
    client_login_request/0,
    client_login_error/0,
    client_login_response/0,
    client_password_reset_request/0,
    client_password_reset_error/0,
    client_password_reset_response/0,
    client_password_reset_confirm_request/0,
    client_password_change_request/0,
    client_password_change_error/0,
    client_password_change_response/0,
    personnel_status_response/0,
    personnel_login_request/0,
    personnel_login_error/0,
    personnel_login_response/0,
    captcha_error/0,
    captcha_response/0,
    game_branch_item/0,
    game_branch/0,
    game_item/0,
    game/0,
    game_file/0,
    game_item_list/0,
    game_manifest/0,
    branch_unlock_request/0,
    change_log/0,
    game_order_by/0,
    game_create_request/0,
    game_create_error/0,
    game_create_response/0,
    game_update_request/0,
    game_update_error/0,
    game_update_response/0,
    game_branch_order_by/0,
    game_branch_create_request/0,
    game_branch_create_error/0,
    game_branch_create_response/0,
    game_branch_update_request/0,
    game_branch_update_error/0,
    game_branch_update_response/0,
    game_branch_build_request/0,
    game_branch_build_error/0,
    game_branch_build_response/0,
    game_category/0,
    game_category_excerpt/0,
    game_category_manage_error/0,
    game_category_manage_response/0,
    game_category_create_request/0,
    game_category_update_request/0,
    game_category_excerpt_list/0,
    client_account/0,
    client_account_order_by/0,
    personnel_account/0,
    personnel_account_order_by/0,
    personnel_account_profile/0,
    personnel_api_key_update_response/0,
    personnel_group/0,
    personnel_group_order_by/0,
    personnel_account_role/0,
    personnel_account_role_order_by/0,
    personnel_group_role/0,
    personnel_group_role_order_by/0,
    access_role_update_request/0,
    settings/0,
    settings_update_request/0,
    regenerate_ci_api_key_response/0,
    build/0,
    build_order_by/0,
    build_file/0,
    draft_build_create_request/0,
    draft_build_create_error/0,
    draft_build_create_response/0,
    draft_build_update_request/0,
    draft_build_update_error/0,
    draft_build_update_response/0,
    build_publish_error/0,
    build_publish_response/0,
    build_update_request/0,
    build_update_error/0,
    build_update_response/0,
    build_delete_error/0,
    build_delete_response/0,
    popular_game/0,
    popular_game_order_by/0,
    build_manifest/0,
    add_game_build_error/0
]).

-type order_direction() :: 'asc' | 'desc'.
-type game_engine() :: 'generic' | 'ue4' | 'unity' | 'hydra' | 'cry'.
-type platform() :: 'windows' | 'linux' | 'macos' | 'ios' | 'android'.
-type access_role() :: 'consumer' | 'uploader' | 'maintainer' | 'admin'.
-type generic_response() :: #generic_response{}.
-type empty() :: #empty{}.
-type collection(_T) :: #collection{}.
-type collection_slice(_T) :: #collection_slice{}.
-type bad_request_error(_T) :: #bad_request_error{}.
-type forbidden_error() :: #forbidden_error{}.
-type not_found_error() :: #not_found_error{}.
-type internal_server_error() :: #internal_server_error{}.
-type currency() :: 'eur' | 'usd' | 'rub'.
-type price() :: #price{}.
-type game_ownership() :: 'none' | 'purchase' | 'grant' | 'employee'.
-type ini_file_entry() :: #ini_file_entry{}.
-type registry_value_type() :: 'string' | 'binary' | 'dword' | 'qword' | 'multi_string' | 'expandable_string'.
-type registry_config_entry() :: #registry_config_entry{}.
-type redistributable_entry() :: #redistributable_entry{}.
-type client_status_response() :: #client_status_response{}.
-type client_register_request() :: #client_register_request{}.
-type client_registration_error() :: 'failure' | 'invalid_email' | 'invalid_username' | 'invalid_password' | 'email_already_registered' | 'username_already_registered' | 'already_logged_in' | 'invalid_captcha_key' | 'invalid_captcha_response' | 'captcha_expired'.
-type client_register_response() :: #client_register_response{}.
-type client_register_confirm_request() :: #client_register_confirm_request{}.
-type client_resend_request() :: #client_resend_request{}.
-type client_login_request() :: #client_login_request{}.
-type client_login_error() :: 'failure' | 'already_logged_in' | 'account_not_exists' | 'account_not_activated' | 'account_is_blocked' | 'account_is_deleted' | 'invalid_password'.
-type client_login_response() :: #client_login_response{}.
-type client_password_reset_request() :: #client_password_reset_request{}.
-type client_password_reset_error() :: 'failure' | 'invalid_new_password' | 'invalid_captcha_key' | 'invalid_captcha_response' | 'captcha_expired'.
-type client_password_reset_response() :: #client_password_reset_response{}.
-type client_password_reset_confirm_request() :: #client_password_reset_confirm_request{}.
-type client_password_change_request() :: #client_password_change_request{}.
-type client_password_change_error() :: 'failure' | 'invalid_current_password' | 'invalid_new_password' | 'not_logged_in'.
-type client_password_change_response() :: #client_password_change_response{}.
-type personnel_status_response() :: #personnel_status_response{}.
-type personnel_login_request() :: #personnel_login_request{}.
-type personnel_login_error() :: 'failure' | 'already_logged_in' | 'account_not_exists' | 'account_is_blocked' | 'account_is_deleted' | 'invalid_password'.
-type personnel_login_response() :: #personnel_login_response{}.
-type captcha_error() :: 'failure'.
-type captcha_response() :: #captcha_response{}.
-type game_branch_item() :: #game_branch_item{}.
-type game_branch() :: #game_branch{}.
-type game_item() :: #game_item{}.
-type game() :: #game{}.
-type game_file() :: #game_file{}.
-type game_item_list() :: #game_item_list{}.
-type game_manifest() :: #game_manifest{}.
-type branch_unlock_request() :: #branch_unlock_request{}.
-type change_log() :: #change_log{}.
-type game_order_by() :: 'id' | 'title' | 'description' | 'price' | 'currency' | 'is_published' | 'is_disabled' | 'is_deleted' | 'created_at' | 'updated_at'.
-type game_create_request() :: #game_create_request{}.
-type game_create_error() :: 'failure' | 'game_id_already_exists' | 'game_title_already_exists' | 'invalid_price' | 'invalid_currency'.
-type game_create_response() :: #game_create_response{}.
-type game_update_request() :: #game_update_request{}.
-type game_update_error() :: 'failure' | 'rev_mismatch' | 'nothing_to_update' | 'game_title_already_exists' | 'invalid_game_title' | 'invalid_jira_key' | 'invalid_selene_key' | 'invalid_ci_url' | 'invalid_discord_url' | 'invalid_price' | 'invalid_currency' | 'invalid_build_lifetime'.
-type game_update_response() :: #game_update_response{}.
-type game_branch_order_by() :: 'id' | 'title' | 'build_id' | 'build_rev' | 'build_total_size' | 'build_compressed_size' | 'build_created_at' | 'game_engine' | 'platform' | 'is_public' | 'is_default' | 'is_deleted' | 'created_at' | 'updated_at'.
-type game_branch_create_request() :: #game_branch_create_request{}.
-type game_branch_create_error() :: 'failure' | 'branch_title_already_exists' | 'invalid_game_id' | 'invalid_branch_title' | 'invalid_game_engine' | 'invalid_platform'.
-type game_branch_create_response() :: #game_branch_create_response{}.
-type game_branch_update_request() :: #game_branch_update_request{}.
-type game_branch_update_error() :: 'failure' | 'rev_mismatch' | 'nothing_to_update' | 'branch_title_already_exists' | 'invalid_branch_title'.
-type game_branch_update_response() :: #game_branch_update_response{}.
-type game_branch_build_request() :: #game_branch_build_request{}.
-type game_branch_build_error() :: 'failure' | 'branch_not_exists' | 'build_not_exists' | 'build_is_draft' | 'game_mismatch' | 'platform_mismatch'.
-type game_branch_build_response() :: #game_branch_build_response{}.
-type game_category() :: #game_category{}.
-type game_category_excerpt() :: #game_category_excerpt{}.
-type game_category_manage_error() :: 'failure' | 'already_exists' | 'invalid_name'.
-type game_category_manage_response() :: #game_category_manage_response{}.
-type game_category_create_request() :: #game_category_create_request{}.
-type game_category_update_request() :: #game_category_update_request{}.
-type game_category_excerpt_list() :: #game_category_excerpt_list{}.
-type client_account() :: #client_account{}.
-type client_account_order_by() :: 'id' | 'username' | 'email' | 'is_activated' | 'is_blocked' | 'is_deleted' | 'created_at' | 'updated_at'.
-type personnel_account() :: #personnel_account{}.
-type personnel_account_order_by() :: 'id' | 'username' | 'email' | 'is_blocked' | 'is_deleted' | 'created_at' | 'updated_at'.
-type personnel_account_profile() :: #personnel_account_profile{}.
-type personnel_api_key_update_response() :: #personnel_api_key_update_response{}.
-type personnel_group() :: #personnel_group{}.
-type personnel_group_order_by() :: 'id' | 'name' | 'is_deleted' | 'member_count' | 'created_at' | 'updated_at'.
-type personnel_account_role() :: #personnel_account_role{}.
-type personnel_account_role_order_by() :: 'personnel_id' | 'username' | 'game_id' | 'game_title' | 'user_role'.
-type personnel_group_role() :: #personnel_group_role{}.
-type personnel_group_role_order_by() :: 'group_id' | 'group_name' | 'game_id' | 'game_title' | 'group_role'.
-type access_role_update_request() :: #access_role_update_request{}.
-type settings() :: #settings{}.
-type settings_update_request() :: #settings_update_request{}.
-type regenerate_ci_api_key_response() :: #regenerate_ci_api_key_response{}.
-type build() :: #build{}.
-type build_order_by() :: 'id' | 'game_id' | 'game_title' | 'build_rev' | 'total_size' | 'compressed_size' | 'is_draft' | 'is_deleted' | 'created_at' | 'updated_at'.
-type build_file() :: #build_file{}.
-type draft_build_create_request() :: #draft_build_create_request{}.
-type draft_build_create_error() :: 'failure' | 'invalid_game_id' | 'invalid_build_rev' | 'invalid_platform' | 'build_rev_already_exists'.
-type draft_build_create_response() :: #draft_build_create_response{}.
-type draft_build_update_request() :: #draft_build_update_request{}.
-type draft_build_update_error() :: 'failure' | 'rev_mismatch' | 'invalid_platform'.
-type draft_build_update_response() :: #draft_build_update_response{}.
-type build_publish_error() :: 'failure' | 'already_published' | 'no_files' | 'missing_files' | 'invalid_exe_path'.
-type build_publish_response() :: #build_publish_response{}.
-type build_update_request() :: #build_update_request{}.
-type build_update_error() :: 'failure' | 'rev_mismatch' | 'nothing_to_update'.
-type build_update_response() :: #build_update_response{}.
-type build_delete_error() :: 'failure' | 'already_deleted' | 'has_assigned_branches'.
-type build_delete_response() :: #build_delete_response{}.
-type popular_game() :: #popular_game{}.
-type popular_game_order_by() :: 'purchases'.
-type build_manifest() :: #build_manifest{}.
-type add_game_build_error() :: 'failure' | 'invalid_api_key' | 'invalid_game' | 'invalid_branch' | 'invalid_exe_path' | 'build_already_exists' | 'platform_mismatch'.

-spec order_direction_to_string(order_direction()) -> binary().

order_direction_to_string(asc) -> <<"asc">>;
order_direction_to_string(desc) -> <<"desc">>.

-spec order_direction_from_string(binary()) -> order_direction().

order_direction_from_string(<<"asc">>) -> asc;
order_direction_from_string(<<"desc">>) -> desc.

-spec order_direction_to_json(order_direction()) -> igor_json:json_string().

order_direction_to_json(asc) -> <<"asc">>;
order_direction_to_json(desc) -> <<"desc">>.

-spec order_direction_from_json(igor_json:json()) -> order_direction().

order_direction_from_json(<<"asc">>) -> asc;
order_direction_from_json(<<"desc">>) -> desc.

-spec game_engine_to_string(game_engine()) -> binary().

game_engine_to_string(generic) -> <<"generic">>;
game_engine_to_string(ue4) -> <<"ue4">>;
game_engine_to_string(unity) -> <<"unity">>;
game_engine_to_string(hydra) -> <<"hydra">>;
game_engine_to_string(cry) -> <<"cry">>.

-spec game_engine_from_string(binary()) -> game_engine().

game_engine_from_string(<<"generic">>) -> generic;
game_engine_from_string(<<"ue4">>) -> ue4;
game_engine_from_string(<<"unity">>) -> unity;
game_engine_from_string(<<"hydra">>) -> hydra;
game_engine_from_string(<<"cry">>) -> cry.

-spec game_engine_to_json(game_engine()) -> igor_json:json_string().

game_engine_to_json(generic) -> <<"generic">>;
game_engine_to_json(ue4) -> <<"ue4">>;
game_engine_to_json(unity) -> <<"unity">>;
game_engine_to_json(hydra) -> <<"hydra">>;
game_engine_to_json(cry) -> <<"cry">>.

-spec game_engine_from_json(igor_json:json()) -> game_engine().

game_engine_from_json(<<"generic">>) -> generic;
game_engine_from_json(<<"ue4">>) -> ue4;
game_engine_from_json(<<"unity">>) -> unity;
game_engine_from_json(<<"hydra">>) -> hydra;
game_engine_from_json(<<"cry">>) -> cry.

-spec platform_to_string(platform()) -> binary().

platform_to_string(windows) -> <<"windows">>;
platform_to_string(linux) -> <<"linux">>;
platform_to_string(macos) -> <<"macos">>;
platform_to_string(ios) -> <<"ios">>;
platform_to_string(android) -> <<"android">>.

-spec platform_from_string(binary()) -> platform().

platform_from_string(<<"windows">>) -> windows;
platform_from_string(<<"linux">>) -> linux;
platform_from_string(<<"macos">>) -> macos;
platform_from_string(<<"ios">>) -> ios;
platform_from_string(<<"android">>) -> android.

-spec platform_to_json(platform()) -> igor_json:json_string().

platform_to_json(windows) -> <<"windows">>;
platform_to_json(linux) -> <<"linux">>;
platform_to_json(macos) -> <<"macos">>;
platform_to_json(ios) -> <<"ios">>;
platform_to_json(android) -> <<"android">>.

-spec platform_from_json(igor_json:json()) -> platform().

platform_from_json(<<"windows">>) -> windows;
platform_from_json(<<"linux">>) -> linux;
platform_from_json(<<"macos">>) -> macos;
platform_from_json(<<"ios">>) -> ios;
platform_from_json(<<"android">>) -> android.

-spec access_role_to_string(access_role()) -> binary().

access_role_to_string(consumer) -> <<"consumer">>;
access_role_to_string(uploader) -> <<"uploader">>;
access_role_to_string(maintainer) -> <<"maintainer">>;
access_role_to_string(admin) -> <<"admin">>.

-spec access_role_from_string(binary()) -> access_role().

access_role_from_string(<<"consumer">>) -> consumer;
access_role_from_string(<<"uploader">>) -> uploader;
access_role_from_string(<<"maintainer">>) -> maintainer;
access_role_from_string(<<"admin">>) -> admin.

-spec access_role_to_json(access_role()) -> igor_json:json_string().

access_role_to_json(consumer) -> <<"consumer">>;
access_role_to_json(uploader) -> <<"uploader">>;
access_role_to_json(maintainer) -> <<"maintainer">>;
access_role_to_json(admin) -> <<"admin">>.

-spec access_role_from_json(igor_json:json()) -> access_role().

access_role_from_json(<<"consumer">>) -> consumer;
access_role_from_json(<<"uploader">>) -> uploader;
access_role_from_json(<<"maintainer">>) -> maintainer;
access_role_from_json(<<"admin">>) -> admin.

-spec currency_to_string(currency()) -> binary().

currency_to_string(eur) -> <<"eur">>;
currency_to_string(usd) -> <<"usd">>;
currency_to_string(rub) -> <<"rub">>.

-spec currency_from_string(binary()) -> currency().

currency_from_string(<<"eur">>) -> eur;
currency_from_string(<<"usd">>) -> usd;
currency_from_string(<<"rub">>) -> rub.

-spec currency_to_json(currency()) -> igor_json:json_string().

currency_to_json(eur) -> <<"eur">>;
currency_to_json(usd) -> <<"usd">>;
currency_to_json(rub) -> <<"rub">>.

-spec currency_from_json(igor_json:json()) -> currency().

currency_from_json(<<"eur">>) -> eur;
currency_from_json(<<"usd">>) -> usd;
currency_from_json(<<"rub">>) -> rub.

-spec game_ownership_to_string(game_ownership()) -> binary().

game_ownership_to_string(none) -> <<"none">>;
game_ownership_to_string(purchase) -> <<"purchase">>;
game_ownership_to_string(grant) -> <<"grant">>;
game_ownership_to_string(employee) -> <<"employee">>.

-spec game_ownership_from_string(binary()) -> game_ownership().

game_ownership_from_string(<<"none">>) -> none;
game_ownership_from_string(<<"purchase">>) -> purchase;
game_ownership_from_string(<<"grant">>) -> grant;
game_ownership_from_string(<<"employee">>) -> employee.

-spec game_ownership_to_json(game_ownership()) -> igor_json:json_string().

game_ownership_to_json(none) -> <<"none">>;
game_ownership_to_json(purchase) -> <<"purchase">>;
game_ownership_to_json(grant) -> <<"grant">>;
game_ownership_to_json(employee) -> <<"employee">>.

-spec game_ownership_from_json(igor_json:json()) -> game_ownership().

game_ownership_from_json(<<"none">>) -> none;
game_ownership_from_json(<<"purchase">>) -> purchase;
game_ownership_from_json(<<"grant">>) -> grant;
game_ownership_from_json(<<"employee">>) -> employee.

-spec registry_value_type_to_string(registry_value_type()) -> binary().

registry_value_type_to_string(string) -> <<"string">>;
registry_value_type_to_string(binary) -> <<"binary">>;
registry_value_type_to_string(dword) -> <<"dword">>;
registry_value_type_to_string(qword) -> <<"qword">>;
registry_value_type_to_string(multi_string) -> <<"multi_string">>;
registry_value_type_to_string(expandable_string) -> <<"expandable_string">>.

-spec registry_value_type_from_string(binary()) -> registry_value_type().

registry_value_type_from_string(<<"string">>) -> string;
registry_value_type_from_string(<<"binary">>) -> binary;
registry_value_type_from_string(<<"dword">>) -> dword;
registry_value_type_from_string(<<"qword">>) -> qword;
registry_value_type_from_string(<<"multi_string">>) -> multi_string;
registry_value_type_from_string(<<"expandable_string">>) -> expandable_string.

-spec registry_value_type_to_json(registry_value_type()) -> igor_json:json_string().

registry_value_type_to_json(string) -> <<"string">>;
registry_value_type_to_json(binary) -> <<"binary">>;
registry_value_type_to_json(dword) -> <<"dword">>;
registry_value_type_to_json(qword) -> <<"qword">>;
registry_value_type_to_json(multi_string) -> <<"multi_string">>;
registry_value_type_to_json(expandable_string) -> <<"expandable_string">>.

-spec registry_value_type_from_json(igor_json:json()) -> registry_value_type().

registry_value_type_from_json(<<"string">>) -> string;
registry_value_type_from_json(<<"binary">>) -> binary;
registry_value_type_from_json(<<"dword">>) -> dword;
registry_value_type_from_json(<<"qword">>) -> qword;
registry_value_type_from_json(<<"multi_string">>) -> multi_string;
registry_value_type_from_json(<<"expandable_string">>) -> expandable_string.

-spec client_registration_error_to_string(client_registration_error()) -> binary().

client_registration_error_to_string(failure) -> <<"failure">>;
client_registration_error_to_string(invalid_email) -> <<"invalid_email">>;
client_registration_error_to_string(invalid_username) -> <<"invalid_username">>;
client_registration_error_to_string(invalid_password) -> <<"invalid_password">>;
client_registration_error_to_string(email_already_registered) -> <<"email_already_registered">>;
client_registration_error_to_string(username_already_registered) -> <<"username_already_registered">>;
client_registration_error_to_string(already_logged_in) -> <<"already_logged_in">>;
client_registration_error_to_string(invalid_captcha_key) -> <<"invalid_captcha_key">>;
client_registration_error_to_string(invalid_captcha_response) -> <<"invalid_captcha_response">>;
client_registration_error_to_string(captcha_expired) -> <<"captcha_expired">>.

-spec client_registration_error_from_string(binary()) -> client_registration_error().

client_registration_error_from_string(<<"failure">>) -> failure;
client_registration_error_from_string(<<"invalid_email">>) -> invalid_email;
client_registration_error_from_string(<<"invalid_username">>) -> invalid_username;
client_registration_error_from_string(<<"invalid_password">>) -> invalid_password;
client_registration_error_from_string(<<"email_already_registered">>) -> email_already_registered;
client_registration_error_from_string(<<"username_already_registered">>) -> username_already_registered;
client_registration_error_from_string(<<"already_logged_in">>) -> already_logged_in;
client_registration_error_from_string(<<"invalid_captcha_key">>) -> invalid_captcha_key;
client_registration_error_from_string(<<"invalid_captcha_response">>) -> invalid_captcha_response;
client_registration_error_from_string(<<"captcha_expired">>) -> captcha_expired.

-spec client_registration_error_to_json(client_registration_error()) -> igor_json:json_string().

client_registration_error_to_json(failure) -> <<"failure">>;
client_registration_error_to_json(invalid_email) -> <<"invalid_email">>;
client_registration_error_to_json(invalid_username) -> <<"invalid_username">>;
client_registration_error_to_json(invalid_password) -> <<"invalid_password">>;
client_registration_error_to_json(email_already_registered) -> <<"email_already_registered">>;
client_registration_error_to_json(username_already_registered) -> <<"username_already_registered">>;
client_registration_error_to_json(already_logged_in) -> <<"already_logged_in">>;
client_registration_error_to_json(invalid_captcha_key) -> <<"invalid_captcha_key">>;
client_registration_error_to_json(invalid_captcha_response) -> <<"invalid_captcha_response">>;
client_registration_error_to_json(captcha_expired) -> <<"captcha_expired">>.

-spec client_registration_error_from_json(igor_json:json()) -> client_registration_error().

client_registration_error_from_json(<<"failure">>) -> failure;
client_registration_error_from_json(<<"invalid_email">>) -> invalid_email;
client_registration_error_from_json(<<"invalid_username">>) -> invalid_username;
client_registration_error_from_json(<<"invalid_password">>) -> invalid_password;
client_registration_error_from_json(<<"email_already_registered">>) -> email_already_registered;
client_registration_error_from_json(<<"username_already_registered">>) -> username_already_registered;
client_registration_error_from_json(<<"already_logged_in">>) -> already_logged_in;
client_registration_error_from_json(<<"invalid_captcha_key">>) -> invalid_captcha_key;
client_registration_error_from_json(<<"invalid_captcha_response">>) -> invalid_captcha_response;
client_registration_error_from_json(<<"captcha_expired">>) -> captcha_expired.

-spec client_login_error_to_string(client_login_error()) -> binary().

client_login_error_to_string(failure) -> <<"failure">>;
client_login_error_to_string(already_logged_in) -> <<"already_logged_in">>;
client_login_error_to_string(account_not_exists) -> <<"account_not_exists">>;
client_login_error_to_string(account_not_activated) -> <<"account_not_activated">>;
client_login_error_to_string(account_is_blocked) -> <<"account_is_blocked">>;
client_login_error_to_string(account_is_deleted) -> <<"account_is_deleted">>;
client_login_error_to_string(invalid_password) -> <<"invalid_password">>.

-spec client_login_error_from_string(binary()) -> client_login_error().

client_login_error_from_string(<<"failure">>) -> failure;
client_login_error_from_string(<<"already_logged_in">>) -> already_logged_in;
client_login_error_from_string(<<"account_not_exists">>) -> account_not_exists;
client_login_error_from_string(<<"account_not_activated">>) -> account_not_activated;
client_login_error_from_string(<<"account_is_blocked">>) -> account_is_blocked;
client_login_error_from_string(<<"account_is_deleted">>) -> account_is_deleted;
client_login_error_from_string(<<"invalid_password">>) -> invalid_password.

-spec client_login_error_to_json(client_login_error()) -> igor_json:json_string().

client_login_error_to_json(failure) -> <<"failure">>;
client_login_error_to_json(already_logged_in) -> <<"already_logged_in">>;
client_login_error_to_json(account_not_exists) -> <<"account_not_exists">>;
client_login_error_to_json(account_not_activated) -> <<"account_not_activated">>;
client_login_error_to_json(account_is_blocked) -> <<"account_is_blocked">>;
client_login_error_to_json(account_is_deleted) -> <<"account_is_deleted">>;
client_login_error_to_json(invalid_password) -> <<"invalid_password">>.

-spec client_login_error_from_json(igor_json:json()) -> client_login_error().

client_login_error_from_json(<<"failure">>) -> failure;
client_login_error_from_json(<<"already_logged_in">>) -> already_logged_in;
client_login_error_from_json(<<"account_not_exists">>) -> account_not_exists;
client_login_error_from_json(<<"account_not_activated">>) -> account_not_activated;
client_login_error_from_json(<<"account_is_blocked">>) -> account_is_blocked;
client_login_error_from_json(<<"account_is_deleted">>) -> account_is_deleted;
client_login_error_from_json(<<"invalid_password">>) -> invalid_password.

-spec client_password_reset_error_to_string(client_password_reset_error()) -> binary().

client_password_reset_error_to_string(failure) -> <<"failure">>;
client_password_reset_error_to_string(invalid_new_password) -> <<"invalid_new_password">>;
client_password_reset_error_to_string(invalid_captcha_key) -> <<"invalid_captcha_key">>;
client_password_reset_error_to_string(invalid_captcha_response) -> <<"invalid_captcha_response">>;
client_password_reset_error_to_string(captcha_expired) -> <<"captcha_expired">>.

-spec client_password_reset_error_from_string(binary()) -> client_password_reset_error().

client_password_reset_error_from_string(<<"failure">>) -> failure;
client_password_reset_error_from_string(<<"invalid_new_password">>) -> invalid_new_password;
client_password_reset_error_from_string(<<"invalid_captcha_key">>) -> invalid_captcha_key;
client_password_reset_error_from_string(<<"invalid_captcha_response">>) -> invalid_captcha_response;
client_password_reset_error_from_string(<<"captcha_expired">>) -> captcha_expired.

-spec client_password_reset_error_to_json(client_password_reset_error()) -> igor_json:json_string().

client_password_reset_error_to_json(failure) -> <<"failure">>;
client_password_reset_error_to_json(invalid_new_password) -> <<"invalid_new_password">>;
client_password_reset_error_to_json(invalid_captcha_key) -> <<"invalid_captcha_key">>;
client_password_reset_error_to_json(invalid_captcha_response) -> <<"invalid_captcha_response">>;
client_password_reset_error_to_json(captcha_expired) -> <<"captcha_expired">>.

-spec client_password_reset_error_from_json(igor_json:json()) -> client_password_reset_error().

client_password_reset_error_from_json(<<"failure">>) -> failure;
client_password_reset_error_from_json(<<"invalid_new_password">>) -> invalid_new_password;
client_password_reset_error_from_json(<<"invalid_captcha_key">>) -> invalid_captcha_key;
client_password_reset_error_from_json(<<"invalid_captcha_response">>) -> invalid_captcha_response;
client_password_reset_error_from_json(<<"captcha_expired">>) -> captcha_expired.

-spec client_password_change_error_to_string(client_password_change_error()) -> binary().

client_password_change_error_to_string(failure) -> <<"failure">>;
client_password_change_error_to_string(invalid_current_password) -> <<"invalid_current_password">>;
client_password_change_error_to_string(invalid_new_password) -> <<"invalid_new_password">>;
client_password_change_error_to_string(not_logged_in) -> <<"not_logged_in">>.

-spec client_password_change_error_from_string(binary()) -> client_password_change_error().

client_password_change_error_from_string(<<"failure">>) -> failure;
client_password_change_error_from_string(<<"invalid_current_password">>) -> invalid_current_password;
client_password_change_error_from_string(<<"invalid_new_password">>) -> invalid_new_password;
client_password_change_error_from_string(<<"not_logged_in">>) -> not_logged_in.

-spec client_password_change_error_to_json(client_password_change_error()) -> igor_json:json_string().

client_password_change_error_to_json(failure) -> <<"failure">>;
client_password_change_error_to_json(invalid_current_password) -> <<"invalid_current_password">>;
client_password_change_error_to_json(invalid_new_password) -> <<"invalid_new_password">>;
client_password_change_error_to_json(not_logged_in) -> <<"not_logged_in">>.

-spec client_password_change_error_from_json(igor_json:json()) -> client_password_change_error().

client_password_change_error_from_json(<<"failure">>) -> failure;
client_password_change_error_from_json(<<"invalid_current_password">>) -> invalid_current_password;
client_password_change_error_from_json(<<"invalid_new_password">>) -> invalid_new_password;
client_password_change_error_from_json(<<"not_logged_in">>) -> not_logged_in.

-spec personnel_login_error_to_string(personnel_login_error()) -> binary().

personnel_login_error_to_string(failure) -> <<"failure">>;
personnel_login_error_to_string(already_logged_in) -> <<"already_logged_in">>;
personnel_login_error_to_string(account_not_exists) -> <<"account_not_exists">>;
personnel_login_error_to_string(account_is_blocked) -> <<"account_is_blocked">>;
personnel_login_error_to_string(account_is_deleted) -> <<"account_is_deleted">>;
personnel_login_error_to_string(invalid_password) -> <<"invalid_password">>.

-spec personnel_login_error_from_string(binary()) -> personnel_login_error().

personnel_login_error_from_string(<<"failure">>) -> failure;
personnel_login_error_from_string(<<"already_logged_in">>) -> already_logged_in;
personnel_login_error_from_string(<<"account_not_exists">>) -> account_not_exists;
personnel_login_error_from_string(<<"account_is_blocked">>) -> account_is_blocked;
personnel_login_error_from_string(<<"account_is_deleted">>) -> account_is_deleted;
personnel_login_error_from_string(<<"invalid_password">>) -> invalid_password.

-spec personnel_login_error_to_json(personnel_login_error()) -> igor_json:json_string().

personnel_login_error_to_json(failure) -> <<"failure">>;
personnel_login_error_to_json(already_logged_in) -> <<"already_logged_in">>;
personnel_login_error_to_json(account_not_exists) -> <<"account_not_exists">>;
personnel_login_error_to_json(account_is_blocked) -> <<"account_is_blocked">>;
personnel_login_error_to_json(account_is_deleted) -> <<"account_is_deleted">>;
personnel_login_error_to_json(invalid_password) -> <<"invalid_password">>.

-spec personnel_login_error_from_json(igor_json:json()) -> personnel_login_error().

personnel_login_error_from_json(<<"failure">>) -> failure;
personnel_login_error_from_json(<<"already_logged_in">>) -> already_logged_in;
personnel_login_error_from_json(<<"account_not_exists">>) -> account_not_exists;
personnel_login_error_from_json(<<"account_is_blocked">>) -> account_is_blocked;
personnel_login_error_from_json(<<"account_is_deleted">>) -> account_is_deleted;
personnel_login_error_from_json(<<"invalid_password">>) -> invalid_password.

-spec captcha_error_to_string(captcha_error()) -> binary().

captcha_error_to_string(failure) -> <<"failure">>.

-spec captcha_error_from_string(binary()) -> captcha_error().

captcha_error_from_string(<<"failure">>) -> failure.

-spec captcha_error_to_json(captcha_error()) -> igor_json:json_string().

captcha_error_to_json(failure) -> <<"failure">>.

-spec captcha_error_from_json(igor_json:json()) -> captcha_error().

captcha_error_from_json(<<"failure">>) -> failure.

-spec game_order_by_to_string(game_order_by()) -> binary().

game_order_by_to_string(id) -> <<"id">>;
game_order_by_to_string(title) -> <<"title">>;
game_order_by_to_string(description) -> <<"description">>;
game_order_by_to_string(price) -> <<"price">>;
game_order_by_to_string(currency) -> <<"currency">>;
game_order_by_to_string(is_published) -> <<"is_published">>;
game_order_by_to_string(is_disabled) -> <<"is_disabled">>;
game_order_by_to_string(is_deleted) -> <<"is_deleted">>;
game_order_by_to_string(created_at) -> <<"created_at">>;
game_order_by_to_string(updated_at) -> <<"updated_at">>.

-spec game_order_by_from_string(binary()) -> game_order_by().

game_order_by_from_string(<<"id">>) -> id;
game_order_by_from_string(<<"title">>) -> title;
game_order_by_from_string(<<"description">>) -> description;
game_order_by_from_string(<<"price">>) -> price;
game_order_by_from_string(<<"currency">>) -> currency;
game_order_by_from_string(<<"is_published">>) -> is_published;
game_order_by_from_string(<<"is_disabled">>) -> is_disabled;
game_order_by_from_string(<<"is_deleted">>) -> is_deleted;
game_order_by_from_string(<<"created_at">>) -> created_at;
game_order_by_from_string(<<"updated_at">>) -> updated_at.

-spec game_order_by_to_json(game_order_by()) -> igor_json:json_string().

game_order_by_to_json(id) -> <<"id">>;
game_order_by_to_json(title) -> <<"title">>;
game_order_by_to_json(description) -> <<"description">>;
game_order_by_to_json(price) -> <<"price">>;
game_order_by_to_json(currency) -> <<"currency">>;
game_order_by_to_json(is_published) -> <<"is_published">>;
game_order_by_to_json(is_disabled) -> <<"is_disabled">>;
game_order_by_to_json(is_deleted) -> <<"is_deleted">>;
game_order_by_to_json(created_at) -> <<"created_at">>;
game_order_by_to_json(updated_at) -> <<"updated_at">>.

-spec game_order_by_from_json(igor_json:json()) -> game_order_by().

game_order_by_from_json(<<"id">>) -> id;
game_order_by_from_json(<<"title">>) -> title;
game_order_by_from_json(<<"description">>) -> description;
game_order_by_from_json(<<"price">>) -> price;
game_order_by_from_json(<<"currency">>) -> currency;
game_order_by_from_json(<<"is_published">>) -> is_published;
game_order_by_from_json(<<"is_disabled">>) -> is_disabled;
game_order_by_from_json(<<"is_deleted">>) -> is_deleted;
game_order_by_from_json(<<"created_at">>) -> created_at;
game_order_by_from_json(<<"updated_at">>) -> updated_at.

-spec game_create_error_to_string(game_create_error()) -> binary().

game_create_error_to_string(failure) -> <<"failure">>;
game_create_error_to_string(game_id_already_exists) -> <<"game_id_already_exists">>;
game_create_error_to_string(game_title_already_exists) -> <<"game_title_already_exists">>;
game_create_error_to_string(invalid_price) -> <<"invalid_price">>;
game_create_error_to_string(invalid_currency) -> <<"invalid_currency">>.

-spec game_create_error_from_string(binary()) -> game_create_error().

game_create_error_from_string(<<"failure">>) -> failure;
game_create_error_from_string(<<"game_id_already_exists">>) -> game_id_already_exists;
game_create_error_from_string(<<"game_title_already_exists">>) -> game_title_already_exists;
game_create_error_from_string(<<"invalid_price">>) -> invalid_price;
game_create_error_from_string(<<"invalid_currency">>) -> invalid_currency.

-spec game_create_error_to_json(game_create_error()) -> igor_json:json_string().

game_create_error_to_json(failure) -> <<"failure">>;
game_create_error_to_json(game_id_already_exists) -> <<"game_id_already_exists">>;
game_create_error_to_json(game_title_already_exists) -> <<"game_title_already_exists">>;
game_create_error_to_json(invalid_price) -> <<"invalid_price">>;
game_create_error_to_json(invalid_currency) -> <<"invalid_currency">>.

-spec game_create_error_from_json(igor_json:json()) -> game_create_error().

game_create_error_from_json(<<"failure">>) -> failure;
game_create_error_from_json(<<"game_id_already_exists">>) -> game_id_already_exists;
game_create_error_from_json(<<"game_title_already_exists">>) -> game_title_already_exists;
game_create_error_from_json(<<"invalid_price">>) -> invalid_price;
game_create_error_from_json(<<"invalid_currency">>) -> invalid_currency.

-spec game_update_error_to_string(game_update_error()) -> binary().

game_update_error_to_string(failure) -> <<"failure">>;
game_update_error_to_string(rev_mismatch) -> <<"rev_mismatch">>;
game_update_error_to_string(nothing_to_update) -> <<"nothing_to_update">>;
game_update_error_to_string(game_title_already_exists) -> <<"game_title_already_exists">>;
game_update_error_to_string(invalid_game_title) -> <<"invalid_game_title">>;
game_update_error_to_string(invalid_jira_key) -> <<"invalid_jira_key">>;
game_update_error_to_string(invalid_selene_key) -> <<"invalid_selene_key">>;
game_update_error_to_string(invalid_ci_url) -> <<"invalid_ci_url">>;
game_update_error_to_string(invalid_discord_url) -> <<"invalid_discord_url">>;
game_update_error_to_string(invalid_price) -> <<"invalid_price">>;
game_update_error_to_string(invalid_currency) -> <<"invalid_currency">>;
game_update_error_to_string(invalid_build_lifetime) -> <<"invalid_build_lifetime">>.

-spec game_update_error_from_string(binary()) -> game_update_error().

game_update_error_from_string(<<"failure">>) -> failure;
game_update_error_from_string(<<"rev_mismatch">>) -> rev_mismatch;
game_update_error_from_string(<<"nothing_to_update">>) -> nothing_to_update;
game_update_error_from_string(<<"game_title_already_exists">>) -> game_title_already_exists;
game_update_error_from_string(<<"invalid_game_title">>) -> invalid_game_title;
game_update_error_from_string(<<"invalid_jira_key">>) -> invalid_jira_key;
game_update_error_from_string(<<"invalid_selene_key">>) -> invalid_selene_key;
game_update_error_from_string(<<"invalid_ci_url">>) -> invalid_ci_url;
game_update_error_from_string(<<"invalid_discord_url">>) -> invalid_discord_url;
game_update_error_from_string(<<"invalid_price">>) -> invalid_price;
game_update_error_from_string(<<"invalid_currency">>) -> invalid_currency;
game_update_error_from_string(<<"invalid_build_lifetime">>) -> invalid_build_lifetime.

-spec game_update_error_to_json(game_update_error()) -> igor_json:json_string().

game_update_error_to_json(failure) -> <<"failure">>;
game_update_error_to_json(rev_mismatch) -> <<"rev_mismatch">>;
game_update_error_to_json(nothing_to_update) -> <<"nothing_to_update">>;
game_update_error_to_json(game_title_already_exists) -> <<"game_title_already_exists">>;
game_update_error_to_json(invalid_game_title) -> <<"invalid_game_title">>;
game_update_error_to_json(invalid_jira_key) -> <<"invalid_jira_key">>;
game_update_error_to_json(invalid_selene_key) -> <<"invalid_selene_key">>;
game_update_error_to_json(invalid_ci_url) -> <<"invalid_ci_url">>;
game_update_error_to_json(invalid_discord_url) -> <<"invalid_discord_url">>;
game_update_error_to_json(invalid_price) -> <<"invalid_price">>;
game_update_error_to_json(invalid_currency) -> <<"invalid_currency">>;
game_update_error_to_json(invalid_build_lifetime) -> <<"invalid_build_lifetime">>.

-spec game_update_error_from_json(igor_json:json()) -> game_update_error().

game_update_error_from_json(<<"failure">>) -> failure;
game_update_error_from_json(<<"rev_mismatch">>) -> rev_mismatch;
game_update_error_from_json(<<"nothing_to_update">>) -> nothing_to_update;
game_update_error_from_json(<<"game_title_already_exists">>) -> game_title_already_exists;
game_update_error_from_json(<<"invalid_game_title">>) -> invalid_game_title;
game_update_error_from_json(<<"invalid_jira_key">>) -> invalid_jira_key;
game_update_error_from_json(<<"invalid_selene_key">>) -> invalid_selene_key;
game_update_error_from_json(<<"invalid_ci_url">>) -> invalid_ci_url;
game_update_error_from_json(<<"invalid_discord_url">>) -> invalid_discord_url;
game_update_error_from_json(<<"invalid_price">>) -> invalid_price;
game_update_error_from_json(<<"invalid_currency">>) -> invalid_currency;
game_update_error_from_json(<<"invalid_build_lifetime">>) -> invalid_build_lifetime.

-spec game_branch_order_by_to_string(game_branch_order_by()) -> binary().

game_branch_order_by_to_string(id) -> <<"id">>;
game_branch_order_by_to_string(title) -> <<"title">>;
game_branch_order_by_to_string(build_id) -> <<"build_id">>;
game_branch_order_by_to_string(build_rev) -> <<"build_rev">>;
game_branch_order_by_to_string(build_total_size) -> <<"build_total_size">>;
game_branch_order_by_to_string(build_compressed_size) -> <<"build_compressed_size">>;
game_branch_order_by_to_string(build_created_at) -> <<"build_created_at">>;
game_branch_order_by_to_string(game_engine) -> <<"game_engine">>;
game_branch_order_by_to_string(platform) -> <<"platform">>;
game_branch_order_by_to_string(is_public) -> <<"is_public">>;
game_branch_order_by_to_string(is_default) -> <<"is_default">>;
game_branch_order_by_to_string(is_deleted) -> <<"is_deleted">>;
game_branch_order_by_to_string(created_at) -> <<"created_at">>;
game_branch_order_by_to_string(updated_at) -> <<"updated_at">>.

-spec game_branch_order_by_from_string(binary()) -> game_branch_order_by().

game_branch_order_by_from_string(<<"id">>) -> id;
game_branch_order_by_from_string(<<"title">>) -> title;
game_branch_order_by_from_string(<<"build_id">>) -> build_id;
game_branch_order_by_from_string(<<"build_rev">>) -> build_rev;
game_branch_order_by_from_string(<<"build_total_size">>) -> build_total_size;
game_branch_order_by_from_string(<<"build_compressed_size">>) -> build_compressed_size;
game_branch_order_by_from_string(<<"build_created_at">>) -> build_created_at;
game_branch_order_by_from_string(<<"game_engine">>) -> game_engine;
game_branch_order_by_from_string(<<"platform">>) -> platform;
game_branch_order_by_from_string(<<"is_public">>) -> is_public;
game_branch_order_by_from_string(<<"is_default">>) -> is_default;
game_branch_order_by_from_string(<<"is_deleted">>) -> is_deleted;
game_branch_order_by_from_string(<<"created_at">>) -> created_at;
game_branch_order_by_from_string(<<"updated_at">>) -> updated_at.

-spec game_branch_order_by_to_json(game_branch_order_by()) -> igor_json:json_string().

game_branch_order_by_to_json(id) -> <<"id">>;
game_branch_order_by_to_json(title) -> <<"title">>;
game_branch_order_by_to_json(build_id) -> <<"build_id">>;
game_branch_order_by_to_json(build_rev) -> <<"build_rev">>;
game_branch_order_by_to_json(build_total_size) -> <<"build_total_size">>;
game_branch_order_by_to_json(build_compressed_size) -> <<"build_compressed_size">>;
game_branch_order_by_to_json(build_created_at) -> <<"build_created_at">>;
game_branch_order_by_to_json(game_engine) -> <<"game_engine">>;
game_branch_order_by_to_json(platform) -> <<"platform">>;
game_branch_order_by_to_json(is_public) -> <<"is_public">>;
game_branch_order_by_to_json(is_default) -> <<"is_default">>;
game_branch_order_by_to_json(is_deleted) -> <<"is_deleted">>;
game_branch_order_by_to_json(created_at) -> <<"created_at">>;
game_branch_order_by_to_json(updated_at) -> <<"updated_at">>.

-spec game_branch_order_by_from_json(igor_json:json()) -> game_branch_order_by().

game_branch_order_by_from_json(<<"id">>) -> id;
game_branch_order_by_from_json(<<"title">>) -> title;
game_branch_order_by_from_json(<<"build_id">>) -> build_id;
game_branch_order_by_from_json(<<"build_rev">>) -> build_rev;
game_branch_order_by_from_json(<<"build_total_size">>) -> build_total_size;
game_branch_order_by_from_json(<<"build_compressed_size">>) -> build_compressed_size;
game_branch_order_by_from_json(<<"build_created_at">>) -> build_created_at;
game_branch_order_by_from_json(<<"game_engine">>) -> game_engine;
game_branch_order_by_from_json(<<"platform">>) -> platform;
game_branch_order_by_from_json(<<"is_public">>) -> is_public;
game_branch_order_by_from_json(<<"is_default">>) -> is_default;
game_branch_order_by_from_json(<<"is_deleted">>) -> is_deleted;
game_branch_order_by_from_json(<<"created_at">>) -> created_at;
game_branch_order_by_from_json(<<"updated_at">>) -> updated_at.

-spec game_branch_create_error_to_string(game_branch_create_error()) -> binary().

game_branch_create_error_to_string(failure) -> <<"failure">>;
game_branch_create_error_to_string(branch_title_already_exists) -> <<"branch_title_already_exists">>;
game_branch_create_error_to_string(invalid_game_id) -> <<"invalid_game_id">>;
game_branch_create_error_to_string(invalid_branch_title) -> <<"invalid_branch_title">>;
game_branch_create_error_to_string(invalid_game_engine) -> <<"invalid_game_engine">>;
game_branch_create_error_to_string(invalid_platform) -> <<"invalid_platform">>.

-spec game_branch_create_error_from_string(binary()) -> game_branch_create_error().

game_branch_create_error_from_string(<<"failure">>) -> failure;
game_branch_create_error_from_string(<<"branch_title_already_exists">>) -> branch_title_already_exists;
game_branch_create_error_from_string(<<"invalid_game_id">>) -> invalid_game_id;
game_branch_create_error_from_string(<<"invalid_branch_title">>) -> invalid_branch_title;
game_branch_create_error_from_string(<<"invalid_game_engine">>) -> invalid_game_engine;
game_branch_create_error_from_string(<<"invalid_platform">>) -> invalid_platform.

-spec game_branch_create_error_to_json(game_branch_create_error()) -> igor_json:json_string().

game_branch_create_error_to_json(failure) -> <<"failure">>;
game_branch_create_error_to_json(branch_title_already_exists) -> <<"branch_title_already_exists">>;
game_branch_create_error_to_json(invalid_game_id) -> <<"invalid_game_id">>;
game_branch_create_error_to_json(invalid_branch_title) -> <<"invalid_branch_title">>;
game_branch_create_error_to_json(invalid_game_engine) -> <<"invalid_game_engine">>;
game_branch_create_error_to_json(invalid_platform) -> <<"invalid_platform">>.

-spec game_branch_create_error_from_json(igor_json:json()) -> game_branch_create_error().

game_branch_create_error_from_json(<<"failure">>) -> failure;
game_branch_create_error_from_json(<<"branch_title_already_exists">>) -> branch_title_already_exists;
game_branch_create_error_from_json(<<"invalid_game_id">>) -> invalid_game_id;
game_branch_create_error_from_json(<<"invalid_branch_title">>) -> invalid_branch_title;
game_branch_create_error_from_json(<<"invalid_game_engine">>) -> invalid_game_engine;
game_branch_create_error_from_json(<<"invalid_platform">>) -> invalid_platform.

-spec game_branch_update_error_to_string(game_branch_update_error()) -> binary().

game_branch_update_error_to_string(failure) -> <<"failure">>;
game_branch_update_error_to_string(rev_mismatch) -> <<"rev_mismatch">>;
game_branch_update_error_to_string(nothing_to_update) -> <<"nothing_to_update">>;
game_branch_update_error_to_string(branch_title_already_exists) -> <<"branch_title_already_exists">>;
game_branch_update_error_to_string(invalid_branch_title) -> <<"invalid_branch_title">>.

-spec game_branch_update_error_from_string(binary()) -> game_branch_update_error().

game_branch_update_error_from_string(<<"failure">>) -> failure;
game_branch_update_error_from_string(<<"rev_mismatch">>) -> rev_mismatch;
game_branch_update_error_from_string(<<"nothing_to_update">>) -> nothing_to_update;
game_branch_update_error_from_string(<<"branch_title_already_exists">>) -> branch_title_already_exists;
game_branch_update_error_from_string(<<"invalid_branch_title">>) -> invalid_branch_title.

-spec game_branch_update_error_to_json(game_branch_update_error()) -> igor_json:json_string().

game_branch_update_error_to_json(failure) -> <<"failure">>;
game_branch_update_error_to_json(rev_mismatch) -> <<"rev_mismatch">>;
game_branch_update_error_to_json(nothing_to_update) -> <<"nothing_to_update">>;
game_branch_update_error_to_json(branch_title_already_exists) -> <<"branch_title_already_exists">>;
game_branch_update_error_to_json(invalid_branch_title) -> <<"invalid_branch_title">>.

-spec game_branch_update_error_from_json(igor_json:json()) -> game_branch_update_error().

game_branch_update_error_from_json(<<"failure">>) -> failure;
game_branch_update_error_from_json(<<"rev_mismatch">>) -> rev_mismatch;
game_branch_update_error_from_json(<<"nothing_to_update">>) -> nothing_to_update;
game_branch_update_error_from_json(<<"branch_title_already_exists">>) -> branch_title_already_exists;
game_branch_update_error_from_json(<<"invalid_branch_title">>) -> invalid_branch_title.

-spec game_branch_build_error_to_string(game_branch_build_error()) -> binary().

game_branch_build_error_to_string(failure) -> <<"failure">>;
game_branch_build_error_to_string(branch_not_exists) -> <<"branch_not_exists">>;
game_branch_build_error_to_string(build_not_exists) -> <<"build_not_exists">>;
game_branch_build_error_to_string(build_is_draft) -> <<"build_is_draft">>;
game_branch_build_error_to_string(game_mismatch) -> <<"game_mismatch">>;
game_branch_build_error_to_string(platform_mismatch) -> <<"platform_mismatch">>.

-spec game_branch_build_error_from_string(binary()) -> game_branch_build_error().

game_branch_build_error_from_string(<<"failure">>) -> failure;
game_branch_build_error_from_string(<<"branch_not_exists">>) -> branch_not_exists;
game_branch_build_error_from_string(<<"build_not_exists">>) -> build_not_exists;
game_branch_build_error_from_string(<<"build_is_draft">>) -> build_is_draft;
game_branch_build_error_from_string(<<"game_mismatch">>) -> game_mismatch;
game_branch_build_error_from_string(<<"platform_mismatch">>) -> platform_mismatch.

-spec game_branch_build_error_to_json(game_branch_build_error()) -> igor_json:json_string().

game_branch_build_error_to_json(failure) -> <<"failure">>;
game_branch_build_error_to_json(branch_not_exists) -> <<"branch_not_exists">>;
game_branch_build_error_to_json(build_not_exists) -> <<"build_not_exists">>;
game_branch_build_error_to_json(build_is_draft) -> <<"build_is_draft">>;
game_branch_build_error_to_json(game_mismatch) -> <<"game_mismatch">>;
game_branch_build_error_to_json(platform_mismatch) -> <<"platform_mismatch">>.

-spec game_branch_build_error_from_json(igor_json:json()) -> game_branch_build_error().

game_branch_build_error_from_json(<<"failure">>) -> failure;
game_branch_build_error_from_json(<<"branch_not_exists">>) -> branch_not_exists;
game_branch_build_error_from_json(<<"build_not_exists">>) -> build_not_exists;
game_branch_build_error_from_json(<<"build_is_draft">>) -> build_is_draft;
game_branch_build_error_from_json(<<"game_mismatch">>) -> game_mismatch;
game_branch_build_error_from_json(<<"platform_mismatch">>) -> platform_mismatch.

-spec game_category_manage_error_to_string(game_category_manage_error()) -> binary().

game_category_manage_error_to_string(failure) -> <<"failure">>;
game_category_manage_error_to_string(already_exists) -> <<"already_exists">>;
game_category_manage_error_to_string(invalid_name) -> <<"invalid_name">>.

-spec game_category_manage_error_from_string(binary()) -> game_category_manage_error().

game_category_manage_error_from_string(<<"failure">>) -> failure;
game_category_manage_error_from_string(<<"already_exists">>) -> already_exists;
game_category_manage_error_from_string(<<"invalid_name">>) -> invalid_name.

-spec game_category_manage_error_to_json(game_category_manage_error()) -> igor_json:json_string().

game_category_manage_error_to_json(failure) -> <<"failure">>;
game_category_manage_error_to_json(already_exists) -> <<"already_exists">>;
game_category_manage_error_to_json(invalid_name) -> <<"invalid_name">>.

-spec game_category_manage_error_from_json(igor_json:json()) -> game_category_manage_error().

game_category_manage_error_from_json(<<"failure">>) -> failure;
game_category_manage_error_from_json(<<"already_exists">>) -> already_exists;
game_category_manage_error_from_json(<<"invalid_name">>) -> invalid_name.

-spec client_account_order_by_to_string(client_account_order_by()) -> binary().

client_account_order_by_to_string(id) -> <<"id">>;
client_account_order_by_to_string(username) -> <<"username">>;
client_account_order_by_to_string(email) -> <<"email">>;
client_account_order_by_to_string(is_activated) -> <<"is_activated">>;
client_account_order_by_to_string(is_blocked) -> <<"is_blocked">>;
client_account_order_by_to_string(is_deleted) -> <<"is_deleted">>;
client_account_order_by_to_string(created_at) -> <<"created_at">>;
client_account_order_by_to_string(updated_at) -> <<"updated_at">>.

-spec client_account_order_by_from_string(binary()) -> client_account_order_by().

client_account_order_by_from_string(<<"id">>) -> id;
client_account_order_by_from_string(<<"username">>) -> username;
client_account_order_by_from_string(<<"email">>) -> email;
client_account_order_by_from_string(<<"is_activated">>) -> is_activated;
client_account_order_by_from_string(<<"is_blocked">>) -> is_blocked;
client_account_order_by_from_string(<<"is_deleted">>) -> is_deleted;
client_account_order_by_from_string(<<"created_at">>) -> created_at;
client_account_order_by_from_string(<<"updated_at">>) -> updated_at.

-spec client_account_order_by_to_json(client_account_order_by()) -> igor_json:json_string().

client_account_order_by_to_json(id) -> <<"id">>;
client_account_order_by_to_json(username) -> <<"username">>;
client_account_order_by_to_json(email) -> <<"email">>;
client_account_order_by_to_json(is_activated) -> <<"is_activated">>;
client_account_order_by_to_json(is_blocked) -> <<"is_blocked">>;
client_account_order_by_to_json(is_deleted) -> <<"is_deleted">>;
client_account_order_by_to_json(created_at) -> <<"created_at">>;
client_account_order_by_to_json(updated_at) -> <<"updated_at">>.

-spec client_account_order_by_from_json(igor_json:json()) -> client_account_order_by().

client_account_order_by_from_json(<<"id">>) -> id;
client_account_order_by_from_json(<<"username">>) -> username;
client_account_order_by_from_json(<<"email">>) -> email;
client_account_order_by_from_json(<<"is_activated">>) -> is_activated;
client_account_order_by_from_json(<<"is_blocked">>) -> is_blocked;
client_account_order_by_from_json(<<"is_deleted">>) -> is_deleted;
client_account_order_by_from_json(<<"created_at">>) -> created_at;
client_account_order_by_from_json(<<"updated_at">>) -> updated_at.

-spec personnel_account_order_by_to_string(personnel_account_order_by()) -> binary().

personnel_account_order_by_to_string(id) -> <<"id">>;
personnel_account_order_by_to_string(username) -> <<"username">>;
personnel_account_order_by_to_string(email) -> <<"email">>;
personnel_account_order_by_to_string(is_blocked) -> <<"is_blocked">>;
personnel_account_order_by_to_string(is_deleted) -> <<"is_deleted">>;
personnel_account_order_by_to_string(created_at) -> <<"created_at">>;
personnel_account_order_by_to_string(updated_at) -> <<"updated_at">>.

-spec personnel_account_order_by_from_string(binary()) -> personnel_account_order_by().

personnel_account_order_by_from_string(<<"id">>) -> id;
personnel_account_order_by_from_string(<<"username">>) -> username;
personnel_account_order_by_from_string(<<"email">>) -> email;
personnel_account_order_by_from_string(<<"is_blocked">>) -> is_blocked;
personnel_account_order_by_from_string(<<"is_deleted">>) -> is_deleted;
personnel_account_order_by_from_string(<<"created_at">>) -> created_at;
personnel_account_order_by_from_string(<<"updated_at">>) -> updated_at.

-spec personnel_account_order_by_to_json(personnel_account_order_by()) -> igor_json:json_string().

personnel_account_order_by_to_json(id) -> <<"id">>;
personnel_account_order_by_to_json(username) -> <<"username">>;
personnel_account_order_by_to_json(email) -> <<"email">>;
personnel_account_order_by_to_json(is_blocked) -> <<"is_blocked">>;
personnel_account_order_by_to_json(is_deleted) -> <<"is_deleted">>;
personnel_account_order_by_to_json(created_at) -> <<"created_at">>;
personnel_account_order_by_to_json(updated_at) -> <<"updated_at">>.

-spec personnel_account_order_by_from_json(igor_json:json()) -> personnel_account_order_by().

personnel_account_order_by_from_json(<<"id">>) -> id;
personnel_account_order_by_from_json(<<"username">>) -> username;
personnel_account_order_by_from_json(<<"email">>) -> email;
personnel_account_order_by_from_json(<<"is_blocked">>) -> is_blocked;
personnel_account_order_by_from_json(<<"is_deleted">>) -> is_deleted;
personnel_account_order_by_from_json(<<"created_at">>) -> created_at;
personnel_account_order_by_from_json(<<"updated_at">>) -> updated_at.

-spec personnel_group_order_by_to_string(personnel_group_order_by()) -> binary().

personnel_group_order_by_to_string(id) -> <<"id">>;
personnel_group_order_by_to_string(name) -> <<"name">>;
personnel_group_order_by_to_string(is_deleted) -> <<"is_deleted">>;
personnel_group_order_by_to_string(member_count) -> <<"member_count">>;
personnel_group_order_by_to_string(created_at) -> <<"created_at">>;
personnel_group_order_by_to_string(updated_at) -> <<"updated_at">>.

-spec personnel_group_order_by_from_string(binary()) -> personnel_group_order_by().

personnel_group_order_by_from_string(<<"id">>) -> id;
personnel_group_order_by_from_string(<<"name">>) -> name;
personnel_group_order_by_from_string(<<"is_deleted">>) -> is_deleted;
personnel_group_order_by_from_string(<<"member_count">>) -> member_count;
personnel_group_order_by_from_string(<<"created_at">>) -> created_at;
personnel_group_order_by_from_string(<<"updated_at">>) -> updated_at.

-spec personnel_group_order_by_to_json(personnel_group_order_by()) -> igor_json:json_string().

personnel_group_order_by_to_json(id) -> <<"id">>;
personnel_group_order_by_to_json(name) -> <<"name">>;
personnel_group_order_by_to_json(is_deleted) -> <<"is_deleted">>;
personnel_group_order_by_to_json(member_count) -> <<"member_count">>;
personnel_group_order_by_to_json(created_at) -> <<"created_at">>;
personnel_group_order_by_to_json(updated_at) -> <<"updated_at">>.

-spec personnel_group_order_by_from_json(igor_json:json()) -> personnel_group_order_by().

personnel_group_order_by_from_json(<<"id">>) -> id;
personnel_group_order_by_from_json(<<"name">>) -> name;
personnel_group_order_by_from_json(<<"is_deleted">>) -> is_deleted;
personnel_group_order_by_from_json(<<"member_count">>) -> member_count;
personnel_group_order_by_from_json(<<"created_at">>) -> created_at;
personnel_group_order_by_from_json(<<"updated_at">>) -> updated_at.

-spec personnel_account_role_order_by_to_string(personnel_account_role_order_by()) -> binary().

personnel_account_role_order_by_to_string(personnel_id) -> <<"personnel_id">>;
personnel_account_role_order_by_to_string(username) -> <<"username">>;
personnel_account_role_order_by_to_string(game_id) -> <<"game_id">>;
personnel_account_role_order_by_to_string(game_title) -> <<"game_title">>;
personnel_account_role_order_by_to_string(user_role) -> <<"user_role">>.

-spec personnel_account_role_order_by_from_string(binary()) -> personnel_account_role_order_by().

personnel_account_role_order_by_from_string(<<"personnel_id">>) -> personnel_id;
personnel_account_role_order_by_from_string(<<"username">>) -> username;
personnel_account_role_order_by_from_string(<<"game_id">>) -> game_id;
personnel_account_role_order_by_from_string(<<"game_title">>) -> game_title;
personnel_account_role_order_by_from_string(<<"user_role">>) -> user_role.

-spec personnel_account_role_order_by_to_json(personnel_account_role_order_by()) -> igor_json:json_string().

personnel_account_role_order_by_to_json(personnel_id) -> <<"personnel_id">>;
personnel_account_role_order_by_to_json(username) -> <<"username">>;
personnel_account_role_order_by_to_json(game_id) -> <<"game_id">>;
personnel_account_role_order_by_to_json(game_title) -> <<"game_title">>;
personnel_account_role_order_by_to_json(user_role) -> <<"user_role">>.

-spec personnel_account_role_order_by_from_json(igor_json:json()) -> personnel_account_role_order_by().

personnel_account_role_order_by_from_json(<<"personnel_id">>) -> personnel_id;
personnel_account_role_order_by_from_json(<<"username">>) -> username;
personnel_account_role_order_by_from_json(<<"game_id">>) -> game_id;
personnel_account_role_order_by_from_json(<<"game_title">>) -> game_title;
personnel_account_role_order_by_from_json(<<"user_role">>) -> user_role.

-spec personnel_group_role_order_by_to_string(personnel_group_role_order_by()) -> binary().

personnel_group_role_order_by_to_string(group_id) -> <<"group_id">>;
personnel_group_role_order_by_to_string(group_name) -> <<"group_name">>;
personnel_group_role_order_by_to_string(game_id) -> <<"game_id">>;
personnel_group_role_order_by_to_string(game_title) -> <<"game_title">>;
personnel_group_role_order_by_to_string(group_role) -> <<"group_role">>.

-spec personnel_group_role_order_by_from_string(binary()) -> personnel_group_role_order_by().

personnel_group_role_order_by_from_string(<<"group_id">>) -> group_id;
personnel_group_role_order_by_from_string(<<"group_name">>) -> group_name;
personnel_group_role_order_by_from_string(<<"game_id">>) -> game_id;
personnel_group_role_order_by_from_string(<<"game_title">>) -> game_title;
personnel_group_role_order_by_from_string(<<"group_role">>) -> group_role.

-spec personnel_group_role_order_by_to_json(personnel_group_role_order_by()) -> igor_json:json_string().

personnel_group_role_order_by_to_json(group_id) -> <<"group_id">>;
personnel_group_role_order_by_to_json(group_name) -> <<"group_name">>;
personnel_group_role_order_by_to_json(game_id) -> <<"game_id">>;
personnel_group_role_order_by_to_json(game_title) -> <<"game_title">>;
personnel_group_role_order_by_to_json(group_role) -> <<"group_role">>.

-spec personnel_group_role_order_by_from_json(igor_json:json()) -> personnel_group_role_order_by().

personnel_group_role_order_by_from_json(<<"group_id">>) -> group_id;
personnel_group_role_order_by_from_json(<<"group_name">>) -> group_name;
personnel_group_role_order_by_from_json(<<"game_id">>) -> game_id;
personnel_group_role_order_by_from_json(<<"game_title">>) -> game_title;
personnel_group_role_order_by_from_json(<<"group_role">>) -> group_role.

-spec build_order_by_to_string(build_order_by()) -> binary().

build_order_by_to_string(id) -> <<"id">>;
build_order_by_to_string(game_id) -> <<"game_id">>;
build_order_by_to_string(game_title) -> <<"game_title">>;
build_order_by_to_string(build_rev) -> <<"build_rev">>;
build_order_by_to_string(total_size) -> <<"total_size">>;
build_order_by_to_string(compressed_size) -> <<"compressed_size">>;
build_order_by_to_string(is_draft) -> <<"is_draft">>;
build_order_by_to_string(is_deleted) -> <<"is_deleted">>;
build_order_by_to_string(created_at) -> <<"created_at">>;
build_order_by_to_string(updated_at) -> <<"updated_at">>.

-spec build_order_by_from_string(binary()) -> build_order_by().

build_order_by_from_string(<<"id">>) -> id;
build_order_by_from_string(<<"game_id">>) -> game_id;
build_order_by_from_string(<<"game_title">>) -> game_title;
build_order_by_from_string(<<"build_rev">>) -> build_rev;
build_order_by_from_string(<<"total_size">>) -> total_size;
build_order_by_from_string(<<"compressed_size">>) -> compressed_size;
build_order_by_from_string(<<"is_draft">>) -> is_draft;
build_order_by_from_string(<<"is_deleted">>) -> is_deleted;
build_order_by_from_string(<<"created_at">>) -> created_at;
build_order_by_from_string(<<"updated_at">>) -> updated_at.

-spec build_order_by_to_json(build_order_by()) -> igor_json:json_string().

build_order_by_to_json(id) -> <<"id">>;
build_order_by_to_json(game_id) -> <<"game_id">>;
build_order_by_to_json(game_title) -> <<"game_title">>;
build_order_by_to_json(build_rev) -> <<"build_rev">>;
build_order_by_to_json(total_size) -> <<"total_size">>;
build_order_by_to_json(compressed_size) -> <<"compressed_size">>;
build_order_by_to_json(is_draft) -> <<"is_draft">>;
build_order_by_to_json(is_deleted) -> <<"is_deleted">>;
build_order_by_to_json(created_at) -> <<"created_at">>;
build_order_by_to_json(updated_at) -> <<"updated_at">>.

-spec build_order_by_from_json(igor_json:json()) -> build_order_by().

build_order_by_from_json(<<"id">>) -> id;
build_order_by_from_json(<<"game_id">>) -> game_id;
build_order_by_from_json(<<"game_title">>) -> game_title;
build_order_by_from_json(<<"build_rev">>) -> build_rev;
build_order_by_from_json(<<"total_size">>) -> total_size;
build_order_by_from_json(<<"compressed_size">>) -> compressed_size;
build_order_by_from_json(<<"is_draft">>) -> is_draft;
build_order_by_from_json(<<"is_deleted">>) -> is_deleted;
build_order_by_from_json(<<"created_at">>) -> created_at;
build_order_by_from_json(<<"updated_at">>) -> updated_at.

-spec draft_build_create_error_to_string(draft_build_create_error()) -> binary().

draft_build_create_error_to_string(failure) -> <<"failure">>;
draft_build_create_error_to_string(invalid_game_id) -> <<"invalid_game_id">>;
draft_build_create_error_to_string(invalid_build_rev) -> <<"invalid_build_rev">>;
draft_build_create_error_to_string(invalid_platform) -> <<"invalid_platform">>;
draft_build_create_error_to_string(build_rev_already_exists) -> <<"build_rev_already_exists">>.

-spec draft_build_create_error_from_string(binary()) -> draft_build_create_error().

draft_build_create_error_from_string(<<"failure">>) -> failure;
draft_build_create_error_from_string(<<"invalid_game_id">>) -> invalid_game_id;
draft_build_create_error_from_string(<<"invalid_build_rev">>) -> invalid_build_rev;
draft_build_create_error_from_string(<<"invalid_platform">>) -> invalid_platform;
draft_build_create_error_from_string(<<"build_rev_already_exists">>) -> build_rev_already_exists.

-spec draft_build_create_error_to_json(draft_build_create_error()) -> igor_json:json_string().

draft_build_create_error_to_json(failure) -> <<"failure">>;
draft_build_create_error_to_json(invalid_game_id) -> <<"invalid_game_id">>;
draft_build_create_error_to_json(invalid_build_rev) -> <<"invalid_build_rev">>;
draft_build_create_error_to_json(invalid_platform) -> <<"invalid_platform">>;
draft_build_create_error_to_json(build_rev_already_exists) -> <<"build_rev_already_exists">>.

-spec draft_build_create_error_from_json(igor_json:json()) -> draft_build_create_error().

draft_build_create_error_from_json(<<"failure">>) -> failure;
draft_build_create_error_from_json(<<"invalid_game_id">>) -> invalid_game_id;
draft_build_create_error_from_json(<<"invalid_build_rev">>) -> invalid_build_rev;
draft_build_create_error_from_json(<<"invalid_platform">>) -> invalid_platform;
draft_build_create_error_from_json(<<"build_rev_already_exists">>) -> build_rev_already_exists.

-spec draft_build_update_error_to_string(draft_build_update_error()) -> binary().

draft_build_update_error_to_string(failure) -> <<"failure">>;
draft_build_update_error_to_string(rev_mismatch) -> <<"rev_mismatch">>;
draft_build_update_error_to_string(invalid_platform) -> <<"invalid_platform">>.

-spec draft_build_update_error_from_string(binary()) -> draft_build_update_error().

draft_build_update_error_from_string(<<"failure">>) -> failure;
draft_build_update_error_from_string(<<"rev_mismatch">>) -> rev_mismatch;
draft_build_update_error_from_string(<<"invalid_platform">>) -> invalid_platform.

-spec draft_build_update_error_to_json(draft_build_update_error()) -> igor_json:json_string().

draft_build_update_error_to_json(failure) -> <<"failure">>;
draft_build_update_error_to_json(rev_mismatch) -> <<"rev_mismatch">>;
draft_build_update_error_to_json(invalid_platform) -> <<"invalid_platform">>.

-spec draft_build_update_error_from_json(igor_json:json()) -> draft_build_update_error().

draft_build_update_error_from_json(<<"failure">>) -> failure;
draft_build_update_error_from_json(<<"rev_mismatch">>) -> rev_mismatch;
draft_build_update_error_from_json(<<"invalid_platform">>) -> invalid_platform.

-spec build_publish_error_to_string(build_publish_error()) -> binary().

build_publish_error_to_string(failure) -> <<"failure">>;
build_publish_error_to_string(already_published) -> <<"already_published">>;
build_publish_error_to_string(no_files) -> <<"no_files">>;
build_publish_error_to_string(missing_files) -> <<"missing_files">>;
build_publish_error_to_string(invalid_exe_path) -> <<"invalid_exe_path">>.

-spec build_publish_error_from_string(binary()) -> build_publish_error().

build_publish_error_from_string(<<"failure">>) -> failure;
build_publish_error_from_string(<<"already_published">>) -> already_published;
build_publish_error_from_string(<<"no_files">>) -> no_files;
build_publish_error_from_string(<<"missing_files">>) -> missing_files;
build_publish_error_from_string(<<"invalid_exe_path">>) -> invalid_exe_path.

-spec build_publish_error_to_json(build_publish_error()) -> igor_json:json_string().

build_publish_error_to_json(failure) -> <<"failure">>;
build_publish_error_to_json(already_published) -> <<"already_published">>;
build_publish_error_to_json(no_files) -> <<"no_files">>;
build_publish_error_to_json(missing_files) -> <<"missing_files">>;
build_publish_error_to_json(invalid_exe_path) -> <<"invalid_exe_path">>.

-spec build_publish_error_from_json(igor_json:json()) -> build_publish_error().

build_publish_error_from_json(<<"failure">>) -> failure;
build_publish_error_from_json(<<"already_published">>) -> already_published;
build_publish_error_from_json(<<"no_files">>) -> no_files;
build_publish_error_from_json(<<"missing_files">>) -> missing_files;
build_publish_error_from_json(<<"invalid_exe_path">>) -> invalid_exe_path.

-spec build_update_error_to_string(build_update_error()) -> binary().

build_update_error_to_string(failure) -> <<"failure">>;
build_update_error_to_string(rev_mismatch) -> <<"rev_mismatch">>;
build_update_error_to_string(nothing_to_update) -> <<"nothing_to_update">>.

-spec build_update_error_from_string(binary()) -> build_update_error().

build_update_error_from_string(<<"failure">>) -> failure;
build_update_error_from_string(<<"rev_mismatch">>) -> rev_mismatch;
build_update_error_from_string(<<"nothing_to_update">>) -> nothing_to_update.

-spec build_update_error_to_json(build_update_error()) -> igor_json:json_string().

build_update_error_to_json(failure) -> <<"failure">>;
build_update_error_to_json(rev_mismatch) -> <<"rev_mismatch">>;
build_update_error_to_json(nothing_to_update) -> <<"nothing_to_update">>.

-spec build_update_error_from_json(igor_json:json()) -> build_update_error().

build_update_error_from_json(<<"failure">>) -> failure;
build_update_error_from_json(<<"rev_mismatch">>) -> rev_mismatch;
build_update_error_from_json(<<"nothing_to_update">>) -> nothing_to_update.

-spec build_delete_error_to_string(build_delete_error()) -> binary().

build_delete_error_to_string(failure) -> <<"failure">>;
build_delete_error_to_string(already_deleted) -> <<"already_deleted">>;
build_delete_error_to_string(has_assigned_branches) -> <<"has_assigned_branches">>.

-spec build_delete_error_from_string(binary()) -> build_delete_error().

build_delete_error_from_string(<<"failure">>) -> failure;
build_delete_error_from_string(<<"already_deleted">>) -> already_deleted;
build_delete_error_from_string(<<"has_assigned_branches">>) -> has_assigned_branches.

-spec build_delete_error_to_json(build_delete_error()) -> igor_json:json_string().

build_delete_error_to_json(failure) -> <<"failure">>;
build_delete_error_to_json(already_deleted) -> <<"already_deleted">>;
build_delete_error_to_json(has_assigned_branches) -> <<"has_assigned_branches">>.

-spec build_delete_error_from_json(igor_json:json()) -> build_delete_error().

build_delete_error_from_json(<<"failure">>) -> failure;
build_delete_error_from_json(<<"already_deleted">>) -> already_deleted;
build_delete_error_from_json(<<"has_assigned_branches">>) -> has_assigned_branches.

-spec popular_game_order_by_to_string(popular_game_order_by()) -> binary().

popular_game_order_by_to_string(purchases) -> <<"purchases">>.

-spec popular_game_order_by_from_string(binary()) -> popular_game_order_by().

popular_game_order_by_from_string(<<"purchases">>) -> purchases.

-spec popular_game_order_by_to_json(popular_game_order_by()) -> igor_json:json_string().

popular_game_order_by_to_json(purchases) -> <<"purchases">>.

-spec popular_game_order_by_from_json(igor_json:json()) -> popular_game_order_by().

popular_game_order_by_from_json(<<"purchases">>) -> purchases.

-spec add_game_build_error_to_string(add_game_build_error()) -> binary().

add_game_build_error_to_string(failure) -> <<"failure">>;
add_game_build_error_to_string(invalid_api_key) -> <<"invalid_api_key">>;
add_game_build_error_to_string(invalid_game) -> <<"invalid_game">>;
add_game_build_error_to_string(invalid_branch) -> <<"invalid_branch">>;
add_game_build_error_to_string(invalid_exe_path) -> <<"invalid_exe_path">>;
add_game_build_error_to_string(build_already_exists) -> <<"build_already_exists">>;
add_game_build_error_to_string(platform_mismatch) -> <<"platform_mismatch">>.

-spec add_game_build_error_from_string(binary()) -> add_game_build_error().

add_game_build_error_from_string(<<"failure">>) -> failure;
add_game_build_error_from_string(<<"invalid_api_key">>) -> invalid_api_key;
add_game_build_error_from_string(<<"invalid_game">>) -> invalid_game;
add_game_build_error_from_string(<<"invalid_branch">>) -> invalid_branch;
add_game_build_error_from_string(<<"invalid_exe_path">>) -> invalid_exe_path;
add_game_build_error_from_string(<<"build_already_exists">>) -> build_already_exists;
add_game_build_error_from_string(<<"platform_mismatch">>) -> platform_mismatch.

-spec add_game_build_error_to_json(add_game_build_error()) -> igor_json:json_string().

add_game_build_error_to_json(failure) -> <<"failure">>;
add_game_build_error_to_json(invalid_api_key) -> <<"invalid_api_key">>;
add_game_build_error_to_json(invalid_game) -> <<"invalid_game">>;
add_game_build_error_to_json(invalid_branch) -> <<"invalid_branch">>;
add_game_build_error_to_json(invalid_exe_path) -> <<"invalid_exe_path">>;
add_game_build_error_to_json(build_already_exists) -> <<"build_already_exists">>;
add_game_build_error_to_json(platform_mismatch) -> <<"platform_mismatch">>.

-spec add_game_build_error_from_json(igor_json:json()) -> add_game_build_error().

add_game_build_error_from_json(<<"failure">>) -> failure;
add_game_build_error_from_json(<<"invalid_api_key">>) -> invalid_api_key;
add_game_build_error_from_json(<<"invalid_game">>) -> invalid_game;
add_game_build_error_from_json(<<"invalid_branch">>) -> invalid_branch;
add_game_build_error_from_json(<<"invalid_exe_path">>) -> invalid_exe_path;
add_game_build_error_from_json(<<"build_already_exists">>) -> build_already_exists;
add_game_build_error_from_json(<<"platform_mismatch">>) -> platform_mismatch.

-spec generic_response_to_json(generic_response()) -> igor_json:json_object().

generic_response_to_json(Record) ->
    #generic_response{result = VarResult} = Record,
    ?assert(VarResult =/= undefined),
    #{
        <<"result">> => igor_json:pack(VarResult, boolean)
    }.

-spec generic_response_from_json(igor_json:json_object()) -> generic_response().

generic_response_from_json(Json) ->
    VarResult = igor_json:parse(Json, <<"result">>, boolean),
    #generic_response{result = VarResult}.

-spec empty_to_json(empty()) -> igor_json:json_object().

empty_to_json(#empty{}) -> #{}.

-spec empty_from_json(igor_json:json_object()) -> empty().

empty_from_json(_Json) -> #empty{}.

-spec collection_to_json(collection(T), igor_json:pack_type(T)) -> igor_json:json_object().

collection_to_json(Record, T) ->
    #collection{items = Items} = Record,
    ?assert(Items =/= undefined),
    #{
        <<"items">> => igor_json:pack(Items, {list, T})
    }.

-spec collection_from_json(igor_json:json_object(), igor_json:parse_type(T)) -> collection(T).

collection_from_json(Json, T) ->
    Items = igor_json:parse(Json, <<"items">>, {list, T}),
    #collection{items = Items}.

-spec collection_slice_to_json(collection_slice(T), igor_json:pack_type(T)) -> igor_json:json_object().

collection_slice_to_json(Record, T) ->
    #collection_slice{total = Total, items = Items} = Record,
    ?assert(Total =/= undefined),
    ?assert(Items =/= undefined),
    #{
        <<"total">> => igor_json:pack(Total, int),
        <<"items">> => igor_json:pack(Items, {list, T})
    }.

-spec collection_slice_from_json(igor_json:json_object(), igor_json:parse_type(T)) -> collection_slice(T).

collection_slice_from_json(Json, T) ->
    Total = igor_json:parse(Json, <<"total">>, int),
    Items = igor_json:parse(Json, <<"items">>, {list, T}),
    #collection_slice{total = Total, items = Items}.

-spec bad_request_error_to_json(bad_request_error(T), igor_json:pack_type(T)) -> igor_json:json_object().

bad_request_error_to_json(Record, T) ->
    #bad_request_error{error = Error} = Record,
    ?assert(Error =/= undefined),
    #{
        <<"error">> => igor_json:pack(Error, T)
    }.

-spec bad_request_error_from_json(igor_json:json_object(), igor_json:parse_type(T)) -> bad_request_error(T).

bad_request_error_from_json(Json, T) ->
    Error = igor_json:parse(Json, <<"error">>, T),
    #bad_request_error{error = Error}.

-spec forbidden_error_to_json(forbidden_error()) -> igor_json:json_object().

forbidden_error_to_json(#forbidden_error{}) -> #{}.

-spec forbidden_error_from_json(igor_json:json_object()) -> forbidden_error().

forbidden_error_from_json(_Json) -> #forbidden_error{}.

-spec not_found_error_to_json(not_found_error()) -> igor_json:json_object().

not_found_error_to_json(#not_found_error{}) -> #{}.

-spec not_found_error_from_json(igor_json:json_object()) -> not_found_error().

not_found_error_from_json(_Json) -> #not_found_error{}.

-spec internal_server_error_to_json(internal_server_error()) -> igor_json:json_object().

internal_server_error_to_json(Record) ->
    #internal_server_error{error = Error} = Record,
    ?assert(Error =/= undefined),
    #{
        <<"error">> => igor_json:pack(Error, string)
    }.

-spec internal_server_error_from_json(igor_json:json_object()) -> internal_server_error().

internal_server_error_from_json(Json) ->
    Error = igor_json:parse(Json, <<"error">>, string),
    #internal_server_error{error = Error}.

-spec price_to_json(price()) -> igor_json:json_object().

price_to_json(Record) ->
    #price{amount = Amount, currency = Currency} = Record,
    ?assert(Amount =/= undefined),
    ?assert(Currency =/= undefined),
    #{
        <<"amount">> => igor_json:pack(Amount, long),
        <<"currency">> => igor_json:pack(Currency, {custom, fun web_protocol:currency_to_json/1})
    }.

-spec price_from_json(igor_json:json_object()) -> price().

price_from_json(Json) ->
    Amount = igor_json:parse(Json, <<"amount">>, long),
    Currency = igor_json:parse(Json, <<"currency">>, {custom, fun web_protocol:currency_from_json/1}),
    #price{amount = Amount, currency = Currency}.

-spec ini_file_entry_to_json(ini_file_entry()) -> igor_json:json_object().

ini_file_entry_to_json(Record) ->
    #ini_file_entry{section = Section, param = Param, value = VarValue} = Record,
    ?assert(Section =/= undefined),
    ?assert(Param =/= undefined),
    ?assert(VarValue =/= undefined),
    #{
        <<"section">> => igor_json:pack(Section, string),
        <<"param">> => igor_json:pack(Param, string),
        <<"value">> => igor_json:pack(VarValue, string)
    }.

-spec ini_file_entry_from_json(igor_json:json_object()) -> ini_file_entry().

ini_file_entry_from_json(Json) ->
    Section = igor_json:parse(Json, <<"section">>, string),
    Param = igor_json:parse(Json, <<"param">>, string),
    VarValue = igor_json:parse(Json, <<"value">>, string),
    #ini_file_entry{section = Section, param = Param, value = VarValue}.

-spec registry_config_entry_to_json(registry_config_entry()) -> igor_json:json_object().

registry_config_entry_to_json(Record) ->
    #registry_config_entry{
        path = Path,
        key = VarKey,
        value_type = ValueType,
        value = VarValue
    } = Record,
    ?assert(Path =/= undefined),
    ?assert(VarKey =/= undefined),
    ?assert(ValueType =/= undefined),
    ?assert(VarValue =/= undefined),
    #{
        <<"path">> => igor_json:pack(Path, string),
        <<"key">> => igor_json:pack(VarKey, string),
        <<"value_type">> => igor_json:pack(ValueType, {custom, fun web_protocol:registry_value_type_to_json/1}),
        <<"value">> => igor_json:pack(VarValue, string)
    }.

-spec registry_config_entry_from_json(igor_json:json_object()) -> registry_config_entry().

registry_config_entry_from_json(Json) ->
    Path = igor_json:parse(Json, <<"path">>, string),
    VarKey = igor_json:parse(Json, <<"key">>, string),
    ValueType = igor_json:parse(Json, <<"value_type">>, {custom, fun web_protocol:registry_value_type_from_json/1}, string),
    VarValue = igor_json:parse(Json, <<"value">>, string),
    #registry_config_entry{
        path = Path,
        key = VarKey,
        value_type = ValueType,
        value = VarValue
    }.

-spec redistributable_entry_to_json(redistributable_entry()) -> igor_json:json_object().

redistributable_entry_to_json(Record) ->
    #redistributable_entry{name = Name, url = Url} = Record,
    ?assert(Name =/= undefined),
    ?assert(Url =/= undefined),
    #{
        <<"name">> => igor_json:pack(Name, string),
        <<"url">> => igor_json:pack(Url, string)
    }.

-spec redistributable_entry_from_json(igor_json:json_object()) -> redistributable_entry().

redistributable_entry_from_json(Json) ->
    Name = igor_json:parse(Json, <<"name">>, string),
    Url = igor_json:parse(Json, <<"url">>, string),
    #redistributable_entry{name = Name, url = Url}.

-spec client_status_response_to_json(client_status_response()) -> igor_json:json_object().

client_status_response_to_json(Record) ->
    #client_status_response{
        logged_in = LoggedIn,
        user_id = UserId,
        email = Email,
        username = Username
    } = Record,
    ?assert(LoggedIn =/= undefined),
    #{
        <<"logged_in">> => igor_json:pack(LoggedIn, boolean),
        <<"user_id">> => igor_json:pack(UserId, long),
        <<"email">> => igor_json:pack(Email, string),
        <<"username">> => igor_json:pack(Username, string)
    }.

-spec client_status_response_from_json(igor_json:json_object()) -> client_status_response().

client_status_response_from_json(Json) ->
    LoggedIn = igor_json:parse(Json, <<"logged_in">>, boolean),
    UserId = igor_json:parse(Json, <<"user_id">>, long, undefined),
    Email = igor_json:parse(Json, <<"email">>, string, undefined),
    Username = igor_json:parse(Json, <<"username">>, string, undefined),
    #client_status_response{
        logged_in = LoggedIn,
        user_id = UserId,
        email = Email,
        username = Username
    }.

-spec client_register_request_to_json(client_register_request()) -> igor_json:json_object().

client_register_request_to_json(Record) ->
    #client_register_request{
        email = Email,
        username = Username,
        password = Password,
        captcha_key = CaptchaKey,
        captcha_answer = CaptchaAnswer
    } = Record,
    ?assert(Email =/= undefined),
    ?assert(Username =/= undefined),
    ?assert(Password =/= undefined),
    #{
        <<"email">> => igor_json:pack(Email, string),
        <<"username">> => igor_json:pack(Username, string),
        <<"password">> => igor_json:pack(Password, string),
        <<"captcha_key">> => igor_json:pack(CaptchaKey, string),
        <<"captcha_answer">> => igor_json:pack(CaptchaAnswer, string)
    }.

-spec client_register_request_from_json(igor_json:json_object()) -> client_register_request().

client_register_request_from_json(Json) ->
    Email = igor_json:parse(Json, <<"email">>, string),
    Username = igor_json:parse(Json, <<"username">>, string),
    Password = igor_json:parse(Json, <<"password">>, string),
    CaptchaKey = igor_json:parse(Json, <<"captcha_key">>, string, undefined),
    CaptchaAnswer = igor_json:parse(Json, <<"captcha_answer">>, string, undefined),
    #client_register_request{
        email = Email,
        username = Username,
        password = Password,
        captcha_key = CaptchaKey,
        captcha_answer = CaptchaAnswer
    }.

-spec client_register_response_to_json(client_register_response()) -> igor_json:json_object().

client_register_response_to_json(Record) ->
    #client_register_response{result = VarResult, error = Error} = Record,
    ?assert(VarResult =/= undefined),
    #{
        <<"result">> => igor_json:pack(VarResult, boolean),
        <<"error">> => igor_json:pack(Error, {custom, fun web_protocol:client_registration_error_to_json/1})
    }.

-spec client_register_response_from_json(igor_json:json_object()) -> client_register_response().

client_register_response_from_json(Json) ->
    VarResult = igor_json:parse(Json, <<"result">>, boolean),
    Error = igor_json:parse(Json, <<"error">>, {custom, fun web_protocol:client_registration_error_from_json/1}, undefined),
    #client_register_response{result = VarResult, error = Error}.

-spec client_register_confirm_request_to_json(client_register_confirm_request()) -> igor_json:json_object().

client_register_confirm_request_to_json(Record) ->
    #client_register_confirm_request{username = Username, security_code = SecurityCode} = Record,
    ?assert(Username =/= undefined),
    ?assert(SecurityCode =/= undefined),
    #{
        <<"username">> => igor_json:pack(Username, string),
        <<"security_code">> => igor_json:pack(SecurityCode, string)
    }.

-spec client_register_confirm_request_from_json(igor_json:json_object()) -> client_register_confirm_request().

client_register_confirm_request_from_json(Json) ->
    Username = igor_json:parse(Json, <<"username">>, string),
    SecurityCode = igor_json:parse(Json, <<"security_code">>, string),
    #client_register_confirm_request{username = Username, security_code = SecurityCode}.

-spec client_resend_request_to_json(client_resend_request()) -> igor_json:json_object().

client_resend_request_to_json(Record) ->
    #client_resend_request{username = Username} = Record,
    ?assert(Username =/= undefined),
    #{
        <<"username">> => igor_json:pack(Username, string)
    }.

-spec client_resend_request_from_json(igor_json:json_object()) -> client_resend_request().

client_resend_request_from_json(Json) ->
    Username = igor_json:parse(Json, <<"username">>, string),
    #client_resend_request{username = Username}.

-spec client_login_request_to_json(client_login_request()) -> igor_json:json_object().

client_login_request_to_json(Record) ->
    #client_login_request{username = Username, password = Password} = Record,
    ?assert(Username =/= undefined),
    ?assert(Password =/= undefined),
    #{
        <<"username">> => igor_json:pack(Username, string),
        <<"password">> => igor_json:pack(Password, string)
    }.

-spec client_login_request_from_json(igor_json:json_object()) -> client_login_request().

client_login_request_from_json(Json) ->
    Username = igor_json:parse(Json, <<"username">>, string),
    Password = igor_json:parse(Json, <<"password">>, string),
    #client_login_request{username = Username, password = Password}.

-spec client_login_response_to_json(client_login_response()) -> igor_json:json_object().

client_login_response_to_json(Record) ->
    #client_login_response{result = VarResult, error = Error, session_id = SessionId} = Record,
    ?assert(VarResult =/= undefined),
    #{
        <<"result">> => igor_json:pack(VarResult, boolean),
        <<"error">> => igor_json:pack(Error, {custom, fun web_protocol:client_login_error_to_json/1}),
        <<"session_id">> => igor_json:pack(SessionId, string)
    }.

-spec client_login_response_from_json(igor_json:json_object()) -> client_login_response().

client_login_response_from_json(Json) ->
    VarResult = igor_json:parse(Json, <<"result">>, boolean),
    Error = igor_json:parse(Json, <<"error">>, {custom, fun web_protocol:client_login_error_from_json/1}, undefined),
    SessionId = igor_json:parse(Json, <<"session_id">>, string, undefined),
    #client_login_response{result = VarResult, error = Error, session_id = SessionId}.

-spec client_password_reset_request_to_json(client_password_reset_request()) -> igor_json:json_object().

client_password_reset_request_to_json(Record) ->
    #client_password_reset_request{
        username = Username,
        new_password = NewPassword,
        captcha_key = CaptchaKey,
        captcha_answer = CaptchaAnswer
    } = Record,
    ?assert(Username =/= undefined),
    ?assert(NewPassword =/= undefined),
    #{
        <<"username">> => igor_json:pack(Username, string),
        <<"new_password">> => igor_json:pack(NewPassword, string),
        <<"captcha_key">> => igor_json:pack(CaptchaKey, string),
        <<"captcha_answer">> => igor_json:pack(CaptchaAnswer, string)
    }.

-spec client_password_reset_request_from_json(igor_json:json_object()) -> client_password_reset_request().

client_password_reset_request_from_json(Json) ->
    Username = igor_json:parse(Json, <<"username">>, string),
    NewPassword = igor_json:parse(Json, <<"new_password">>, string),
    CaptchaKey = igor_json:parse(Json, <<"captcha_key">>, string, undefined),
    CaptchaAnswer = igor_json:parse(Json, <<"captcha_answer">>, string, undefined),
    #client_password_reset_request{
        username = Username,
        new_password = NewPassword,
        captcha_key = CaptchaKey,
        captcha_answer = CaptchaAnswer
    }.

-spec client_password_reset_response_to_json(client_password_reset_response()) -> igor_json:json_object().

client_password_reset_response_to_json(Record) ->
    #client_password_reset_response{result = VarResult, error = Error} = Record,
    ?assert(VarResult =/= undefined),
    #{
        <<"result">> => igor_json:pack(VarResult, boolean),
        <<"error">> => igor_json:pack(Error, {custom, fun web_protocol:client_password_reset_error_to_json/1})
    }.

-spec client_password_reset_response_from_json(igor_json:json_object()) -> client_password_reset_response().

client_password_reset_response_from_json(Json) ->
    VarResult = igor_json:parse(Json, <<"result">>, boolean),
    Error = igor_json:parse(Json, <<"error">>, {custom, fun web_protocol:client_password_reset_error_from_json/1}, undefined),
    #client_password_reset_response{result = VarResult, error = Error}.

-spec client_password_reset_confirm_request_to_json(client_password_reset_confirm_request()) -> igor_json:json_object().

client_password_reset_confirm_request_to_json(Record) ->
    #client_password_reset_confirm_request{username = Username, security_code = SecurityCode} = Record,
    ?assert(Username =/= undefined),
    ?assert(SecurityCode =/= undefined),
    #{
        <<"username">> => igor_json:pack(Username, string),
        <<"security_code">> => igor_json:pack(SecurityCode, string)
    }.

-spec client_password_reset_confirm_request_from_json(igor_json:json_object()) -> client_password_reset_confirm_request().

client_password_reset_confirm_request_from_json(Json) ->
    Username = igor_json:parse(Json, <<"username">>, string),
    SecurityCode = igor_json:parse(Json, <<"security_code">>, string),
    #client_password_reset_confirm_request{username = Username, security_code = SecurityCode}.

-spec client_password_change_request_to_json(client_password_change_request()) -> igor_json:json_object().

client_password_change_request_to_json(Record) ->
    #client_password_change_request{current_password = CurrentPassword, new_password = NewPassword} = Record,
    ?assert(CurrentPassword =/= undefined),
    ?assert(NewPassword =/= undefined),
    #{
        <<"current_password">> => igor_json:pack(CurrentPassword, string),
        <<"new_password">> => igor_json:pack(NewPassword, string)
    }.

-spec client_password_change_request_from_json(igor_json:json_object()) -> client_password_change_request().

client_password_change_request_from_json(Json) ->
    CurrentPassword = igor_json:parse(Json, <<"current_password">>, string),
    NewPassword = igor_json:parse(Json, <<"new_password">>, string),
    #client_password_change_request{current_password = CurrentPassword, new_password = NewPassword}.

-spec client_password_change_response_to_json(client_password_change_response()) -> igor_json:json_object().

client_password_change_response_to_json(Record) ->
    #client_password_change_response{result = VarResult, error = Error} = Record,
    ?assert(VarResult =/= undefined),
    #{
        <<"result">> => igor_json:pack(VarResult, boolean),
        <<"error">> => igor_json:pack(Error, {custom, fun web_protocol:client_password_change_error_to_json/1})
    }.

-spec client_password_change_response_from_json(igor_json:json_object()) -> client_password_change_response().

client_password_change_response_from_json(Json) ->
    VarResult = igor_json:parse(Json, <<"result">>, boolean),
    Error = igor_json:parse(Json, <<"error">>, {custom, fun web_protocol:client_password_change_error_from_json/1}, undefined),
    #client_password_change_response{result = VarResult, error = Error}.

-spec personnel_status_response_to_json(personnel_status_response()) -> igor_json:json_object().

personnel_status_response_to_json(Record) ->
    #personnel_status_response{
        logged_in = LoggedIn,
        user_id = UserId,
        email = Email,
        username = Username
    } = Record,
    ?assert(LoggedIn =/= undefined),
    #{
        <<"logged_in">> => igor_json:pack(LoggedIn, boolean),
        <<"user_id">> => igor_json:pack(UserId, long),
        <<"email">> => igor_json:pack(Email, string),
        <<"username">> => igor_json:pack(Username, string)
    }.

-spec personnel_status_response_from_json(igor_json:json_object()) -> personnel_status_response().

personnel_status_response_from_json(Json) ->
    LoggedIn = igor_json:parse(Json, <<"logged_in">>, boolean),
    UserId = igor_json:parse(Json, <<"user_id">>, long, undefined),
    Email = igor_json:parse(Json, <<"email">>, string, undefined),
    Username = igor_json:parse(Json, <<"username">>, string, undefined),
    #personnel_status_response{
        logged_in = LoggedIn,
        user_id = UserId,
        email = Email,
        username = Username
    }.

-spec personnel_login_request_to_json(personnel_login_request()) -> igor_json:json_object().

personnel_login_request_to_json(Record) ->
    #personnel_login_request{username = Username, password = Password} = Record,
    ?assert(Username =/= undefined),
    ?assert(Password =/= undefined),
    #{
        <<"username">> => igor_json:pack(Username, string),
        <<"password">> => igor_json:pack(Password, string)
    }.

-spec personnel_login_request_from_json(igor_json:json_object()) -> personnel_login_request().

personnel_login_request_from_json(Json) ->
    Username = igor_json:parse(Json, <<"username">>, string),
    Password = igor_json:parse(Json, <<"password">>, string),
    #personnel_login_request{username = Username, password = Password}.

-spec personnel_login_response_to_json(personnel_login_response()) -> igor_json:json_object().

personnel_login_response_to_json(Record) ->
    #personnel_login_response{
        result = VarResult,
        error = Error,
        session_id = SessionId,
        user_id = UserId,
        email = Email,
        username = Username
    } = Record,
    ?assert(VarResult =/= undefined),
    #{
        <<"result">> => igor_json:pack(VarResult, boolean),
        <<"error">> => igor_json:pack(Error, {custom, fun web_protocol:personnel_login_error_to_json/1}),
        <<"session_id">> => igor_json:pack(SessionId, string),
        <<"user_id">> => igor_json:pack(UserId, long),
        <<"email">> => igor_json:pack(Email, string),
        <<"username">> => igor_json:pack(Username, string)
    }.

-spec personnel_login_response_from_json(igor_json:json_object()) -> personnel_login_response().

personnel_login_response_from_json(Json) ->
    VarResult = igor_json:parse(Json, <<"result">>, boolean),
    Error = igor_json:parse(Json, <<"error">>, {custom, fun web_protocol:personnel_login_error_from_json/1}, undefined),
    SessionId = igor_json:parse(Json, <<"session_id">>, string, undefined),
    UserId = igor_json:parse(Json, <<"user_id">>, long, undefined),
    Email = igor_json:parse(Json, <<"email">>, string, undefined),
    Username = igor_json:parse(Json, <<"username">>, string, undefined),
    #personnel_login_response{
        result = VarResult,
        error = Error,
        session_id = SessionId,
        user_id = UserId,
        email = Email,
        username = Username
    }.

-spec captcha_response_to_json(captcha_response()) -> igor_json:json_object().

captcha_response_to_json(Record) ->
    #captcha_response{
        result = VarResult,
        error = Error,
        captcha_key = CaptchaKey,
        filename = Filename
    } = Record,
    ?assert(VarResult =/= undefined),
    #{
        <<"result">> => igor_json:pack(VarResult, boolean),
        <<"error">> => igor_json:pack(Error, {custom, fun web_protocol:captcha_error_to_json/1}),
        <<"captcha_key">> => igor_json:pack(CaptchaKey, string),
        <<"filename">> => igor_json:pack(Filename, string)
    }.

-spec captcha_response_from_json(igor_json:json_object()) -> captcha_response().

captcha_response_from_json(Json) ->
    VarResult = igor_json:parse(Json, <<"result">>, boolean),
    Error = igor_json:parse(Json, <<"error">>, {custom, fun web_protocol:captcha_error_from_json/1}, undefined),
    CaptchaKey = igor_json:parse(Json, <<"captcha_key">>, string, undefined),
    Filename = igor_json:parse(Json, <<"filename">>, string, undefined),
    #captcha_response{
        result = VarResult,
        error = Error,
        captcha_key = CaptchaKey,
        filename = Filename
    }.

-spec game_branch_item_to_json(game_branch_item()) -> igor_json:json_object().

game_branch_item_to_json(Record) ->
    #game_branch_item{
        name = Name,
        is_default = IsDefault,
        build = Build,
        build_time = BuildTime,
        build_change_list = BuildChangeList,
        size = Size,
        compressed_size = CompressedSize,
        exe_path = ExePath,
        log_path = LogPath,
        crash_report_path = CrashReportPath,
        config_path = ConfigPath,
        optional_file_masks = OptionalFileMasks,
        preserved_file_masks = PreservedFileMasks,
        redistributables = Redistributables,
        pdb_files = PdbFiles,
        root_url = RootUrl,
        game_engine = GameEngine,
        ini_config = IniConfig,
        registry_config = RegistryConfig,
        is_reportable = IsReportable
    } = Record,
    ?assert(Name =/= undefined),
    ?assert(IsDefault =/= undefined),
    ?assert(Size =/= undefined),
    ?assert(CompressedSize =/= undefined),
    ?assert(ExePath =/= undefined),
    ?assert(OptionalFileMasks =/= undefined),
    ?assert(PreservedFileMasks =/= undefined),
    ?assert(Redistributables =/= undefined),
    ?assert(PdbFiles =/= undefined),
    ?assert(RootUrl =/= undefined),
    ?assert(IniConfig =/= undefined),
    ?assert(RegistryConfig =/= undefined),
    ?assert(IsReportable =/= undefined),
    #{
        <<"name">> => igor_json:pack(Name, string),
        <<"is_default">> => igor_json:pack(IsDefault, boolean),
        <<"build">> => igor_json:pack(Build, string),
        <<"build_time">> => igor_json:pack(BuildTime, {custom, fun web_types:datetime_to_text/1}),
        <<"build_change_list">> => igor_json:pack(BuildChangeList, string),
        <<"size">> => igor_json:pack(Size, long),
        <<"compressed_size">> => igor_json:pack(CompressedSize, long),
        <<"exe_path">> => igor_json:pack(ExePath, string),
        <<"log_path">> => igor_json:pack(LogPath, string),
        <<"crash_report_path">> => igor_json:pack(CrashReportPath, string),
        <<"config_path">> => igor_json:pack(ConfigPath, string),
        <<"optional_file_masks">> => igor_json:pack(OptionalFileMasks, {list, string}),
        <<"preserved_file_masks">> => igor_json:pack(PreservedFileMasks, {list, string}),
        <<"redistributables">> => igor_json:pack(Redistributables, {list, {custom, fun web_protocol:redistributable_entry_to_json/1}}),
        <<"pdb_files">> => igor_json:pack(PdbFiles, {list, string}),
        <<"root_url">> => igor_json:pack(RootUrl, string),
        <<"game_engine">> => igor_json:pack(GameEngine, {custom, fun web_protocol:game_engine_to_json/1}),
        <<"ini_config">> => igor_json:pack(IniConfig, {list, {custom, fun web_protocol:ini_file_entry_to_json/1}}),
        <<"registry_config">> => igor_json:pack(RegistryConfig, {list, {custom, fun web_protocol:registry_config_entry_to_json/1}}),
        <<"is_reportable">> => igor_json:pack(IsReportable, boolean)
    }.

-spec game_branch_item_from_json(igor_json:json_object()) -> game_branch_item().

game_branch_item_from_json(Json) ->
    Name = igor_json:parse(Json, <<"name">>, string),
    IsDefault = igor_json:parse(Json, <<"is_default">>, boolean),
    Build = igor_json:parse(Json, <<"build">>, string, undefined),
    BuildTime = igor_json:parse(Json, <<"build_time">>, {custom, fun web_types:datetime_from_text/1}, undefined),
    BuildChangeList = igor_json:parse(Json, <<"build_change_list">>, string, undefined),
    Size = igor_json:parse(Json, <<"size">>, long),
    CompressedSize = igor_json:parse(Json, <<"compressed_size">>, long),
    ExePath = igor_json:parse(Json, <<"exe_path">>, string),
    LogPath = igor_json:parse(Json, <<"log_path">>, string, undefined),
    CrashReportPath = igor_json:parse(Json, <<"crash_report_path">>, string, undefined),
    ConfigPath = igor_json:parse(Json, <<"config_path">>, string, undefined),
    OptionalFileMasks = igor_json:parse(Json, <<"optional_file_masks">>, {list, string}, []),
    PreservedFileMasks = igor_json:parse(Json, <<"preserved_file_masks">>, {list, string}, []),
    Redistributables = igor_json:parse(Json, <<"redistributables">>, {list, {custom, fun web_protocol:redistributable_entry_from_json/1}}, []),
    PdbFiles = igor_json:parse(Json, <<"pdb_files">>, {list, string}, []),
    RootUrl = igor_json:parse(Json, <<"root_url">>, string),
    GameEngine = igor_json:parse(Json, <<"game_engine">>, {custom, fun web_protocol:game_engine_from_json/1}, undefined),
    IniConfig = igor_json:parse(Json, <<"ini_config">>, {list, {custom, fun web_protocol:ini_file_entry_from_json/1}}),
    RegistryConfig = igor_json:parse(Json, <<"registry_config">>, {list, {custom, fun web_protocol:registry_config_entry_from_json/1}}),
    IsReportable = igor_json:parse(Json, <<"is_reportable">>, boolean),
    #game_branch_item{
        name = Name,
        is_default = IsDefault,
        build = Build,
        build_time = BuildTime,
        build_change_list = BuildChangeList,
        size = Size,
        compressed_size = CompressedSize,
        exe_path = ExePath,
        log_path = LogPath,
        crash_report_path = CrashReportPath,
        config_path = ConfigPath,
        optional_file_masks = OptionalFileMasks,
        preserved_file_masks = PreservedFileMasks,
        redistributables = Redistributables,
        pdb_files = PdbFiles,
        root_url = RootUrl,
        game_engine = GameEngine,
        ini_config = IniConfig,
        registry_config = RegistryConfig,
        is_reportable = IsReportable
    }.

-spec game_branch_to_json(game_branch()) -> igor_json:json_object().

game_branch_to_json(Record) ->
    #game_branch{
        id = Id,
        rev = Rev,
        game_id = GameId,
        game_title = GameTitle,
        title = Title,
        description = Description,
        password = Password,
        build_id = BuildId,
        build_rev = BuildRev,
        build_commentary = BuildCommentary,
        build_change_list = BuildChangeList,
        build_total_size = BuildTotalSize,
        build_compressed_size = BuildCompressedSize,
        build_exe_path = BuildExePath,
        build_log_path = BuildLogPath,
        build_crash_report_path = BuildCrashReportPath,
        build_cdn_root_url = BuildCdnRootUrl,
        build_config_path = BuildConfigPath,
        build_optional_file_masks = BuildOptionalFileMasks,
        build_preserved_file_masks = BuildPreservedFileMasks,
        build_redistributables = BuildRedistributables,
        build_pdb_files = BuildPdbFiles,
        build_created_at = BuildCreatedAt,
        game_engine = GameEngine,
        platform = Platform,
        ini_config = IniConfig,
        registry_config = RegistryConfig,
        is_reportable = IsReportable,
        is_public = IsPublic,
        is_default = IsDefault,
        is_deleted = IsDeleted,
        created_at = CreatedAt,
        updated_at = UpdatedAt
    } = Record,
    ?assert(Id =/= undefined),
    ?assert(Rev =/= undefined),
    ?assert(GameId =/= undefined),
    ?assert(GameTitle =/= undefined),
    ?assert(Title =/= undefined),
    ?assert(Description =/= undefined),
    ?assert(Password =/= undefined),
    ?assert(Platform =/= undefined),
    ?assert(IniConfig =/= undefined),
    ?assert(RegistryConfig =/= undefined),
    ?assert(IsReportable =/= undefined),
    ?assert(IsPublic =/= undefined),
    ?assert(IsDefault =/= undefined),
    ?assert(IsDeleted =/= undefined),
    ?assert(CreatedAt =/= undefined),
    ?assert(UpdatedAt =/= undefined),
    #{
        <<"id">> => igor_json:pack(Id, long),
        <<"rev">> => igor_json:pack(Rev, int),
        <<"game_id">> => igor_json:pack(GameId, string),
        <<"game_title">> => igor_json:pack(GameTitle, string),
        <<"title">> => igor_json:pack(Title, string),
        <<"description">> => igor_json:pack(Description, string),
        <<"password">> => igor_json:pack(Password, string),
        <<"build_id">> => igor_json:pack(BuildId, long),
        <<"build_rev">> => igor_json:pack(BuildRev, string),
        <<"build_commentary">> => igor_json:pack(BuildCommentary, string),
        <<"build_change_list">> => igor_json:pack(BuildChangeList, string),
        <<"build_total_size">> => igor_json:pack(BuildTotalSize, long),
        <<"build_compressed_size">> => igor_json:pack(BuildCompressedSize, long),
        <<"build_exe_path">> => igor_json:pack(BuildExePath, string),
        <<"build_log_path">> => igor_json:pack(BuildLogPath, string),
        <<"build_crash_report_path">> => igor_json:pack(BuildCrashReportPath, string),
        <<"build_cdn_root_url">> => igor_json:pack(BuildCdnRootUrl, string),
        <<"build_config_path">> => igor_json:pack(BuildConfigPath, string),
        <<"build_optional_file_masks">> => igor_json:pack(BuildOptionalFileMasks, {list, string}),
        <<"build_preserved_file_masks">> => igor_json:pack(BuildPreservedFileMasks, {list, string}),
        <<"build_redistributables">> => igor_json:pack(BuildRedistributables, {list, {custom, fun web_protocol:redistributable_entry_to_json/1}}),
        <<"build_pdb_files">> => igor_json:pack(BuildPdbFiles, {list, string}),
        <<"build_created_at">> => igor_json:pack(BuildCreatedAt, {custom, fun web_types:datetime_to_text/1}),
        <<"game_engine">> => igor_json:pack(GameEngine, {custom, fun web_protocol:game_engine_to_json/1}),
        <<"platform">> => igor_json:pack(Platform, {custom, fun web_protocol:platform_to_json/1}),
        <<"ini_config">> => igor_json:pack(IniConfig, {list, {custom, fun web_protocol:ini_file_entry_to_json/1}}),
        <<"registry_config">> => igor_json:pack(RegistryConfig, {list, {custom, fun web_protocol:registry_config_entry_to_json/1}}),
        <<"is_reportable">> => igor_json:pack(IsReportable, boolean),
        <<"is_public">> => igor_json:pack(IsPublic, boolean),
        <<"is_default">> => igor_json:pack(IsDefault, boolean),
        <<"is_deleted">> => igor_json:pack(IsDeleted, boolean),
        <<"created_at">> => igor_json:pack(CreatedAt, {custom, fun web_types:datetime_to_text/1}),
        <<"updated_at">> => igor_json:pack(UpdatedAt, {custom, fun web_types:datetime_to_text/1})
    }.

-spec game_branch_from_json(igor_json:json_object()) -> game_branch().

game_branch_from_json(Json) ->
    Id = igor_json:parse(Json, <<"id">>, long),
    Rev = igor_json:parse(Json, <<"rev">>, int),
    GameId = igor_json:parse(Json, <<"game_id">>, string),
    GameTitle = igor_json:parse(Json, <<"game_title">>, string),
    Title = igor_json:parse(Json, <<"title">>, string),
    Description = igor_json:parse(Json, <<"description">>, string),
    Password = igor_json:parse(Json, <<"password">>, string),
    BuildId = igor_json:parse(Json, <<"build_id">>, long, undefined),
    BuildRev = igor_json:parse(Json, <<"build_rev">>, string, undefined),
    BuildCommentary = igor_json:parse(Json, <<"build_commentary">>, string, undefined),
    BuildChangeList = igor_json:parse(Json, <<"build_change_list">>, string, undefined),
    BuildTotalSize = igor_json:parse(Json, <<"build_total_size">>, long, undefined),
    BuildCompressedSize = igor_json:parse(Json, <<"build_compressed_size">>, long, undefined),
    BuildExePath = igor_json:parse(Json, <<"build_exe_path">>, string, undefined),
    BuildLogPath = igor_json:parse(Json, <<"build_log_path">>, string, undefined),
    BuildCrashReportPath = igor_json:parse(Json, <<"build_crash_report_path">>, string, undefined),
    BuildCdnRootUrl = igor_json:parse(Json, <<"build_cdn_root_url">>, string, undefined),
    BuildConfigPath = igor_json:parse(Json, <<"build_config_path">>, string, undefined),
    BuildOptionalFileMasks = igor_json:parse(Json, <<"build_optional_file_masks">>, {list, string}, undefined),
    BuildPreservedFileMasks = igor_json:parse(Json, <<"build_preserved_file_masks">>, {list, string}, undefined),
    BuildRedistributables = igor_json:parse(Json, <<"build_redistributables">>, {list, {custom, fun web_protocol:redistributable_entry_from_json/1}}, undefined),
    BuildPdbFiles = igor_json:parse(Json, <<"build_pdb_files">>, {list, string}, undefined),
    BuildCreatedAt = igor_json:parse(Json, <<"build_created_at">>, {custom, fun web_types:datetime_from_text/1}, undefined),
    GameEngine = igor_json:parse(Json, <<"game_engine">>, {custom, fun web_protocol:game_engine_from_json/1}, undefined),
    Platform = igor_json:parse(Json, <<"platform">>, {custom, fun web_protocol:platform_from_json/1}),
    IniConfig = igor_json:parse(Json, <<"ini_config">>, {list, {custom, fun web_protocol:ini_file_entry_from_json/1}}),
    RegistryConfig = igor_json:parse(Json, <<"registry_config">>, {list, {custom, fun web_protocol:registry_config_entry_from_json/1}}),
    IsReportable = igor_json:parse(Json, <<"is_reportable">>, boolean),
    IsPublic = igor_json:parse(Json, <<"is_public">>, boolean),
    IsDefault = igor_json:parse(Json, <<"is_default">>, boolean),
    IsDeleted = igor_json:parse(Json, <<"is_deleted">>, boolean),
    CreatedAt = igor_json:parse(Json, <<"created_at">>, {custom, fun web_types:datetime_from_text/1}),
    UpdatedAt = igor_json:parse(Json, <<"updated_at">>, {custom, fun web_types:datetime_from_text/1}),
    #game_branch{
        id = Id,
        rev = Rev,
        game_id = GameId,
        game_title = GameTitle,
        title = Title,
        description = Description,
        password = Password,
        build_id = BuildId,
        build_rev = BuildRev,
        build_commentary = BuildCommentary,
        build_change_list = BuildChangeList,
        build_total_size = BuildTotalSize,
        build_compressed_size = BuildCompressedSize,
        build_exe_path = BuildExePath,
        build_log_path = BuildLogPath,
        build_crash_report_path = BuildCrashReportPath,
        build_cdn_root_url = BuildCdnRootUrl,
        build_config_path = BuildConfigPath,
        build_optional_file_masks = BuildOptionalFileMasks,
        build_preserved_file_masks = BuildPreservedFileMasks,
        build_redistributables = BuildRedistributables,
        build_pdb_files = BuildPdbFiles,
        build_created_at = BuildCreatedAt,
        game_engine = GameEngine,
        platform = Platform,
        ini_config = IniConfig,
        registry_config = RegistryConfig,
        is_reportable = IsReportable,
        is_public = IsPublic,
        is_default = IsDefault,
        is_deleted = IsDeleted,
        created_at = CreatedAt,
        updated_at = UpdatedAt
    }.

-spec game_item_to_json(game_item()) -> igor_json:json_object().

game_item_to_json(Record) ->
    #game_item{
        guid = Guid,
        title = Title,
        description = Description,
        jira_key = JiraKey,
        selene_key = SeleneKey,
        discord_url = DiscordUrl,
        branches = Branches,
        price = Price,
        ownership = Ownership,
        ownership_until = OwnershipUntil,
        categories = Categories
    } = Record,
    ?assert(Guid =/= undefined),
    ?assert(Title =/= undefined),
    ?assert(Description =/= undefined),
    ?assert(Branches =/= undefined),
    ?assert(Price =/= undefined),
    ?assert(Ownership =/= undefined),
    ?assert(Categories =/= undefined),
    #{
        <<"guid">> => igor_json:pack(Guid, string),
        <<"title">> => igor_json:pack(Title, string),
        <<"description">> => igor_json:pack(Description, string),
        <<"jira_key">> => igor_json:pack(JiraKey, string),
        <<"selene_key">> => igor_json:pack(SeleneKey, string),
        <<"discord_url">> => igor_json:pack(DiscordUrl, string),
        <<"branches">> => igor_json:pack(Branches, {list, {custom, fun web_protocol:game_branch_item_to_json/1}}),
        <<"price">> => igor_json:pack(Price, {custom, fun web_protocol:price_to_json/1}),
        <<"ownership">> => igor_json:pack(Ownership, {custom, fun web_protocol:game_ownership_to_json/1}),
        <<"ownership_until">> => igor_json:pack(OwnershipUntil, {custom, fun web_types:datetime_to_text/1}),
        <<"categories">> => igor_json:pack(Categories, {list, long})
    }.

-spec game_item_from_json(igor_json:json_object()) -> game_item().

game_item_from_json(Json) ->
    Guid = igor_json:parse(Json, <<"guid">>, string),
    Title = igor_json:parse(Json, <<"title">>, string),
    Description = igor_json:parse(Json, <<"description">>, string),
    JiraKey = igor_json:parse(Json, <<"jira_key">>, string, undefined),
    SeleneKey = igor_json:parse(Json, <<"selene_key">>, string, undefined),
    DiscordUrl = igor_json:parse(Json, <<"discord_url">>, string, undefined),
    Branches = igor_json:parse(Json, <<"branches">>, {list, {custom, fun web_protocol:game_branch_item_from_json/1}}, []),
    Price = igor_json:parse(Json, <<"price">>, {custom, fun web_protocol:price_from_json/1}),
    Ownership = igor_json:parse(Json, <<"ownership">>, {custom, fun web_protocol:game_ownership_from_json/1}),
    OwnershipUntil = igor_json:parse(Json, <<"ownership_until">>, {custom, fun web_types:datetime_from_text/1}, undefined),
    Categories = igor_json:parse(Json, <<"categories">>, {list, long}, []),
    #game_item{
        guid = Guid,
        title = Title,
        description = Description,
        jira_key = JiraKey,
        selene_key = SeleneKey,
        discord_url = DiscordUrl,
        branches = Branches,
        price = Price,
        ownership = Ownership,
        ownership_until = OwnershipUntil,
        categories = Categories
    }.

-spec game_to_json(game()) -> igor_json:json_object().

game_to_json(Record) ->
    #game{
        id = Id,
        rev = Rev,
        title = Title,
        description = Description,
        jira_key = JiraKey,
        selene_key = SeleneKey,
        ci_url = CiUrl,
        discord_url = DiscordUrl,
        price = Price,
        currency = Currency,
        build_lifetime = BuildLifetime,
        categories = Categories,
        is_published = IsPublished,
        is_disabled = IsDisabled,
        is_deleted = IsDeleted,
        created_at = CreatedAt,
        updated_at = UpdatedAt
    } = Record,
    ?assert(Id =/= undefined),
    ?assert(Rev =/= undefined),
    ?assert(Title =/= undefined),
    ?assert(Description =/= undefined),
    ?assert(Price =/= undefined),
    ?assert(Currency =/= undefined),
    ?assert(BuildLifetime =/= undefined),
    ?assert(Categories =/= undefined),
    ?assert(IsPublished =/= undefined),
    ?assert(IsDisabled =/= undefined),
    ?assert(IsDeleted =/= undefined),
    ?assert(CreatedAt =/= undefined),
    ?assert(UpdatedAt =/= undefined),
    #{
        <<"id">> => igor_json:pack(Id, string),
        <<"rev">> => igor_json:pack(Rev, int),
        <<"title">> => igor_json:pack(Title, string),
        <<"description">> => igor_json:pack(Description, string),
        <<"jira_key">> => igor_json:pack(JiraKey, string),
        <<"selene_key">> => igor_json:pack(SeleneKey, string),
        <<"ci_url">> => igor_json:pack(CiUrl, string),
        <<"discord_url">> => igor_json:pack(DiscordUrl, string),
        <<"price">> => igor_json:pack(Price, double),
        <<"currency">> => igor_json:pack(Currency, string),
        <<"build_lifetime">> => igor_json:pack(BuildLifetime, int),
        <<"categories">> => igor_json:pack(Categories, {list, long}),
        <<"is_published">> => igor_json:pack(IsPublished, boolean),
        <<"is_disabled">> => igor_json:pack(IsDisabled, boolean),
        <<"is_deleted">> => igor_json:pack(IsDeleted, boolean),
        <<"created_at">> => igor_json:pack(CreatedAt, {custom, fun web_types:datetime_to_text/1}),
        <<"updated_at">> => igor_json:pack(UpdatedAt, {custom, fun web_types:datetime_to_text/1})
    }.

-spec game_from_json(igor_json:json_object()) -> game().

game_from_json(Json) ->
    Id = igor_json:parse(Json, <<"id">>, string),
    Rev = igor_json:parse(Json, <<"rev">>, int),
    Title = igor_json:parse(Json, <<"title">>, string),
    Description = igor_json:parse(Json, <<"description">>, string),
    JiraKey = igor_json:parse(Json, <<"jira_key">>, string, undefined),
    SeleneKey = igor_json:parse(Json, <<"selene_key">>, string, undefined),
    CiUrl = igor_json:parse(Json, <<"ci_url">>, string, undefined),
    DiscordUrl = igor_json:parse(Json, <<"discord_url">>, string, undefined),
    Price = igor_json:parse(Json, <<"price">>, double),
    Currency = igor_json:parse(Json, <<"currency">>, string),
    BuildLifetime = igor_json:parse(Json, <<"build_lifetime">>, int),
    Categories = igor_json:parse(Json, <<"categories">>, {list, long}, []),
    IsPublished = igor_json:parse(Json, <<"is_published">>, boolean),
    IsDisabled = igor_json:parse(Json, <<"is_disabled">>, boolean),
    IsDeleted = igor_json:parse(Json, <<"is_deleted">>, boolean),
    CreatedAt = igor_json:parse(Json, <<"created_at">>, {custom, fun web_types:datetime_from_text/1}),
    UpdatedAt = igor_json:parse(Json, <<"updated_at">>, {custom, fun web_types:datetime_from_text/1}),
    #game{
        id = Id,
        rev = Rev,
        title = Title,
        description = Description,
        jira_key = JiraKey,
        selene_key = SeleneKey,
        ci_url = CiUrl,
        discord_url = DiscordUrl,
        price = Price,
        currency = Currency,
        build_lifetime = BuildLifetime,
        categories = Categories,
        is_published = IsPublished,
        is_disabled = IsDisabled,
        is_deleted = IsDeleted,
        created_at = CreatedAt,
        updated_at = UpdatedAt
    }.

-spec game_file_to_json(game_file()) -> igor_json:json_object().

game_file_to_json(Record) ->
    #game_file{
        relative_path = RelativePath,
        relative_compressed_path = RelativeCompressedPath,
        md5 = Md5,
        size = Size,
        compressed_size = CompressedSize
    } = Record,
    ?assert(RelativePath =/= undefined),
    ?assert(RelativeCompressedPath =/= undefined),
    ?assert(Md5 =/= undefined),
    ?assert(Size =/= undefined),
    ?assert(CompressedSize =/= undefined),
    #{
        <<"relative_path">> => igor_json:pack(RelativePath, string),
        <<"relative_compressed_path">> => igor_json:pack(RelativeCompressedPath, string),
        <<"md5">> => igor_json:pack(Md5, string),
        <<"size">> => igor_json:pack(Size, long),
        <<"compressed_size">> => igor_json:pack(CompressedSize, long)
    }.

-spec game_file_from_json(igor_json:json_object()) -> game_file().

game_file_from_json(Json) ->
    RelativePath = igor_json:parse(Json, <<"relative_path">>, string),
    RelativeCompressedPath = igor_json:parse(Json, <<"relative_compressed_path">>, string),
    Md5 = igor_json:parse(Json, <<"md5">>, string),
    Size = igor_json:parse(Json, <<"size">>, long),
    CompressedSize = igor_json:parse(Json, <<"compressed_size">>, long),
    #game_file{
        relative_path = RelativePath,
        relative_compressed_path = RelativeCompressedPath,
        md5 = Md5,
        size = Size,
        compressed_size = CompressedSize
    }.

-spec game_item_list_to_json(game_item_list()) -> igor_json:json_object().

game_item_list_to_json(Record) ->
    #game_item_list{games = Games} = Record,
    ?assert(Games =/= undefined),
    #{
        <<"games">> => igor_json:pack(Games, {list, {custom, fun web_protocol:game_item_to_json/1}})
    }.

-spec game_item_list_from_json(igor_json:json_object()) -> game_item_list().

game_item_list_from_json(Json) ->
    Games = igor_json:parse(Json, <<"games">>, {list, {custom, fun web_protocol:game_item_from_json/1}}, []),
    #game_item_list{games = Games}.

-spec game_manifest_to_json(game_manifest()) -> igor_json:json_object().

game_manifest_to_json(Record) ->
    #game_manifest{build_rev = BuildRev, files = Files} = Record,
    ?assert(Files =/= undefined),
    #{
        <<"build_rev">> => igor_json:pack(BuildRev, string),
        <<"files">> => igor_json:pack(Files, {list, {custom, fun web_protocol:game_file_to_json/1}})
    }.

-spec game_manifest_from_json(igor_json:json_object()) -> game_manifest().

game_manifest_from_json(Json) ->
    BuildRev = igor_json:parse(Json, <<"build_rev">>, string, undefined),
    Files = igor_json:parse(Json, <<"files">>, {list, {custom, fun web_protocol:game_file_from_json/1}}, []),
    #game_manifest{build_rev = BuildRev, files = Files}.

-spec branch_unlock_request_to_json(branch_unlock_request()) -> igor_json:json_object().

branch_unlock_request_to_json(Record) ->
    #branch_unlock_request{password = Password} = Record,
    ?assert(Password =/= undefined),
    #{
        <<"password">> => igor_json:pack(Password, string)
    }.

-spec branch_unlock_request_from_json(igor_json:json_object()) -> branch_unlock_request().

branch_unlock_request_from_json(Json) ->
    Password = igor_json:parse(Json, <<"password">>, string),
    #branch_unlock_request{password = Password}.

-spec change_log_to_json(change_log()) -> igor_json:json_object().

change_log_to_json(Record) ->
    #change_log{build_rev = BuildRev, build_created_at = BuildCreatedAt, build_change_list = BuildChangeList} = Record,
    ?assert(BuildRev =/= undefined),
    ?assert(BuildCreatedAt =/= undefined),
    ?assert(BuildChangeList =/= undefined),
    #{
        <<"build_rev">> => igor_json:pack(BuildRev, string),
        <<"build_created_at">> => igor_json:pack(BuildCreatedAt, {custom, fun web_types:datetime_to_text/1}),
        <<"build_change_list">> => igor_json:pack(BuildChangeList, string)
    }.

-spec change_log_from_json(igor_json:json_object()) -> change_log().

change_log_from_json(Json) ->
    BuildRev = igor_json:parse(Json, <<"build_rev">>, string),
    BuildCreatedAt = igor_json:parse(Json, <<"build_created_at">>, {custom, fun web_types:datetime_from_text/1}),
    BuildChangeList = igor_json:parse(Json, <<"build_change_list">>, string),
    #change_log{build_rev = BuildRev, build_created_at = BuildCreatedAt, build_change_list = BuildChangeList}.

-spec game_create_request_to_json(game_create_request()) -> igor_json:json_object().

game_create_request_to_json(Record) ->
    #game_create_request{
        id = Id,
        title = Title,
        price = Price,
        currency = Currency
    } = Record,
    ?assert(Id =/= undefined),
    ?assert(Title =/= undefined),
    ?assert(Price =/= undefined),
    ?assert(Currency =/= undefined),
    #{
        <<"id">> => igor_json:pack(Id, string),
        <<"title">> => igor_json:pack(Title, string),
        <<"price">> => igor_json:pack(Price, double),
        <<"currency">> => igor_json:pack(Currency, string)
    }.

-spec game_create_request_from_json(igor_json:json_object()) -> game_create_request().

game_create_request_from_json(Json) ->
    Id = igor_json:parse(Json, <<"id">>, string),
    Title = igor_json:parse(Json, <<"title">>, string),
    Price = igor_json:parse(Json, <<"price">>, double),
    Currency = igor_json:parse(Json, <<"currency">>, string),
    #game_create_request{
        id = Id,
        title = Title,
        price = Price,
        currency = Currency
    }.

-spec game_create_response_to_json(game_create_response()) -> igor_json:json_object().

game_create_response_to_json(Record) ->
    #game_create_response{result = VarResult, error = Error, game = Game} = Record,
    ?assert(VarResult =/= undefined),
    #{
        <<"result">> => igor_json:pack(VarResult, boolean),
        <<"error">> => igor_json:pack(Error, {custom, fun web_protocol:game_create_error_to_json/1}),
        <<"game">> => igor_json:pack(Game, {custom, fun web_protocol:game_to_json/1})
    }.

-spec game_create_response_from_json(igor_json:json_object()) -> game_create_response().

game_create_response_from_json(Json) ->
    VarResult = igor_json:parse(Json, <<"result">>, boolean),
    Error = igor_json:parse(Json, <<"error">>, {custom, fun web_protocol:game_create_error_from_json/1}, undefined),
    Game = igor_json:parse(Json, <<"game">>, {custom, fun web_protocol:game_from_json/1}, undefined),
    #game_create_response{result = VarResult, error = Error, game = Game}.

-spec game_update_request_to_json(game_update_request()) -> igor_json:json_object().

game_update_request_to_json(Record) ->
    #game_update_request{
        title = Title,
        description = Description,
        jira_key = JiraKey,
        selene_key = SeleneKey,
        ci_url = CiUrl,
        discord_url = DiscordUrl,
        price = Price,
        currency = Currency,
        build_lifetime = BuildLifetime,
        is_published = IsPublished,
        is_disabled = IsDisabled,
        is_deleted = IsDeleted
    } = Record,
    #{
        <<"title">> => igor_json:pack(Title, string),
        <<"description">> => igor_json:pack(Description, string),
        <<"jira_key">> => igor_json:pack(JiraKey, string),
        <<"selene_key">> => igor_json:pack(SeleneKey, string),
        <<"ci_url">> => igor_json:pack(CiUrl, string),
        <<"discord_url">> => igor_json:pack(DiscordUrl, string),
        <<"price">> => igor_json:pack(Price, double),
        <<"currency">> => igor_json:pack(Currency, string),
        <<"build_lifetime">> => igor_json:pack(BuildLifetime, int),
        <<"is_published">> => igor_json:pack(IsPublished, boolean),
        <<"is_disabled">> => igor_json:pack(IsDisabled, boolean),
        <<"is_deleted">> => igor_json:pack(IsDeleted, boolean)
    }.

-spec game_update_request_from_json(igor_json:json_object()) -> game_update_request().

game_update_request_from_json(Json) ->
    Title = igor_json:parse(Json, <<"title">>, string, undefined),
    Description = igor_json:parse(Json, <<"description">>, string, undefined),
    JiraKey = igor_json:parse(Json, <<"jira_key">>, string, undefined),
    SeleneKey = igor_json:parse(Json, <<"selene_key">>, string, undefined),
    CiUrl = igor_json:parse(Json, <<"ci_url">>, string, undefined),
    DiscordUrl = igor_json:parse(Json, <<"discord_url">>, string, undefined),
    Price = igor_json:parse(Json, <<"price">>, double, undefined),
    Currency = igor_json:parse(Json, <<"currency">>, string, undefined),
    BuildLifetime = igor_json:parse(Json, <<"build_lifetime">>, int, undefined),
    IsPublished = igor_json:parse(Json, <<"is_published">>, boolean, undefined),
    IsDisabled = igor_json:parse(Json, <<"is_disabled">>, boolean, undefined),
    IsDeleted = igor_json:parse(Json, <<"is_deleted">>, boolean, undefined),
    #game_update_request{
        title = Title,
        description = Description,
        jira_key = JiraKey,
        selene_key = SeleneKey,
        ci_url = CiUrl,
        discord_url = DiscordUrl,
        price = Price,
        currency = Currency,
        build_lifetime = BuildLifetime,
        is_published = IsPublished,
        is_disabled = IsDisabled,
        is_deleted = IsDeleted
    }.

-spec game_update_response_to_json(game_update_response()) -> igor_json:json_object().

game_update_response_to_json(Record) ->
    #game_update_response{result = VarResult, error = Error, game = Game} = Record,
    ?assert(VarResult =/= undefined),
    #{
        <<"result">> => igor_json:pack(VarResult, boolean),
        <<"error">> => igor_json:pack(Error, {custom, fun web_protocol:game_update_error_to_json/1}),
        <<"game">> => igor_json:pack(Game, {custom, fun web_protocol:game_to_json/1})
    }.

-spec game_update_response_from_json(igor_json:json_object()) -> game_update_response().

game_update_response_from_json(Json) ->
    VarResult = igor_json:parse(Json, <<"result">>, boolean),
    Error = igor_json:parse(Json, <<"error">>, {custom, fun web_protocol:game_update_error_from_json/1}, undefined),
    Game = igor_json:parse(Json, <<"game">>, {custom, fun web_protocol:game_from_json/1}, undefined),
    #game_update_response{result = VarResult, error = Error, game = Game}.

-spec game_branch_create_request_to_json(game_branch_create_request()) -> igor_json:json_object().

game_branch_create_request_to_json(Record) ->
    #game_branch_create_request{
        title = Title,
        description = Description,
        password = Password,
        game_engine = GameEngine,
        platform = Platform
    } = Record,
    ?assert(Title =/= undefined),
    ?assert(Description =/= undefined),
    ?assert(Password =/= undefined),
    ?assert(GameEngine =/= undefined),
    ?assert(Platform =/= undefined),
    #{
        <<"title">> => igor_json:pack(Title, string),
        <<"description">> => igor_json:pack(Description, string),
        <<"password">> => igor_json:pack(Password, string),
        <<"game_engine">> => igor_json:pack(GameEngine, {custom, fun web_protocol:game_engine_to_json/1}),
        <<"platform">> => igor_json:pack(Platform, {custom, fun web_protocol:platform_to_json/1})
    }.

-spec game_branch_create_request_from_json(igor_json:json_object()) -> game_branch_create_request().

game_branch_create_request_from_json(Json) ->
    Title = igor_json:parse(Json, <<"title">>, string),
    Description = igor_json:parse(Json, <<"description">>, string),
    Password = igor_json:parse(Json, <<"password">>, string),
    GameEngine = igor_json:parse(Json, <<"game_engine">>, {custom, fun web_protocol:game_engine_from_json/1}),
    Platform = igor_json:parse(Json, <<"platform">>, {custom, fun web_protocol:platform_from_json/1}),
    #game_branch_create_request{
        title = Title,
        description = Description,
        password = Password,
        game_engine = GameEngine,
        platform = Platform
    }.

-spec game_branch_create_response_to_json(game_branch_create_response()) -> igor_json:json_object().

game_branch_create_response_to_json(Record) ->
    #game_branch_create_response{result = VarResult, error = Error, branch = Branch} = Record,
    ?assert(VarResult =/= undefined),
    #{
        <<"result">> => igor_json:pack(VarResult, boolean),
        <<"error">> => igor_json:pack(Error, {custom, fun web_protocol:game_branch_create_error_to_json/1}),
        <<"branch">> => igor_json:pack(Branch, {custom, fun web_protocol:game_branch_to_json/1})
    }.

-spec game_branch_create_response_from_json(igor_json:json_object()) -> game_branch_create_response().

game_branch_create_response_from_json(Json) ->
    VarResult = igor_json:parse(Json, <<"result">>, boolean),
    Error = igor_json:parse(Json, <<"error">>, {custom, fun web_protocol:game_branch_create_error_from_json/1}, undefined),
    Branch = igor_json:parse(Json, <<"branch">>, {custom, fun web_protocol:game_branch_from_json/1}, undefined),
    #game_branch_create_response{result = VarResult, error = Error, branch = Branch}.

-spec game_branch_update_request_to_json(game_branch_update_request()) -> igor_json:json_object().

game_branch_update_request_to_json(Record) ->
    #game_branch_update_request{
        title = Title,
        description = Description,
        password = Password,
        game_engine = GameEngine,
        ini_config = IniConfig,
        registry_config = RegistryConfig,
        is_reportable = IsReportable,
        is_public = IsPublic,
        is_deleted = IsDeleted
    } = Record,
    Json1 = igor_json:maybe_pack_field(#{}, <<"title">>, Title, {nullable, string}),
    Json2 = igor_json:maybe_pack_field(Json1, <<"description">>, Description, {nullable, string}),
    Json3 = igor_json:maybe_pack_field(Json2, <<"password">>, Password, {nullable, string}),
    Json4 = igor_json:maybe_pack_field(Json3, <<"game_engine">>, GameEngine, {nullable, {custom, fun web_protocol:game_engine_to_json/1}}),
    Json5 = igor_json:maybe_pack_field(Json4, <<"ini_config">>, IniConfig, {nullable, {list, {custom, fun web_protocol:ini_file_entry_to_json/1}}}),
    Json6 = igor_json:maybe_pack_field(Json5, <<"registry_config">>, RegistryConfig, {nullable, {list, {custom, fun web_protocol:registry_config_entry_to_json/1}}}),
    Json7 = igor_json:maybe_pack_field(Json6, <<"is_reportable">>, IsReportable, {nullable, boolean}),
    Json8 = igor_json:maybe_pack_field(Json7, <<"is_public">>, IsPublic, {nullable, boolean}),
    Json9 = igor_json:maybe_pack_field(Json8, <<"is_deleted">>, IsDeleted, {nullable, boolean}),
    Json9.

-spec game_branch_update_request_from_json(igor_json:json_object()) -> game_branch_update_request().

game_branch_update_request_from_json(Json) ->
    Title = igor_json:parse(Json, <<"title">>, {nullable, string}, undefined),
    Description = igor_json:parse(Json, <<"description">>, {nullable, string}, undefined),
    Password = igor_json:parse(Json, <<"password">>, {nullable, string}, undefined),
    GameEngine = igor_json:parse(Json, <<"game_engine">>, {nullable, {custom, fun web_protocol:game_engine_from_json/1}}, undefined),
    IniConfig = igor_json:parse(Json, <<"ini_config">>, {nullable, {list, {custom, fun web_protocol:ini_file_entry_from_json/1}}}, undefined),
    RegistryConfig = igor_json:parse(Json, <<"registry_config">>, {nullable, {list, {custom, fun web_protocol:registry_config_entry_from_json/1}}}, undefined),
    IsReportable = igor_json:parse(Json, <<"is_reportable">>, {nullable, boolean}, undefined),
    IsPublic = igor_json:parse(Json, <<"is_public">>, {nullable, boolean}, undefined),
    IsDeleted = igor_json:parse(Json, <<"is_deleted">>, {nullable, boolean}, undefined),
    #game_branch_update_request{
        title = Title,
        description = Description,
        password = Password,
        game_engine = GameEngine,
        ini_config = IniConfig,
        registry_config = RegistryConfig,
        is_reportable = IsReportable,
        is_public = IsPublic,
        is_deleted = IsDeleted
    }.

-spec game_branch_update_response_to_json(game_branch_update_response()) -> igor_json:json_object().

game_branch_update_response_to_json(Record) ->
    #game_branch_update_response{result = VarResult, error = Error, branch = Branch} = Record,
    ?assert(VarResult =/= undefined),
    #{
        <<"result">> => igor_json:pack(VarResult, boolean),
        <<"error">> => igor_json:pack(Error, {custom, fun web_protocol:game_branch_update_error_to_json/1}),
        <<"branch">> => igor_json:pack(Branch, {custom, fun web_protocol:game_branch_to_json/1})
    }.

-spec game_branch_update_response_from_json(igor_json:json_object()) -> game_branch_update_response().

game_branch_update_response_from_json(Json) ->
    VarResult = igor_json:parse(Json, <<"result">>, boolean),
    Error = igor_json:parse(Json, <<"error">>, {custom, fun web_protocol:game_branch_update_error_from_json/1}, undefined),
    Branch = igor_json:parse(Json, <<"branch">>, {custom, fun web_protocol:game_branch_from_json/1}, undefined),
    #game_branch_update_response{result = VarResult, error = Error, branch = Branch}.

-spec game_branch_build_request_to_json(game_branch_build_request()) -> igor_json:json_object().

game_branch_build_request_to_json(Record) ->
    #game_branch_build_request{build_id = BuildId} = Record,
    ?assert(BuildId =/= undefined),
    #{
        <<"build_id">> => igor_json:pack(BuildId, long)
    }.

-spec game_branch_build_request_from_json(igor_json:json_object()) -> game_branch_build_request().

game_branch_build_request_from_json(Json) ->
    BuildId = igor_json:parse(Json, <<"build_id">>, long),
    #game_branch_build_request{build_id = BuildId}.

-spec game_branch_build_response_to_json(game_branch_build_response()) -> igor_json:json_object().

game_branch_build_response_to_json(Record) ->
    #game_branch_build_response{result = VarResult, error = Error, branch = Branch} = Record,
    ?assert(VarResult =/= undefined),
    #{
        <<"result">> => igor_json:pack(VarResult, boolean),
        <<"error">> => igor_json:pack(Error, {custom, fun web_protocol:game_branch_build_error_to_json/1}),
        <<"branch">> => igor_json:pack(Branch, {custom, fun web_protocol:game_branch_to_json/1})
    }.

-spec game_branch_build_response_from_json(igor_json:json_object()) -> game_branch_build_response().

game_branch_build_response_from_json(Json) ->
    VarResult = igor_json:parse(Json, <<"result">>, boolean),
    Error = igor_json:parse(Json, <<"error">>, {custom, fun web_protocol:game_branch_build_error_from_json/1}, undefined),
    Branch = igor_json:parse(Json, <<"branch">>, {custom, fun web_protocol:game_branch_from_json/1}, undefined),
    #game_branch_build_response{result = VarResult, error = Error, branch = Branch}.

-spec game_category_to_json(game_category()) -> igor_json:json_object().

game_category_to_json(Record) ->
    #game_category{
        id = Id,
        rev = Rev,
        name = Name,
        description = Description,
        sort_order = SortOrder,
        created_at = CreatedAt,
        updated_at = UpdatedAt
    } = Record,
    ?assert(Id =/= undefined),
    ?assert(Rev =/= undefined),
    ?assert(Name =/= undefined),
    ?assert(Description =/= undefined),
    ?assert(SortOrder =/= undefined),
    ?assert(CreatedAt =/= undefined),
    ?assert(UpdatedAt =/= undefined),
    #{
        <<"id">> => igor_json:pack(Id, long),
        <<"rev">> => igor_json:pack(Rev, int),
        <<"name">> => igor_json:pack(Name, string),
        <<"description">> => igor_json:pack(Description, string),
        <<"sort_order">> => igor_json:pack(SortOrder, int),
        <<"created_at">> => igor_json:pack(CreatedAt, {custom, fun web_types:datetime_to_text/1}),
        <<"updated_at">> => igor_json:pack(UpdatedAt, {custom, fun web_types:datetime_to_text/1})
    }.

-spec game_category_from_json(igor_json:json_object()) -> game_category().

game_category_from_json(Json) ->
    Id = igor_json:parse(Json, <<"id">>, long),
    Rev = igor_json:parse(Json, <<"rev">>, int),
    Name = igor_json:parse(Json, <<"name">>, string),
    Description = igor_json:parse(Json, <<"description">>, string),
    SortOrder = igor_json:parse(Json, <<"sort_order">>, int),
    CreatedAt = igor_json:parse(Json, <<"created_at">>, {custom, fun web_types:datetime_from_text/1}),
    UpdatedAt = igor_json:parse(Json, <<"updated_at">>, {custom, fun web_types:datetime_from_text/1}),
    #game_category{
        id = Id,
        rev = Rev,
        name = Name,
        description = Description,
        sort_order = SortOrder,
        created_at = CreatedAt,
        updated_at = UpdatedAt
    }.

-spec game_category_excerpt_to_json(game_category_excerpt()) -> igor_json:json_object().

game_category_excerpt_to_json(Record) ->
    #game_category_excerpt{
        id = Id,
        name = Name,
        description = Description,
        sort_order = SortOrder
    } = Record,
    ?assert(Id =/= undefined),
    ?assert(Name =/= undefined),
    ?assert(Description =/= undefined),
    ?assert(SortOrder =/= undefined),
    #{
        <<"id">> => igor_json:pack(Id, long),
        <<"name">> => igor_json:pack(Name, string),
        <<"description">> => igor_json:pack(Description, string),
        <<"sort_order">> => igor_json:pack(SortOrder, int)
    }.

-spec game_category_excerpt_from_json(igor_json:json_object()) -> game_category_excerpt().

game_category_excerpt_from_json(Json) ->
    Id = igor_json:parse(Json, <<"id">>, long),
    Name = igor_json:parse(Json, <<"name">>, string),
    Description = igor_json:parse(Json, <<"description">>, string),
    SortOrder = igor_json:parse(Json, <<"sort_order">>, int),
    #game_category_excerpt{
        id = Id,
        name = Name,
        description = Description,
        sort_order = SortOrder
    }.

-spec game_category_manage_response_to_json(game_category_manage_response()) -> igor_json:json_object().

game_category_manage_response_to_json(Record) ->
    #game_category_manage_response{result = VarResult, error = Error, category = Category} = Record,
    ?assert(VarResult =/= undefined),
    #{
        <<"result">> => igor_json:pack(VarResult, boolean),
        <<"error">> => igor_json:pack(Error, {custom, fun web_protocol:game_category_manage_error_to_json/1}),
        <<"category">> => igor_json:pack(Category, {custom, fun web_protocol:game_category_to_json/1})
    }.

-spec game_category_manage_response_from_json(igor_json:json_object()) -> game_category_manage_response().

game_category_manage_response_from_json(Json) ->
    VarResult = igor_json:parse(Json, <<"result">>, boolean),
    Error = igor_json:parse(Json, <<"error">>, {custom, fun web_protocol:game_category_manage_error_from_json/1}, undefined),
    Category = igor_json:parse(Json, <<"category">>, {custom, fun web_protocol:game_category_from_json/1}, undefined),
    #game_category_manage_response{result = VarResult, error = Error, category = Category}.

-spec game_category_create_request_to_json(game_category_create_request()) -> igor_json:json_object().

game_category_create_request_to_json(Record) ->
    #game_category_create_request{name = Name, description = Description, sort_order = SortOrder} = Record,
    ?assert(Name =/= undefined),
    ?assert(Description =/= undefined),
    ?assert(SortOrder =/= undefined),
    #{
        <<"name">> => igor_json:pack(Name, string),
        <<"description">> => igor_json:pack(Description, string),
        <<"sort_order">> => igor_json:pack(SortOrder, int)
    }.

-spec game_category_create_request_from_json(igor_json:json_object()) -> game_category_create_request().

game_category_create_request_from_json(Json) ->
    Name = igor_json:parse(Json, <<"name">>, string),
    Description = igor_json:parse(Json, <<"description">>, string),
    SortOrder = igor_json:parse(Json, <<"sort_order">>, int),
    #game_category_create_request{name = Name, description = Description, sort_order = SortOrder}.

-spec game_category_update_request_to_json(game_category_update_request()) -> igor_json:json_object().

game_category_update_request_to_json(Record) ->
    #game_category_update_request{name = Name, description = Description, sort_order = SortOrder} = Record,
    #{
        <<"name">> => igor_json:pack(Name, string),
        <<"description">> => igor_json:pack(Description, string),
        <<"sort_order">> => igor_json:pack(SortOrder, int)
    }.

-spec game_category_update_request_from_json(igor_json:json_object()) -> game_category_update_request().

game_category_update_request_from_json(Json) ->
    Name = igor_json:parse(Json, <<"name">>, string, undefined),
    Description = igor_json:parse(Json, <<"description">>, string, undefined),
    SortOrder = igor_json:parse(Json, <<"sort_order">>, int, undefined),
    #game_category_update_request{name = Name, description = Description, sort_order = SortOrder}.

-spec game_category_excerpt_list_to_json(game_category_excerpt_list()) -> igor_json:json_object().

game_category_excerpt_list_to_json(Record) ->
    #game_category_excerpt_list{categories = Categories} = Record,
    ?assert(Categories =/= undefined),
    #{
        <<"categories">> => igor_json:pack(Categories, {list, {custom, fun web_protocol:game_category_excerpt_to_json/1}})
    }.

-spec game_category_excerpt_list_from_json(igor_json:json_object()) -> game_category_excerpt_list().

game_category_excerpt_list_from_json(Json) ->
    Categories = igor_json:parse(Json, <<"categories">>, {list, {custom, fun web_protocol:game_category_excerpt_from_json/1}}, []),
    #game_category_excerpt_list{categories = Categories}.

-spec client_account_to_json(client_account()) -> igor_json:json_object().

client_account_to_json(Record) ->
    #client_account{
        id = Id,
        rev = Rev,
        username = Username,
        email = Email,
        phone = Phone,
        is_activated = IsActivated,
        is_blocked = IsBlocked,
        is_deleted = IsDeleted,
        created_at = CreatedAt,
        updated_at = UpdatedAt
    } = Record,
    ?assert(Id =/= undefined),
    ?assert(Rev =/= undefined),
    ?assert(Username =/= undefined),
    ?assert(Email =/= undefined),
    ?assert(IsActivated =/= undefined),
    ?assert(IsBlocked =/= undefined),
    ?assert(IsDeleted =/= undefined),
    ?assert(CreatedAt =/= undefined),
    ?assert(UpdatedAt =/= undefined),
    #{
        <<"id">> => igor_json:pack(Id, long),
        <<"rev">> => igor_json:pack(Rev, int),
        <<"username">> => igor_json:pack(Username, string),
        <<"email">> => igor_json:pack(Email, string),
        <<"phone">> => igor_json:pack(Phone, string),
        <<"is_activated">> => igor_json:pack(IsActivated, boolean),
        <<"is_blocked">> => igor_json:pack(IsBlocked, boolean),
        <<"is_deleted">> => igor_json:pack(IsDeleted, boolean),
        <<"created_at">> => igor_json:pack(CreatedAt, {custom, fun web_types:datetime_to_text/1}),
        <<"updated_at">> => igor_json:pack(UpdatedAt, {custom, fun web_types:datetime_to_text/1})
    }.

-spec client_account_from_json(igor_json:json_object()) -> client_account().

client_account_from_json(Json) ->
    Id = igor_json:parse(Json, <<"id">>, long),
    Rev = igor_json:parse(Json, <<"rev">>, int),
    Username = igor_json:parse(Json, <<"username">>, string),
    Email = igor_json:parse(Json, <<"email">>, string),
    Phone = igor_json:parse(Json, <<"phone">>, string, undefined),
    IsActivated = igor_json:parse(Json, <<"is_activated">>, boolean),
    IsBlocked = igor_json:parse(Json, <<"is_blocked">>, boolean),
    IsDeleted = igor_json:parse(Json, <<"is_deleted">>, boolean),
    CreatedAt = igor_json:parse(Json, <<"created_at">>, {custom, fun web_types:datetime_from_text/1}),
    UpdatedAt = igor_json:parse(Json, <<"updated_at">>, {custom, fun web_types:datetime_from_text/1}),
    #client_account{
        id = Id,
        rev = Rev,
        username = Username,
        email = Email,
        phone = Phone,
        is_activated = IsActivated,
        is_blocked = IsBlocked,
        is_deleted = IsDeleted,
        created_at = CreatedAt,
        updated_at = UpdatedAt
    }.

-spec personnel_account_to_json(personnel_account()) -> igor_json:json_object().

personnel_account_to_json(Record) ->
    #personnel_account{
        id = Id,
        rev = Rev,
        username = Username,
        name = Name,
        email = Email,
        phone = Phone,
        is_blocked = IsBlocked,
        is_deleted = IsDeleted,
        is_superadmin = IsSuperadmin,
        created_at = CreatedAt,
        updated_at = UpdatedAt
    } = Record,
    ?assert(Id =/= undefined),
    ?assert(Rev =/= undefined),
    ?assert(Username =/= undefined),
    ?assert(IsBlocked =/= undefined),
    ?assert(IsDeleted =/= undefined),
    ?assert(IsSuperadmin =/= undefined),
    ?assert(CreatedAt =/= undefined),
    ?assert(UpdatedAt =/= undefined),
    #{
        <<"id">> => igor_json:pack(Id, long),
        <<"rev">> => igor_json:pack(Rev, int),
        <<"username">> => igor_json:pack(Username, string),
        <<"name">> => igor_json:pack(Name, string),
        <<"email">> => igor_json:pack(Email, string),
        <<"phone">> => igor_json:pack(Phone, string),
        <<"is_blocked">> => igor_json:pack(IsBlocked, boolean),
        <<"is_deleted">> => igor_json:pack(IsDeleted, boolean),
        <<"is_superadmin">> => igor_json:pack(IsSuperadmin, boolean),
        <<"created_at">> => igor_json:pack(CreatedAt, {custom, fun web_types:datetime_to_text/1}),
        <<"updated_at">> => igor_json:pack(UpdatedAt, {custom, fun web_types:datetime_to_text/1})
    }.

-spec personnel_account_from_json(igor_json:json_object()) -> personnel_account().

personnel_account_from_json(Json) ->
    Id = igor_json:parse(Json, <<"id">>, long),
    Rev = igor_json:parse(Json, <<"rev">>, int),
    Username = igor_json:parse(Json, <<"username">>, string),
    Name = igor_json:parse(Json, <<"name">>, string, undefined),
    Email = igor_json:parse(Json, <<"email">>, string, undefined),
    Phone = igor_json:parse(Json, <<"phone">>, string, undefined),
    IsBlocked = igor_json:parse(Json, <<"is_blocked">>, boolean),
    IsDeleted = igor_json:parse(Json, <<"is_deleted">>, boolean),
    IsSuperadmin = igor_json:parse(Json, <<"is_superadmin">>, boolean),
    CreatedAt = igor_json:parse(Json, <<"created_at">>, {custom, fun web_types:datetime_from_text/1}),
    UpdatedAt = igor_json:parse(Json, <<"updated_at">>, {custom, fun web_types:datetime_from_text/1}),
    #personnel_account{
        id = Id,
        rev = Rev,
        username = Username,
        name = Name,
        email = Email,
        phone = Phone,
        is_blocked = IsBlocked,
        is_deleted = IsDeleted,
        is_superadmin = IsSuperadmin,
        created_at = CreatedAt,
        updated_at = UpdatedAt
    }.

-spec personnel_account_profile_to_json(personnel_account_profile()) -> igor_json:json_object().

personnel_account_profile_to_json(Record) ->
    #personnel_account_profile{
        id = Id,
        rev = Rev,
        username = Username,
        name = Name,
        email = Email,
        phone = Phone,
        api_key = ApiKey,
        is_blocked = IsBlocked,
        is_deleted = IsDeleted,
        is_game_manager = IsGameManager,
        is_superadmin = IsSuperadmin,
        created_at = CreatedAt,
        updated_at = UpdatedAt
    } = Record,
    ?assert(Id =/= undefined),
    ?assert(Rev =/= undefined),
    ?assert(Username =/= undefined),
    ?assert(IsBlocked =/= undefined),
    ?assert(IsDeleted =/= undefined),
    ?assert(IsGameManager =/= undefined),
    ?assert(IsSuperadmin =/= undefined),
    ?assert(CreatedAt =/= undefined),
    ?assert(UpdatedAt =/= undefined),
    #{
        <<"id">> => igor_json:pack(Id, long),
        <<"rev">> => igor_json:pack(Rev, int),
        <<"username">> => igor_json:pack(Username, string),
        <<"name">> => igor_json:pack(Name, string),
        <<"email">> => igor_json:pack(Email, string),
        <<"phone">> => igor_json:pack(Phone, string),
        <<"api_key">> => igor_json:pack(ApiKey, string),
        <<"is_blocked">> => igor_json:pack(IsBlocked, boolean),
        <<"is_deleted">> => igor_json:pack(IsDeleted, boolean),
        <<"is_game_manager">> => igor_json:pack(IsGameManager, boolean),
        <<"is_superadmin">> => igor_json:pack(IsSuperadmin, boolean),
        <<"created_at">> => igor_json:pack(CreatedAt, {custom, fun web_types:datetime_to_text/1}),
        <<"updated_at">> => igor_json:pack(UpdatedAt, {custom, fun web_types:datetime_to_text/1})
    }.

-spec personnel_account_profile_from_json(igor_json:json_object()) -> personnel_account_profile().

personnel_account_profile_from_json(Json) ->
    Id = igor_json:parse(Json, <<"id">>, long),
    Rev = igor_json:parse(Json, <<"rev">>, int),
    Username = igor_json:parse(Json, <<"username">>, string),
    Name = igor_json:parse(Json, <<"name">>, string, undefined),
    Email = igor_json:parse(Json, <<"email">>, string, undefined),
    Phone = igor_json:parse(Json, <<"phone">>, string, undefined),
    ApiKey = igor_json:parse(Json, <<"api_key">>, string, undefined),
    IsBlocked = igor_json:parse(Json, <<"is_blocked">>, boolean),
    IsDeleted = igor_json:parse(Json, <<"is_deleted">>, boolean),
    IsGameManager = igor_json:parse(Json, <<"is_game_manager">>, boolean),
    IsSuperadmin = igor_json:parse(Json, <<"is_superadmin">>, boolean),
    CreatedAt = igor_json:parse(Json, <<"created_at">>, {custom, fun web_types:datetime_from_text/1}),
    UpdatedAt = igor_json:parse(Json, <<"updated_at">>, {custom, fun web_types:datetime_from_text/1}),
    #personnel_account_profile{
        id = Id,
        rev = Rev,
        username = Username,
        name = Name,
        email = Email,
        phone = Phone,
        api_key = ApiKey,
        is_blocked = IsBlocked,
        is_deleted = IsDeleted,
        is_game_manager = IsGameManager,
        is_superadmin = IsSuperadmin,
        created_at = CreatedAt,
        updated_at = UpdatedAt
    }.

-spec personnel_api_key_update_response_to_json(personnel_api_key_update_response()) -> igor_json:json_object().

personnel_api_key_update_response_to_json(Record) ->
    #personnel_api_key_update_response{api_key = ApiKey} = Record,
    ?assert(ApiKey =/= undefined),
    #{
        <<"api_key">> => igor_json:pack(ApiKey, string)
    }.

-spec personnel_api_key_update_response_from_json(igor_json:json_object()) -> personnel_api_key_update_response().

personnel_api_key_update_response_from_json(Json) ->
    ApiKey = igor_json:parse(Json, <<"api_key">>, string),
    #personnel_api_key_update_response{api_key = ApiKey}.

-spec personnel_group_to_json(personnel_group()) -> igor_json:json_object().

personnel_group_to_json(Record) ->
    #personnel_group{
        id = Id,
        rev = Rev,
        name = Name,
        description = Description,
        is_deleted = IsDeleted,
        members = Members,
        member_count = MemberCount,
        is_superadmin = IsSuperadmin,
        created_at = CreatedAt,
        updated_at = UpdatedAt
    } = Record,
    ?assert(Id =/= undefined),
    ?assert(Rev =/= undefined),
    ?assert(Name =/= undefined),
    ?assert(IsDeleted =/= undefined),
    ?assert(Members =/= undefined),
    ?assert(MemberCount =/= undefined),
    ?assert(IsSuperadmin =/= undefined),
    ?assert(CreatedAt =/= undefined),
    ?assert(UpdatedAt =/= undefined),
    #{
        <<"id">> => igor_json:pack(Id, long),
        <<"rev">> => igor_json:pack(Rev, int),
        <<"name">> => igor_json:pack(Name, string),
        <<"description">> => igor_json:pack(Description, string),
        <<"is_deleted">> => igor_json:pack(IsDeleted, boolean),
        <<"members">> => igor_json:pack(Members, {list, string}),
        <<"member_count">> => igor_json:pack(MemberCount, int),
        <<"is_superadmin">> => igor_json:pack(IsSuperadmin, boolean),
        <<"created_at">> => igor_json:pack(CreatedAt, {custom, fun web_types:datetime_to_text/1}),
        <<"updated_at">> => igor_json:pack(UpdatedAt, {custom, fun web_types:datetime_to_text/1})
    }.

-spec personnel_group_from_json(igor_json:json_object()) -> personnel_group().

personnel_group_from_json(Json) ->
    Id = igor_json:parse(Json, <<"id">>, long),
    Rev = igor_json:parse(Json, <<"rev">>, int),
    Name = igor_json:parse(Json, <<"name">>, string),
    Description = igor_json:parse(Json, <<"description">>, string, undefined),
    IsDeleted = igor_json:parse(Json, <<"is_deleted">>, boolean),
    Members = igor_json:parse(Json, <<"members">>, {list, string}),
    MemberCount = igor_json:parse(Json, <<"member_count">>, int),
    IsSuperadmin = igor_json:parse(Json, <<"is_superadmin">>, boolean),
    CreatedAt = igor_json:parse(Json, <<"created_at">>, {custom, fun web_types:datetime_from_text/1}),
    UpdatedAt = igor_json:parse(Json, <<"updated_at">>, {custom, fun web_types:datetime_from_text/1}),
    #personnel_group{
        id = Id,
        rev = Rev,
        name = Name,
        description = Description,
        is_deleted = IsDeleted,
        members = Members,
        member_count = MemberCount,
        is_superadmin = IsSuperadmin,
        created_at = CreatedAt,
        updated_at = UpdatedAt
    }.

-spec personnel_account_role_to_json(personnel_account_role()) -> igor_json:json_object().

personnel_account_role_to_json(Record) ->
    #personnel_account_role{
        personnel_id = PersonnelId,
        username = Username,
        game_id = GameId,
        game_title = GameTitle,
        game_branches = GameBranches,
        group_roles = GroupRoles,
        user_role = UserRole,
        is_global = IsGlobal,
        branch_ids = BranchIds
    } = Record,
    ?assert(PersonnelId =/= undefined),
    ?assert(Username =/= undefined),
    ?assert(GameId =/= undefined),
    ?assert(GameTitle =/= undefined),
    ?assert(GameBranches =/= undefined),
    #{
        <<"personnel_id">> => igor_json:pack(PersonnelId, long),
        <<"username">> => igor_json:pack(Username, string),
        <<"game_id">> => igor_json:pack(GameId, string),
        <<"game_title">> => igor_json:pack(GameTitle, string),
        <<"game_branches">> => igor_json:pack(GameBranches, json),
        <<"group_roles">> => igor_json:pack(GroupRoles, json),
        <<"user_role">> => igor_json:pack(UserRole, {custom, fun web_protocol:access_role_to_json/1}),
        <<"is_global">> => igor_json:pack(IsGlobal, boolean),
        <<"branch_ids">> => igor_json:pack(BranchIds, {list, long})
    }.

-spec personnel_account_role_from_json(igor_json:json_object()) -> personnel_account_role().

personnel_account_role_from_json(Json) ->
    PersonnelId = igor_json:parse(Json, <<"personnel_id">>, long),
    Username = igor_json:parse(Json, <<"username">>, string),
    GameId = igor_json:parse(Json, <<"game_id">>, string),
    GameTitle = igor_json:parse(Json, <<"game_title">>, string),
    GameBranches = igor_json:parse(Json, <<"game_branches">>, json),
    GroupRoles = igor_json:parse(Json, <<"group_roles">>, json, undefined),
    UserRole = igor_json:parse(Json, <<"user_role">>, {custom, fun web_protocol:access_role_from_json/1}, undefined),
    IsGlobal = igor_json:parse(Json, <<"is_global">>, boolean, undefined),
    BranchIds = igor_json:parse(Json, <<"branch_ids">>, {list, long}, undefined),
    #personnel_account_role{
        personnel_id = PersonnelId,
        username = Username,
        game_id = GameId,
        game_title = GameTitle,
        game_branches = GameBranches,
        group_roles = GroupRoles,
        user_role = UserRole,
        is_global = IsGlobal,
        branch_ids = BranchIds
    }.

-spec personnel_group_role_to_json(personnel_group_role()) -> igor_json:json_object().

personnel_group_role_to_json(Record) ->
    #personnel_group_role{
        group_id = GroupId,
        group_name = GroupName,
        game_id = GameId,
        game_title = GameTitle,
        game_branches = GameBranches,
        group_role = GroupRole,
        is_global = IsGlobal,
        branch_ids = BranchIds
    } = Record,
    ?assert(GroupId =/= undefined),
    ?assert(GroupName =/= undefined),
    ?assert(GameId =/= undefined),
    ?assert(GameTitle =/= undefined),
    ?assert(GameBranches =/= undefined),
    #{
        <<"group_id">> => igor_json:pack(GroupId, long),
        <<"group_name">> => igor_json:pack(GroupName, string),
        <<"game_id">> => igor_json:pack(GameId, string),
        <<"game_title">> => igor_json:pack(GameTitle, string),
        <<"game_branches">> => igor_json:pack(GameBranches, json),
        <<"group_role">> => igor_json:pack(GroupRole, {custom, fun web_protocol:access_role_to_json/1}),
        <<"is_global">> => igor_json:pack(IsGlobal, boolean),
        <<"branch_ids">> => igor_json:pack(BranchIds, {list, long})
    }.

-spec personnel_group_role_from_json(igor_json:json_object()) -> personnel_group_role().

personnel_group_role_from_json(Json) ->
    GroupId = igor_json:parse(Json, <<"group_id">>, long),
    GroupName = igor_json:parse(Json, <<"group_name">>, string),
    GameId = igor_json:parse(Json, <<"game_id">>, string),
    GameTitle = igor_json:parse(Json, <<"game_title">>, string),
    GameBranches = igor_json:parse(Json, <<"game_branches">>, json),
    GroupRole = igor_json:parse(Json, <<"group_role">>, {custom, fun web_protocol:access_role_from_json/1}, undefined),
    IsGlobal = igor_json:parse(Json, <<"is_global">>, boolean, undefined),
    BranchIds = igor_json:parse(Json, <<"branch_ids">>, {list, long}, undefined),
    #personnel_group_role{
        group_id = GroupId,
        group_name = GroupName,
        game_id = GameId,
        game_title = GameTitle,
        game_branches = GameBranches,
        group_role = GroupRole,
        is_global = IsGlobal,
        branch_ids = BranchIds
    }.

-spec access_role_update_request_to_json(access_role_update_request()) -> igor_json:json_object().

access_role_update_request_to_json(Record) ->
    #access_role_update_request{role = Role, is_global = IsGlobal, branch_ids = BranchIds} = Record,
    ?assert(Role =/= undefined),
    #{
        <<"role">> => igor_json:pack(Role, {custom, fun web_protocol:access_role_to_json/1}),
        <<"is_global">> => igor_json:pack(IsGlobal, boolean),
        <<"branch_ids">> => igor_json:pack(BranchIds, {list, long})
    }.

-spec access_role_update_request_from_json(igor_json:json_object()) -> access_role_update_request().

access_role_update_request_from_json(Json) ->
    Role = igor_json:parse(Json, <<"role">>, {custom, fun web_protocol:access_role_from_json/1}),
    IsGlobal = igor_json:parse(Json, <<"is_global">>, boolean, undefined),
    BranchIds = igor_json:parse(Json, <<"branch_ids">>, {list, long}, undefined),
    #access_role_update_request{role = Role, is_global = IsGlobal, branch_ids = BranchIds}.

-spec settings_to_json(settings()) -> igor_json:json_object().

settings_to_json(Record) ->
    #settings{
        personnel_session_duration = PersonnelSessionDuration,
        client_session_duration = ClientSessionDuration,
        register_confirm_code_lifetime = RegisterConfirmCodeLifetime,
        phone_confirm_code_lifetime = PhoneConfirmCodeLifetime,
        password_reset_confirm_code_lifetime = PasswordResetConfirmCodeLifetime,
        ci_api_key = CiApiKey
    } = Record,
    ?assert(PersonnelSessionDuration =/= undefined),
    ?assert(ClientSessionDuration =/= undefined),
    ?assert(RegisterConfirmCodeLifetime =/= undefined),
    ?assert(PhoneConfirmCodeLifetime =/= undefined),
    ?assert(PasswordResetConfirmCodeLifetime =/= undefined),
    #{
        <<"personnel_session_duration">> => igor_json:pack(PersonnelSessionDuration, int),
        <<"client_session_duration">> => igor_json:pack(ClientSessionDuration, int),
        <<"register_confirm_code_lifetime">> => igor_json:pack(RegisterConfirmCodeLifetime, int),
        <<"phone_confirm_code_lifetime">> => igor_json:pack(PhoneConfirmCodeLifetime, int),
        <<"password_reset_confirm_code_lifetime">> => igor_json:pack(PasswordResetConfirmCodeLifetime, int),
        <<"ci_api_key">> => igor_json:pack(CiApiKey, string)
    }.

-spec settings_from_json(igor_json:json_object()) -> settings().

settings_from_json(Json) ->
    PersonnelSessionDuration = igor_json:parse(Json, <<"personnel_session_duration">>, int),
    ClientSessionDuration = igor_json:parse(Json, <<"client_session_duration">>, int),
    RegisterConfirmCodeLifetime = igor_json:parse(Json, <<"register_confirm_code_lifetime">>, int),
    PhoneConfirmCodeLifetime = igor_json:parse(Json, <<"phone_confirm_code_lifetime">>, int),
    PasswordResetConfirmCodeLifetime = igor_json:parse(Json, <<"password_reset_confirm_code_lifetime">>, int),
    CiApiKey = igor_json:parse(Json, <<"ci_api_key">>, string, undefined),
    #settings{
        personnel_session_duration = PersonnelSessionDuration,
        client_session_duration = ClientSessionDuration,
        register_confirm_code_lifetime = RegisterConfirmCodeLifetime,
        phone_confirm_code_lifetime = PhoneConfirmCodeLifetime,
        password_reset_confirm_code_lifetime = PasswordResetConfirmCodeLifetime,
        ci_api_key = CiApiKey
    }.

-spec settings_update_request_to_json(settings_update_request()) -> igor_json:json_object().

settings_update_request_to_json(Record) ->
    #settings_update_request{
        personnel_session_duration = PersonnelSessionDuration,
        client_session_duration = ClientSessionDuration,
        register_confirm_code_lifetime = RegisterConfirmCodeLifetime,
        phone_confirm_code_lifetime = PhoneConfirmCodeLifetime,
        password_reset_confirm_code_lifetime = PasswordResetConfirmCodeLifetime
    } = Record,
    Json1 = igor_json:maybe_pack_field(#{}, <<"personnel_session_duration">>, PersonnelSessionDuration, int),
    Json2 = igor_json:maybe_pack_field(Json1, <<"client_session_duration">>, ClientSessionDuration, int),
    Json3 = igor_json:maybe_pack_field(Json2, <<"register_confirm_code_lifetime">>, RegisterConfirmCodeLifetime, int),
    Json4 = igor_json:maybe_pack_field(Json3, <<"phone_confirm_code_lifetime">>, PhoneConfirmCodeLifetime, int),
    Json5 = igor_json:maybe_pack_field(Json4, <<"password_reset_confirm_code_lifetime">>, PasswordResetConfirmCodeLifetime, int),
    Json5.

-spec settings_update_request_from_json(igor_json:json_object()) -> settings_update_request().

settings_update_request_from_json(Json) ->
    PersonnelSessionDuration = igor_json:parse(Json, <<"personnel_session_duration">>, int, undefined),
    ClientSessionDuration = igor_json:parse(Json, <<"client_session_duration">>, int, undefined),
    RegisterConfirmCodeLifetime = igor_json:parse(Json, <<"register_confirm_code_lifetime">>, int, undefined),
    PhoneConfirmCodeLifetime = igor_json:parse(Json, <<"phone_confirm_code_lifetime">>, int, undefined),
    PasswordResetConfirmCodeLifetime = igor_json:parse(Json, <<"password_reset_confirm_code_lifetime">>, int, undefined),
    #settings_update_request{
        personnel_session_duration = PersonnelSessionDuration,
        client_session_duration = ClientSessionDuration,
        register_confirm_code_lifetime = RegisterConfirmCodeLifetime,
        phone_confirm_code_lifetime = PhoneConfirmCodeLifetime,
        password_reset_confirm_code_lifetime = PasswordResetConfirmCodeLifetime
    }.

-spec regenerate_ci_api_key_response_to_json(regenerate_ci_api_key_response()) -> igor_json:json_object().

regenerate_ci_api_key_response_to_json(Record) ->
    #regenerate_ci_api_key_response{ci_api_key = CiApiKey} = Record,
    #{
        <<"ci_api_key">> => igor_json:pack(CiApiKey, string)
    }.

-spec regenerate_ci_api_key_response_from_json(igor_json:json_object()) -> regenerate_ci_api_key_response().

regenerate_ci_api_key_response_from_json(Json) ->
    CiApiKey = igor_json:parse(Json, <<"ci_api_key">>, string, undefined),
    #regenerate_ci_api_key_response{ci_api_key = CiApiKey}.

-spec build_to_json(build()) -> igor_json:json_object().

build_to_json(Record) ->
    #build{
        id = Id,
        rev = Rev,
        game_id = GameId,
        game_title = GameTitle,
        branch_tags = BranchTags,
        build_rev = BuildRev,
        commentary = Commentary,
        change_list = ChangeList,
        total_size = TotalSize,
        compressed_size = CompressedSize,
        exe_path = ExePath,
        log_path = LogPath,
        crash_report_path = CrashReportPath,
        config_path = ConfigPath,
        optional_file_masks = OptionalFileMasks,
        preserved_file_masks = PreservedFileMasks,
        redistributables = Redistributables,
        pdb_files = PdbFiles,
        cdn_root_url = CdnRootUrl,
        platform = Platform,
        is_permanent = IsPermanent,
        is_draft = IsDraft,
        is_processing = IsProcessing,
        archived_size = ArchivedSize,
        processed_size = ProcessedSize,
        is_deleted = IsDeleted,
        created_at = CreatedAt,
        updated_at = UpdatedAt
    } = Record,
    ?assert(Id =/= undefined),
    ?assert(Rev =/= undefined),
    ?assert(GameId =/= undefined),
    ?assert(GameTitle =/= undefined),
    ?assert(BranchTags =/= undefined),
    ?assert(BuildRev =/= undefined),
    ?assert(Commentary =/= undefined),
    ?assert(ChangeList =/= undefined),
    ?assert(TotalSize =/= undefined),
    ?assert(CompressedSize =/= undefined),
    ?assert(ExePath =/= undefined),
    ?assert(LogPath =/= undefined),
    ?assert(CrashReportPath =/= undefined),
    ?assert(ConfigPath =/= undefined),
    ?assert(OptionalFileMasks =/= undefined),
    ?assert(PreservedFileMasks =/= undefined),
    ?assert(Redistributables =/= undefined),
    ?assert(PdbFiles =/= undefined),
    ?assert(CdnRootUrl =/= undefined),
    ?assert(Platform =/= undefined),
    ?assert(IsPermanent =/= undefined),
    ?assert(IsDraft =/= undefined),
    ?assert(IsProcessing =/= undefined),
    ?assert(ArchivedSize =/= undefined),
    ?assert(ProcessedSize =/= undefined),
    ?assert(IsDeleted =/= undefined),
    ?assert(CreatedAt =/= undefined),
    ?assert(UpdatedAt =/= undefined),
    #{
        <<"id">> => igor_json:pack(Id, long),
        <<"rev">> => igor_json:pack(Rev, int),
        <<"game_id">> => igor_json:pack(GameId, string),
        <<"game_title">> => igor_json:pack(GameTitle, string),
        <<"branch_tags">> => igor_json:pack(BranchTags, {list, string}),
        <<"build_rev">> => igor_json:pack(BuildRev, string),
        <<"commentary">> => igor_json:pack(Commentary, string),
        <<"change_list">> => igor_json:pack(ChangeList, string),
        <<"total_size">> => igor_json:pack(TotalSize, long),
        <<"compressed_size">> => igor_json:pack(CompressedSize, long),
        <<"exe_path">> => igor_json:pack(ExePath, string),
        <<"log_path">> => igor_json:pack(LogPath, string),
        <<"crash_report_path">> => igor_json:pack(CrashReportPath, string),
        <<"config_path">> => igor_json:pack(ConfigPath, string),
        <<"optional_file_masks">> => igor_json:pack(OptionalFileMasks, {list, string}),
        <<"preserved_file_masks">> => igor_json:pack(PreservedFileMasks, {list, string}),
        <<"redistributables">> => igor_json:pack(Redistributables, {list, {custom, fun web_protocol:redistributable_entry_to_json/1}}),
        <<"pdb_files">> => igor_json:pack(PdbFiles, {list, string}),
        <<"cdn_root_url">> => igor_json:pack(CdnRootUrl, string),
        <<"platform">> => igor_json:pack(Platform, {custom, fun web_protocol:platform_to_json/1}),
        <<"is_permanent">> => igor_json:pack(IsPermanent, boolean),
        <<"is_draft">> => igor_json:pack(IsDraft, boolean),
        <<"is_processing">> => igor_json:pack(IsProcessing, boolean),
        <<"archived_size">> => igor_json:pack(ArchivedSize, long),
        <<"processed_size">> => igor_json:pack(ProcessedSize, long),
        <<"is_deleted">> => igor_json:pack(IsDeleted, boolean),
        <<"created_at">> => igor_json:pack(CreatedAt, {custom, fun web_types:datetime_to_text/1}),
        <<"updated_at">> => igor_json:pack(UpdatedAt, {custom, fun web_types:datetime_to_text/1})
    }.

-spec build_from_json(igor_json:json_object()) -> build().

build_from_json(Json) ->
    Id = igor_json:parse(Json, <<"id">>, long),
    Rev = igor_json:parse(Json, <<"rev">>, int),
    GameId = igor_json:parse(Json, <<"game_id">>, string),
    GameTitle = igor_json:parse(Json, <<"game_title">>, string),
    BranchTags = igor_json:parse(Json, <<"branch_tags">>, {list, string}),
    BuildRev = igor_json:parse(Json, <<"build_rev">>, string),
    Commentary = igor_json:parse(Json, <<"commentary">>, string),
    ChangeList = igor_json:parse(Json, <<"change_list">>, string),
    TotalSize = igor_json:parse(Json, <<"total_size">>, long),
    CompressedSize = igor_json:parse(Json, <<"compressed_size">>, long),
    ExePath = igor_json:parse(Json, <<"exe_path">>, string),
    LogPath = igor_json:parse(Json, <<"log_path">>, string),
    CrashReportPath = igor_json:parse(Json, <<"crash_report_path">>, string),
    ConfigPath = igor_json:parse(Json, <<"config_path">>, string),
    OptionalFileMasks = igor_json:parse(Json, <<"optional_file_masks">>, {list, string}, []),
    PreservedFileMasks = igor_json:parse(Json, <<"preserved_file_masks">>, {list, string}, []),
    Redistributables = igor_json:parse(Json, <<"redistributables">>, {list, {custom, fun web_protocol:redistributable_entry_from_json/1}}, []),
    PdbFiles = igor_json:parse(Json, <<"pdb_files">>, {list, string}, []),
    CdnRootUrl = igor_json:parse(Json, <<"cdn_root_url">>, string),
    Platform = igor_json:parse(Json, <<"platform">>, {custom, fun web_protocol:platform_from_json/1}),
    IsPermanent = igor_json:parse(Json, <<"is_permanent">>, boolean),
    IsDraft = igor_json:parse(Json, <<"is_draft">>, boolean),
    IsProcessing = igor_json:parse(Json, <<"is_processing">>, boolean),
    ArchivedSize = igor_json:parse(Json, <<"archived_size">>, long),
    ProcessedSize = igor_json:parse(Json, <<"processed_size">>, long),
    IsDeleted = igor_json:parse(Json, <<"is_deleted">>, boolean),
    CreatedAt = igor_json:parse(Json, <<"created_at">>, {custom, fun web_types:datetime_from_text/1}),
    UpdatedAt = igor_json:parse(Json, <<"updated_at">>, {custom, fun web_types:datetime_from_text/1}),
    #build{
        id = Id,
        rev = Rev,
        game_id = GameId,
        game_title = GameTitle,
        branch_tags = BranchTags,
        build_rev = BuildRev,
        commentary = Commentary,
        change_list = ChangeList,
        total_size = TotalSize,
        compressed_size = CompressedSize,
        exe_path = ExePath,
        log_path = LogPath,
        crash_report_path = CrashReportPath,
        config_path = ConfigPath,
        optional_file_masks = OptionalFileMasks,
        preserved_file_masks = PreservedFileMasks,
        redistributables = Redistributables,
        pdb_files = PdbFiles,
        cdn_root_url = CdnRootUrl,
        platform = Platform,
        is_permanent = IsPermanent,
        is_draft = IsDraft,
        is_processing = IsProcessing,
        archived_size = ArchivedSize,
        processed_size = ProcessedSize,
        is_deleted = IsDeleted,
        created_at = CreatedAt,
        updated_at = UpdatedAt
    }.

-spec build_file_to_json(build_file()) -> igor_json:json_object().

build_file_to_json(Record) ->
    #build_file{
        id = Id,
        build_id = BuildId,
        file_path = FilePath,
        file_size = FileSize,
        compressed_file_path = CompressedFilePath,
        compressed_file_size = CompressedFileSize,
        md5 = Md5,
        created_at = CreatedAt,
        updated_at = UpdatedAt
    } = Record,
    ?assert(Id =/= undefined),
    ?assert(BuildId =/= undefined),
    ?assert(FilePath =/= undefined),
    ?assert(FileSize =/= undefined),
    ?assert(CompressedFilePath =/= undefined),
    ?assert(CompressedFileSize =/= undefined),
    ?assert(Md5 =/= undefined),
    ?assert(CreatedAt =/= undefined),
    ?assert(UpdatedAt =/= undefined),
    #{
        <<"id">> => igor_json:pack(Id, long),
        <<"build_id">> => igor_json:pack(BuildId, long),
        <<"file_path">> => igor_json:pack(FilePath, string),
        <<"file_size">> => igor_json:pack(FileSize, long),
        <<"compressed_file_path">> => igor_json:pack(CompressedFilePath, string),
        <<"compressed_file_size">> => igor_json:pack(CompressedFileSize, long),
        <<"md5">> => igor_json:pack(Md5, string),
        <<"created_at">> => igor_json:pack(CreatedAt, {custom, fun web_types:datetime_to_text/1}),
        <<"updated_at">> => igor_json:pack(UpdatedAt, {custom, fun web_types:datetime_to_text/1})
    }.

-spec build_file_from_json(igor_json:json_object()) -> build_file().

build_file_from_json(Json) ->
    Id = igor_json:parse(Json, <<"id">>, long),
    BuildId = igor_json:parse(Json, <<"build_id">>, long),
    FilePath = igor_json:parse(Json, <<"file_path">>, string),
    FileSize = igor_json:parse(Json, <<"file_size">>, long),
    CompressedFilePath = igor_json:parse(Json, <<"compressed_file_path">>, string),
    CompressedFileSize = igor_json:parse(Json, <<"compressed_file_size">>, long),
    Md5 = igor_json:parse(Json, <<"md5">>, string),
    CreatedAt = igor_json:parse(Json, <<"created_at">>, {custom, fun web_types:datetime_from_text/1}),
    UpdatedAt = igor_json:parse(Json, <<"updated_at">>, {custom, fun web_types:datetime_from_text/1}),
    #build_file{
        id = Id,
        build_id = BuildId,
        file_path = FilePath,
        file_size = FileSize,
        compressed_file_path = CompressedFilePath,
        compressed_file_size = CompressedFileSize,
        md5 = Md5,
        created_at = CreatedAt,
        updated_at = UpdatedAt
    }.

-spec draft_build_create_request_to_json(draft_build_create_request()) -> igor_json:json_object().

draft_build_create_request_to_json(Record) ->
    #draft_build_create_request{build_rev = BuildRev, platform = Platform} = Record,
    ?assert(BuildRev =/= undefined),
    ?assert(Platform =/= undefined),
    #{
        <<"build_rev">> => igor_json:pack(BuildRev, string),
        <<"platform">> => igor_json:pack(Platform, {custom, fun web_protocol:platform_to_json/1})
    }.

-spec draft_build_create_request_from_json(igor_json:json_object()) -> draft_build_create_request().

draft_build_create_request_from_json(Json) ->
    BuildRev = igor_json:parse(Json, <<"build_rev">>, string),
    Platform = igor_json:parse(Json, <<"platform">>, {custom, fun web_protocol:platform_from_json/1}),
    #draft_build_create_request{build_rev = BuildRev, platform = Platform}.

-spec draft_build_create_response_to_json(draft_build_create_response()) -> igor_json:json_object().

draft_build_create_response_to_json(Record) ->
    #draft_build_create_response{result = VarResult, error = Error, build = Build} = Record,
    ?assert(VarResult =/= undefined),
    #{
        <<"result">> => igor_json:pack(VarResult, boolean),
        <<"error">> => igor_json:pack(Error, {custom, fun web_protocol:draft_build_create_error_to_json/1}),
        <<"build">> => igor_json:pack(Build, {custom, fun web_protocol:build_to_json/1})
    }.

-spec draft_build_create_response_from_json(igor_json:json_object()) -> draft_build_create_response().

draft_build_create_response_from_json(Json) ->
    VarResult = igor_json:parse(Json, <<"result">>, boolean),
    Error = igor_json:parse(Json, <<"error">>, {custom, fun web_protocol:draft_build_create_error_from_json/1}, undefined),
    Build = igor_json:parse(Json, <<"build">>, {custom, fun web_protocol:build_from_json/1}, undefined),
    #draft_build_create_response{result = VarResult, error = Error, build = Build}.

-spec draft_build_update_request_to_json(draft_build_update_request()) -> igor_json:json_object().

draft_build_update_request_to_json(Record) ->
    #draft_build_update_request{
        commentary = Commentary,
        change_list = ChangeList,
        exe_path = ExePath,
        log_path = LogPath,
        crash_report_path = CrashReportPath,
        config_path = ConfigPath,
        optional_file_masks = OptionalFileMasks,
        preserved_file_masks = PreservedFileMasks,
        redistributables = Redistributables,
        pdb_files = PdbFiles,
        platform = Platform
    } = Record,
    #{
        <<"commentary">> => igor_json:pack(Commentary, string),
        <<"change_list">> => igor_json:pack(ChangeList, string),
        <<"exe_path">> => igor_json:pack(ExePath, string),
        <<"log_path">> => igor_json:pack(LogPath, string),
        <<"crash_report_path">> => igor_json:pack(CrashReportPath, string),
        <<"config_path">> => igor_json:pack(ConfigPath, string),
        <<"optional_file_masks">> => igor_json:pack(OptionalFileMasks, {list, string}),
        <<"preserved_file_masks">> => igor_json:pack(PreservedFileMasks, {list, string}),
        <<"redistributables">> => igor_json:pack(Redistributables, {list, {custom, fun web_protocol:redistributable_entry_to_json/1}}),
        <<"pdb_files">> => igor_json:pack(PdbFiles, {list, string}),
        <<"platform">> => igor_json:pack(Platform, {custom, fun web_protocol:platform_to_json/1})
    }.

-spec draft_build_update_request_from_json(igor_json:json_object()) -> draft_build_update_request().

draft_build_update_request_from_json(Json) ->
    Commentary = igor_json:parse(Json, <<"commentary">>, string, undefined),
    ChangeList = igor_json:parse(Json, <<"change_list">>, string, undefined),
    ExePath = igor_json:parse(Json, <<"exe_path">>, string, undefined),
    LogPath = igor_json:parse(Json, <<"log_path">>, string, undefined),
    CrashReportPath = igor_json:parse(Json, <<"crash_report_path">>, string, undefined),
    ConfigPath = igor_json:parse(Json, <<"config_path">>, string, undefined),
    OptionalFileMasks = igor_json:parse(Json, <<"optional_file_masks">>, {list, string}, undefined),
    PreservedFileMasks = igor_json:parse(Json, <<"preserved_file_masks">>, {list, string}, undefined),
    Redistributables = igor_json:parse(Json, <<"redistributables">>, {list, {custom, fun web_protocol:redistributable_entry_from_json/1}}, undefined),
    PdbFiles = igor_json:parse(Json, <<"pdb_files">>, {list, string}, undefined),
    Platform = igor_json:parse(Json, <<"platform">>, {custom, fun web_protocol:platform_from_json/1}, undefined),
    #draft_build_update_request{
        commentary = Commentary,
        change_list = ChangeList,
        exe_path = ExePath,
        log_path = LogPath,
        crash_report_path = CrashReportPath,
        config_path = ConfigPath,
        optional_file_masks = OptionalFileMasks,
        preserved_file_masks = PreservedFileMasks,
        redistributables = Redistributables,
        pdb_files = PdbFiles,
        platform = Platform
    }.

-spec draft_build_update_response_to_json(draft_build_update_response()) -> igor_json:json_object().

draft_build_update_response_to_json(Record) ->
    #draft_build_update_response{result = VarResult, error = Error, build = Build} = Record,
    ?assert(VarResult =/= undefined),
    #{
        <<"result">> => igor_json:pack(VarResult, boolean),
        <<"error">> => igor_json:pack(Error, {custom, fun web_protocol:draft_build_update_error_to_json/1}),
        <<"build">> => igor_json:pack(Build, {custom, fun web_protocol:build_to_json/1})
    }.

-spec draft_build_update_response_from_json(igor_json:json_object()) -> draft_build_update_response().

draft_build_update_response_from_json(Json) ->
    VarResult = igor_json:parse(Json, <<"result">>, boolean),
    Error = igor_json:parse(Json, <<"error">>, {custom, fun web_protocol:draft_build_update_error_from_json/1}, undefined),
    Build = igor_json:parse(Json, <<"build">>, {custom, fun web_protocol:build_from_json/1}, undefined),
    #draft_build_update_response{result = VarResult, error = Error, build = Build}.

-spec build_publish_response_to_json(build_publish_response()) -> igor_json:json_object().

build_publish_response_to_json(Record) ->
    #build_publish_response{result = VarResult, error = Error, build = Build} = Record,
    ?assert(VarResult =/= undefined),
    #{
        <<"result">> => igor_json:pack(VarResult, boolean),
        <<"error">> => igor_json:pack(Error, {custom, fun web_protocol:build_publish_error_to_json/1}),
        <<"build">> => igor_json:pack(Build, {custom, fun web_protocol:build_to_json/1})
    }.

-spec build_publish_response_from_json(igor_json:json_object()) -> build_publish_response().

build_publish_response_from_json(Json) ->
    VarResult = igor_json:parse(Json, <<"result">>, boolean),
    Error = igor_json:parse(Json, <<"error">>, {custom, fun web_protocol:build_publish_error_from_json/1}, undefined),
    Build = igor_json:parse(Json, <<"build">>, {custom, fun web_protocol:build_from_json/1}, undefined),
    #build_publish_response{result = VarResult, error = Error, build = Build}.

-spec build_update_request_to_json(build_update_request()) -> igor_json:json_object().

build_update_request_to_json(Record) ->
    #build_update_request{
        commentary = Commentary,
        change_list = ChangeList,
        config_path = ConfigPath,
        optional_file_masks = OptionalFileMasks,
        preserved_file_masks = PreservedFileMasks,
        redistributables = Redistributables,
        pdb_files = PdbFiles,
        is_permanent = IsPermanent
    } = Record,
    #{
        <<"commentary">> => igor_json:pack(Commentary, string),
        <<"change_list">> => igor_json:pack(ChangeList, string),
        <<"config_path">> => igor_json:pack(ConfigPath, string),
        <<"optional_file_masks">> => igor_json:pack(OptionalFileMasks, {list, string}),
        <<"preserved_file_masks">> => igor_json:pack(PreservedFileMasks, {list, string}),
        <<"redistributables">> => igor_json:pack(Redistributables, {list, {custom, fun web_protocol:redistributable_entry_to_json/1}}),
        <<"pdb_files">> => igor_json:pack(PdbFiles, {list, string}),
        <<"is_permanent">> => igor_json:pack(IsPermanent, boolean)
    }.

-spec build_update_request_from_json(igor_json:json_object()) -> build_update_request().

build_update_request_from_json(Json) ->
    Commentary = igor_json:parse(Json, <<"commentary">>, string, undefined),
    ChangeList = igor_json:parse(Json, <<"change_list">>, string, undefined),
    ConfigPath = igor_json:parse(Json, <<"config_path">>, string, undefined),
    OptionalFileMasks = igor_json:parse(Json, <<"optional_file_masks">>, {list, string}, undefined),
    PreservedFileMasks = igor_json:parse(Json, <<"preserved_file_masks">>, {list, string}, undefined),
    Redistributables = igor_json:parse(Json, <<"redistributables">>, {list, {custom, fun web_protocol:redistributable_entry_from_json/1}}, undefined),
    PdbFiles = igor_json:parse(Json, <<"pdb_files">>, {list, string}, undefined),
    IsPermanent = igor_json:parse(Json, <<"is_permanent">>, boolean, undefined),
    #build_update_request{
        commentary = Commentary,
        change_list = ChangeList,
        config_path = ConfigPath,
        optional_file_masks = OptionalFileMasks,
        preserved_file_masks = PreservedFileMasks,
        redistributables = Redistributables,
        pdb_files = PdbFiles,
        is_permanent = IsPermanent
    }.

-spec build_update_response_to_json(build_update_response()) -> igor_json:json_object().

build_update_response_to_json(Record) ->
    #build_update_response{result = VarResult, error = Error, build = Build} = Record,
    ?assert(VarResult =/= undefined),
    #{
        <<"result">> => igor_json:pack(VarResult, boolean),
        <<"error">> => igor_json:pack(Error, {custom, fun web_protocol:build_update_error_to_json/1}),
        <<"build">> => igor_json:pack(Build, {custom, fun web_protocol:build_to_json/1})
    }.

-spec build_update_response_from_json(igor_json:json_object()) -> build_update_response().

build_update_response_from_json(Json) ->
    VarResult = igor_json:parse(Json, <<"result">>, boolean),
    Error = igor_json:parse(Json, <<"error">>, {custom, fun web_protocol:build_update_error_from_json/1}, undefined),
    Build = igor_json:parse(Json, <<"build">>, {custom, fun web_protocol:build_from_json/1}, undefined),
    #build_update_response{result = VarResult, error = Error, build = Build}.

-spec build_delete_response_to_json(build_delete_response()) -> igor_json:json_object().

build_delete_response_to_json(Record) ->
    #build_delete_response{result = VarResult, error = Error, build = Build} = Record,
    ?assert(VarResult =/= undefined),
    #{
        <<"result">> => igor_json:pack(VarResult, boolean),
        <<"error">> => igor_json:pack(Error, {custom, fun web_protocol:build_delete_error_to_json/1}),
        <<"build">> => igor_json:pack(Build, {custom, fun web_protocol:build_to_json/1})
    }.

-spec build_delete_response_from_json(igor_json:json_object()) -> build_delete_response().

build_delete_response_from_json(Json) ->
    VarResult = igor_json:parse(Json, <<"result">>, boolean),
    Error = igor_json:parse(Json, <<"error">>, {custom, fun web_protocol:build_delete_error_from_json/1}, undefined),
    Build = igor_json:parse(Json, <<"build">>, {custom, fun web_protocol:build_from_json/1}, undefined),
    #build_delete_response{result = VarResult, error = Error, build = Build}.

-spec popular_game_to_json(popular_game()) -> igor_json:json_object().

popular_game_to_json(Record) ->
    #popular_game{
        id = Id,
        title = Title,
        description = Description,
        price = Price,
        currency = Currency,
        purchases = Purchases
    } = Record,
    ?assert(Id =/= undefined),
    ?assert(Title =/= undefined),
    ?assert(Description =/= undefined),
    ?assert(Price =/= undefined),
    ?assert(Currency =/= undefined),
    ?assert(Purchases =/= undefined),
    #{
        <<"id">> => igor_json:pack(Id, string),
        <<"title">> => igor_json:pack(Title, string),
        <<"description">> => igor_json:pack(Description, string),
        <<"price">> => igor_json:pack(Price, double),
        <<"currency">> => igor_json:pack(Currency, string),
        <<"purchases">> => igor_json:pack(Purchases, int)
    }.

-spec popular_game_from_json(igor_json:json_object()) -> popular_game().

popular_game_from_json(Json) ->
    Id = igor_json:parse(Json, <<"id">>, string),
    Title = igor_json:parse(Json, <<"title">>, string),
    Description = igor_json:parse(Json, <<"description">>, string),
    Price = igor_json:parse(Json, <<"price">>, double),
    Currency = igor_json:parse(Json, <<"currency">>, string),
    Purchases = igor_json:parse(Json, <<"purchases">>, int),
    #popular_game{
        id = Id,
        title = Title,
        description = Description,
        price = Price,
        currency = Currency,
        purchases = Purchases
    }.

-spec build_manifest_to_json(build_manifest()) -> igor_json:json_object().

build_manifest_to_json(Record) ->
    #build_manifest{
        guid = Guid,
        branch = Branch,
        build_rev = BuildRev,
        cdn_root_url = CdnRootUrl,
        total_build_size = TotalBuildSize,
        total_compressed_size = TotalCompressedSize,
        exe_path = ExePath,
        log_path = LogPath,
        crash_report_path = CrashReportPath,
        config_path = ConfigPath,
        optional_file_masks = OptionalFileMasks,
        preserved_file_masks = PreservedFileMasks,
        redistributables = Redistributables,
        pdb_files = PdbFiles,
        platform = Platform,
        files = Files
    } = Record,
    ?assert(Guid =/= undefined),
    ?assert(Branch =/= undefined),
    ?assert(BuildRev =/= undefined),
    ?assert(CdnRootUrl =/= undefined),
    ?assert(TotalBuildSize =/= undefined),
    ?assert(TotalCompressedSize =/= undefined),
    ?assert(ExePath =/= undefined),
    ?assert(LogPath =/= undefined),
    ?assert(CrashReportPath =/= undefined),
    ?assert(ConfigPath =/= undefined),
    ?assert(OptionalFileMasks =/= undefined),
    ?assert(PreservedFileMasks =/= undefined),
    ?assert(Redistributables =/= undefined),
    ?assert(PdbFiles =/= undefined),
    ?assert(Platform =/= undefined),
    ?assert(Files =/= undefined),
    #{
        <<"guid">> => igor_json:pack(Guid, string),
        <<"branch">> => igor_json:pack(Branch, string),
        <<"build_rev">> => igor_json:pack(BuildRev, string),
        <<"cdn_root_url">> => igor_json:pack(CdnRootUrl, string),
        <<"total_build_size">> => igor_json:pack(TotalBuildSize, long),
        <<"total_compressed_size">> => igor_json:pack(TotalCompressedSize, long),
        <<"exe_path">> => igor_json:pack(ExePath, string),
        <<"log_path">> => igor_json:pack(LogPath, string),
        <<"crash_report_path">> => igor_json:pack(CrashReportPath, string),
        <<"config_path">> => igor_json:pack(ConfigPath, string),
        <<"optional_file_masks">> => igor_json:pack(OptionalFileMasks, {list, string}),
        <<"preserved_file_masks">> => igor_json:pack(PreservedFileMasks, {list, string}),
        <<"redistributables">> => igor_json:pack(Redistributables, {list, {custom, fun web_protocol:redistributable_entry_to_json/1}}),
        <<"pdb_files">> => igor_json:pack(PdbFiles, {list, string}),
        <<"platform">> => igor_json:pack(Platform, {custom, fun web_protocol:platform_to_json/1}),
        <<"files">> => igor_json:pack(Files, {list, {custom, fun web_protocol:game_file_to_json/1}})
    }.

-spec build_manifest_from_json(igor_json:json_object()) -> build_manifest().

build_manifest_from_json(Json) ->
    Guid = igor_json:parse(Json, <<"guid">>, string),
    Branch = igor_json:parse(Json, <<"branch">>, string),
    BuildRev = igor_json:parse(Json, <<"build_rev">>, string),
    CdnRootUrl = igor_json:parse(Json, <<"cdn_root_url">>, string),
    TotalBuildSize = igor_json:parse(Json, <<"total_build_size">>, long),
    TotalCompressedSize = igor_json:parse(Json, <<"total_compressed_size">>, long),
    ExePath = igor_json:parse(Json, <<"exe_path">>, string),
    LogPath = igor_json:parse(Json, <<"log_path">>, string),
    CrashReportPath = igor_json:parse(Json, <<"crash_report_path">>, string),
    ConfigPath = igor_json:parse(Json, <<"config_path">>, string),
    OptionalFileMasks = igor_json:parse(Json, <<"optional_file_masks">>, {list, string}, []),
    PreservedFileMasks = igor_json:parse(Json, <<"preserved_file_masks">>, {list, string}, []),
    Redistributables = igor_json:parse(Json, <<"redistributables">>, {list, {custom, fun web_protocol:redistributable_entry_from_json/1}}, []),
    PdbFiles = igor_json:parse(Json, <<"pdb_files">>, {list, string}, []),
    Platform = igor_json:parse(Json, <<"platform">>, {custom, fun web_protocol:platform_from_json/1}, windows),
    Files = igor_json:parse(Json, <<"files">>, {list, {custom, fun web_protocol:game_file_from_json/1}}),
    #build_manifest{
        guid = Guid,
        branch = Branch,
        build_rev = BuildRev,
        cdn_root_url = CdnRootUrl,
        total_build_size = TotalBuildSize,
        total_compressed_size = TotalCompressedSize,
        exe_path = ExePath,
        log_path = LogPath,
        crash_report_path = CrashReportPath,
        config_path = ConfigPath,
        optional_file_masks = OptionalFileMasks,
        preserved_file_masks = PreservedFileMasks,
        redistributables = Redistributables,
        pdb_files = PdbFiles,
        platform = Platform,
        files = Files
    }.

