%% @author Igor compiler
%% @doc Compiler version: igorc 2.1.3
%% DO NOT EDIT THIS FILE - it is machine generated

-module(web_rest_ci_builds_game).

-include_lib("igor/include/igor_http.hrl").

-behaviour(cowboy_handler).

-export([
    init/2,
    add_game_build_400/1,
    add_game_build_403/1,
    add_game_build_404/1,
    add_game_build_500/1
]).

init(Req0, Opts) ->
    Method = cowboy_req:method(Req0),
    Req = handle_method(Method, Req0),
    {ok, Req, Opts}.

handle_method(<<"POST">>, Req) ->
    case cowboy_req:has_body(Req) of
        true -> handle_post(Req);
        false -> cowboy_req:reply(400, Req)
    end;
handle_method(_, Req) ->
    ResponseHeaders = #{<<"Allow">> => <<"POST">>},
    cowboy_req:reply(405, ResponseHeaders, Req).

add_game_build_400(ResponseContent400) ->
    throw(#{status_code => 400, response => ResponseContent400}).

add_game_build_403(ResponseContent403) ->
    throw(#{status_code => 403, response => ResponseContent403}).

add_game_build_404(ResponseContent404) ->
    throw(#{status_code => 404, response => ResponseContent404}).

add_game_build_500(ResponseContent500) ->
    throw(#{status_code => 500, response => ResponseContent500}).

handle_post(Req) ->
    try
        {ok, RequestBody, Req1} = cowboy_req:read_body(Req),
        RequestContent = web_protocol:build_manifest_from_json(jsx:decode(RequestBody, [return_maps])),
        Guid = cowboy_req:binding(guid, Req1),
        Qs = cowboy_req:parse_qs(Req1),
        Branch = igor_http:parse_query(<<"branch">>, Qs, {option, string}),
        ApiKey = igor_http:parse_header(<<"x-api-key">>, cowboy_req:header(<<"x-api-key">>, Req1), {option, string}),
        ResponseContent = web_rest_callback_ci:add_game_build(RequestContent, Guid, Branch, ApiKey),
        Body = jsx:encode(web_protocol:build_to_json(ResponseContent)),
        ResponseHeaders = #{<<"Content-Type">> => <<"application/json; charset=utf-8">>},
        cowboy_req:reply(201, ResponseHeaders, Body, Req1)
    catch
        #{status_code := 400, response := ResponseContent400} ->
            ResponseContent400Body = jsx:encode(web_protocol:bad_request_error_to_json(ResponseContent400, {custom, fun web_protocol:add_game_build_error_to_json/1})),
            ResponseHeaders400 = #{<<"Content-Type">> => <<"application/json; charset=utf-8">>},
            cowboy_req:reply(400, ResponseHeaders400, ResponseContent400Body, Req);
        #{status_code := 403, response := ResponseContent403} ->
            ResponseContent403Body = jsx:encode(web_protocol:forbidden_error_to_json(ResponseContent403)),
            ResponseHeaders403 = #{<<"Content-Type">> => <<"application/json; charset=utf-8">>},
            cowboy_req:reply(403, ResponseHeaders403, ResponseContent403Body, Req);
        #{status_code := 404, response := ResponseContent404} ->
            ResponseContent404Body = jsx:encode(web_protocol:not_found_error_to_json(ResponseContent404)),
            ResponseHeaders404 = #{<<"Content-Type">> => <<"application/json; charset=utf-8">>},
            cowboy_req:reply(404, ResponseHeaders404, ResponseContent404Body, Req);
        #{status_code := 500, response := ResponseContent500} ->
            ResponseContent500Body = jsx:encode(web_protocol:internal_server_error_to_json(ResponseContent500)),
            ResponseHeaders500 = #{<<"Content-Type">> => <<"application/json; charset=utf-8">>},
            cowboy_req:reply(500, ResponseHeaders500, ResponseContent500Body, Req);
        #bad_request{} ->
            cowboy_req:reply(400, Req)
    end.

