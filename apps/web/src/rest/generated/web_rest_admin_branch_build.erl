%% @author Igor compiler
%% @doc Compiler version: igorc 2.1.3
%% DO NOT EDIT THIS FILE - it is machine generated

-module(web_rest_admin_branch_build).

-include_lib("igor/include/igor_http.hrl").

-behaviour(cowboy_handler).

-export([
    init/2,
    set_game_branch_build_403/1
]).

init(Req0, Opts) ->
    Method = cowboy_req:method(Req0),
    Req = handle_method(Method, Req0),
    {ok, Req, Opts}.

handle_method(<<"PUT">>, Req) ->
    case cowboy_req:has_body(Req) of
        true -> handle_put(Req);
        false -> cowboy_req:reply(400, Req)
    end;
handle_method(_, Req) ->
    ResponseHeaders = #{<<"Allow">> => <<"PUT">>},
    cowboy_req:reply(405, ResponseHeaders, Req).

set_game_branch_build_403(ResponseContent403) ->
    throw(#{status_code => 403, response => ResponseContent403}).

handle_put(Req) ->
    try
        {ok, RequestBody, Req1} = cowboy_req:read_body(Req),
        RequestContent = web_protocol:game_branch_build_request_from_json(jsx:decode(RequestBody, [return_maps])),
        Id = igor_http:parse_value(cowboy_req:binding(id, Req1), long),
        {ResponseContent, Req2} = web_rest_callback_admin_branch:set_game_branch_build(RequestContent, Id, Req1),
        Body = jsx:encode(web_protocol:game_branch_build_response_to_json(ResponseContent)),
        ResponseHeaders = #{<<"Content-Type">> => <<"application/json; charset=utf-8">>},
        cowboy_req:reply(200, ResponseHeaders, Body, Req2)
    catch
        #{status_code := 403, response := ResponseContent403} ->
            ResponseContent403Body = jsx:encode(web_protocol:forbidden_error_to_json(ResponseContent403)),
            ResponseHeaders403 = #{<<"Content-Type">> => <<"application/json; charset=utf-8">>},
            cowboy_req:reply(403, ResponseHeaders403, ResponseContent403Body, Req);
        #bad_request{} ->
            cowboy_req:reply(400, Req)
    end.

