%% Author: Igor compiler
%% Compiler version: igorc 2.1.3
%% DO NOT EDIT THIS FILE - it is machine generated

-record(generic_response, {
    result :: boolean()
}).

-record(empty, {
}).

-record(collection, {
    items :: [_T]
}).

-record(collection_slice, {
    total :: igor_types:int(),
    items :: [_T]
}).

-record(bad_request_error, {
    error :: _T
}).

-record(forbidden_error, {
}).

-record(not_found_error, {
}).

-record(internal_server_error, {
    error :: binary()
}).

-record(price, {
    amount :: igor_types:long(),
    currency :: web_protocol:currency()
}).

-record(ini_file_entry, {
    section :: binary(),
    param :: binary(),
    value :: binary()
}).

-record(registry_config_entry, {
    path :: binary(),
    key :: binary(),
    value_type = string :: web_protocol:registry_value_type(),
    value :: binary()
}).

-record(redistributable_entry, {
    name :: binary(),
    url :: binary()
}).

-record(client_status_response, {
    logged_in :: boolean(),
    user_id :: igor_types:long() | 'undefined',
    email :: binary() | 'undefined',
    username :: binary() | 'undefined'
}).

-record(client_register_request, {
    email :: binary(),
    username :: binary(),
    password :: binary(),
    captcha_key :: binary() | 'undefined',
    captcha_answer :: binary() | 'undefined'
}).

-record(client_register_response, {
    result :: boolean(),
    error :: web_protocol:client_registration_error() | 'undefined'
}).

-record(client_register_confirm_request, {
    username :: binary(),
    security_code :: binary()
}).

-record(client_resend_request, {
    username :: binary()
}).

-record(client_login_request, {
    username :: binary(),
    password :: binary()
}).

-record(client_login_response, {
    result :: boolean(),
    error :: web_protocol:client_login_error() | 'undefined',
    session_id :: binary() | 'undefined'
}).

-record(client_password_reset_request, {
    username :: binary(),
    new_password :: binary(),
    captcha_key :: binary() | 'undefined',
    captcha_answer :: binary() | 'undefined'
}).

-record(client_password_reset_response, {
    result :: boolean(),
    error :: web_protocol:client_password_reset_error() | 'undefined'
}).

-record(client_password_reset_confirm_request, {
    username :: binary(),
    security_code :: binary()
}).

-record(client_password_change_request, {
    current_password :: binary(),
    new_password :: binary()
}).

-record(client_password_change_response, {
    result :: boolean(),
    error :: web_protocol:client_password_change_error() | 'undefined'
}).

-record(personnel_status_response, {
    logged_in :: boolean(),
    user_id :: igor_types:long() | 'undefined',
    email :: binary() | 'undefined',
    username :: binary() | 'undefined'
}).

-record(personnel_login_request, {
    username :: binary(),
    password :: binary()
}).

-record(personnel_login_response, {
    result :: boolean(),
    error :: web_protocol:personnel_login_error() | 'undefined',
    session_id :: binary() | 'undefined',
    user_id :: igor_types:long() | 'undefined',
    email :: binary() | 'undefined',
    username :: binary() | 'undefined'
}).

-record(captcha_response, {
    result :: boolean(),
    error :: web_protocol:captcha_error() | 'undefined',
    captcha_key :: binary() | 'undefined',
    filename :: binary() | 'undefined'
}).

-record(game_branch_item, {
    name :: binary(),
    is_default :: boolean(),
    build :: binary() | 'undefined',
    build_time :: iso8601:datetimems() | 'undefined',
    build_change_list :: binary() | 'undefined',
    size :: igor_types:long(),
    compressed_size :: igor_types:long(),
    exe_path :: binary(),
    log_path :: binary() | 'undefined',
    crash_report_path :: binary() | 'undefined',
    config_path :: binary() | 'undefined',
    optional_file_masks = [] :: [binary()],
    preserved_file_masks = [] :: [binary()],
    redistributables = [] :: [web_protocol:redistributable_entry()],
    pdb_files = [] :: [binary()],
    root_url :: binary(),
    game_engine :: web_protocol:game_engine() | 'undefined',
    ini_config :: [web_protocol:ini_file_entry()],
    registry_config :: [web_protocol:registry_config_entry()],
    is_reportable :: boolean()
}).

-record(game_branch, {
    id :: igor_types:long(),
    rev :: igor_types:int(),
    game_id :: binary(),
    game_title :: binary(),
    title :: binary(),
    description :: binary(),
    password :: binary(),
    build_id :: igor_types:long() | 'undefined',
    build_rev :: binary() | 'undefined',
    build_commentary :: binary() | 'undefined',
    build_change_list :: binary() | 'undefined',
    build_total_size :: igor_types:long() | 'undefined',
    build_compressed_size :: igor_types:long() | 'undefined',
    build_exe_path :: binary() | 'undefined',
    build_log_path :: binary() | 'undefined',
    build_crash_report_path :: binary() | 'undefined',
    build_cdn_root_url :: binary() | 'undefined',
    build_config_path :: binary() | 'undefined',
    build_optional_file_masks :: [binary()] | 'undefined',
    build_preserved_file_masks :: [binary()] | 'undefined',
    build_redistributables :: [web_protocol:redistributable_entry()] | 'undefined',
    build_pdb_files :: [binary()] | 'undefined',
    build_created_at :: iso8601:datetimems() | 'undefined',
    game_engine :: web_protocol:game_engine() | 'undefined',
    platform :: web_protocol:platform(),
    ini_config :: [web_protocol:ini_file_entry()],
    registry_config :: [web_protocol:registry_config_entry()],
    is_reportable :: boolean(),
    is_public :: boolean(),
    is_default :: boolean(),
    is_deleted :: boolean(),
    created_at :: iso8601:datetimems(),
    updated_at :: iso8601:datetimems()
}).

-record(game_item, {
    guid :: binary(),
    title :: binary(),
    description :: binary(),
    jira_key :: binary() | 'undefined',
    selene_key :: binary() | 'undefined',
    discord_url :: binary() | 'undefined',
    branches = [] :: [web_protocol:game_branch_item()],
    price :: web_protocol:price(),
    ownership :: web_protocol:game_ownership(),
    ownership_until :: iso8601:datetimems() | 'undefined',
    categories = [] :: [igor_types:long()]
}).

-record(game, {
    id :: binary(),
    rev :: igor_types:int(),
    title :: binary(),
    description :: binary(),
    jira_key :: binary() | 'undefined',
    selene_key :: binary() | 'undefined',
    ci_url :: binary() | 'undefined',
    discord_url :: binary() | 'undefined',
    price :: float(),
    currency :: binary(),
    build_lifetime :: igor_types:int(),
    categories = [] :: [igor_types:long()],
    is_published :: boolean(),
    is_disabled :: boolean(),
    is_deleted :: boolean(),
    created_at :: iso8601:datetimems(),
    updated_at :: iso8601:datetimems()
}).

-record(game_file, {
    relative_path :: binary(),
    relative_compressed_path :: binary(),
    md5 :: binary(),
    size :: igor_types:long(),
    compressed_size :: igor_types:long()
}).

-record(game_item_list, {
    games = [] :: [web_protocol:game_item()]
}).

-record(game_manifest, {
    build_rev :: binary() | 'undefined',
    files = [] :: [web_protocol:game_file()]
}).

-record(branch_unlock_request, {
    password :: binary()
}).

-record(change_log, {
    build_rev :: binary(),
    build_created_at :: iso8601:datetimems(),
    build_change_list :: binary()
}).

-record(game_create_request, {
    id :: binary(),
    title :: binary(),
    price :: float(),
    currency :: binary()
}).

-record(game_create_response, {
    result :: boolean(),
    error :: web_protocol:game_create_error() | 'undefined',
    game :: web_protocol:game() | 'undefined'
}).

-record(game_update_request, {
    title :: binary() | 'undefined',
    description :: binary() | 'undefined',
    jira_key :: binary() | 'undefined',
    selene_key :: binary() | 'undefined',
    ci_url :: binary() | 'undefined',
    discord_url :: binary() | 'undefined',
    price :: float() | 'undefined',
    currency :: binary() | 'undefined',
    build_lifetime :: igor_types:int() | 'undefined',
    is_published :: boolean() | 'undefined',
    is_disabled :: boolean() | 'undefined',
    is_deleted :: boolean() | 'undefined'
}).

-record(game_update_response, {
    result :: boolean(),
    error :: web_protocol:game_update_error() | 'undefined',
    game :: web_protocol:game() | 'undefined'
}).

-record(game_branch_create_request, {
    title :: binary(),
    description :: binary(),
    password :: binary(),
    game_engine :: web_protocol:game_engine(),
    platform :: web_protocol:platform()
}).

-record(game_branch_create_response, {
    result :: boolean(),
    error :: web_protocol:game_branch_create_error() | 'undefined',
    branch :: web_protocol:game_branch() | 'undefined'
}).

-record(game_branch_update_request, {
    title :: binary() | 'undefined' | 'null',
    description :: binary() | 'undefined' | 'null',
    password :: binary() | 'undefined' | 'null',
    game_engine :: web_protocol:game_engine() | 'undefined' | 'null',
    ini_config :: [web_protocol:ini_file_entry()] | 'undefined' | 'null',
    registry_config :: [web_protocol:registry_config_entry()] | 'undefined' | 'null',
    is_reportable :: boolean() | 'undefined' | 'null',
    is_public :: boolean() | 'undefined' | 'null',
    is_deleted :: boolean() | 'undefined' | 'null'
}).

-record(game_branch_update_response, {
    result :: boolean(),
    error :: web_protocol:game_branch_update_error() | 'undefined',
    branch :: web_protocol:game_branch() | 'undefined'
}).

-record(game_branch_build_request, {
    build_id :: igor_types:long()
}).

-record(game_branch_build_response, {
    result :: boolean(),
    error :: web_protocol:game_branch_build_error() | 'undefined',
    branch :: web_protocol:game_branch() | 'undefined'
}).

-record(game_category, {
    id :: igor_types:long(),
    rev :: igor_types:int(),
    name :: binary(),
    description :: binary(),
    sort_order :: igor_types:int(),
    created_at :: iso8601:datetimems(),
    updated_at :: iso8601:datetimems()
}).

-record(game_category_excerpt, {
    id :: igor_types:long(),
    name :: binary(),
    description :: binary(),
    sort_order :: igor_types:int()
}).

-record(game_category_manage_response, {
    result :: boolean(),
    error :: web_protocol:game_category_manage_error() | 'undefined',
    category :: web_protocol:game_category() | 'undefined'
}).

-record(game_category_create_request, {
    name :: binary(),
    description :: binary(),
    sort_order :: igor_types:int()
}).

-record(game_category_update_request, {
    name :: binary() | 'undefined',
    description :: binary() | 'undefined',
    sort_order :: igor_types:int() | 'undefined'
}).

-record(game_category_excerpt_list, {
    categories = [] :: [web_protocol:game_category_excerpt()]
}).

-record(client_account, {
    id :: igor_types:long(),
    rev :: igor_types:int(),
    username :: binary(),
    email :: binary(),
    phone :: binary() | 'undefined',
    is_activated :: boolean(),
    is_blocked :: boolean(),
    is_deleted :: boolean(),
    created_at :: iso8601:datetimems(),
    updated_at :: iso8601:datetimems()
}).

-record(personnel_account, {
    id :: igor_types:long(),
    rev :: igor_types:int(),
    username :: binary(),
    name :: binary() | 'undefined',
    email :: binary() | 'undefined',
    phone :: binary() | 'undefined',
    is_blocked :: boolean(),
    is_deleted :: boolean(),
    is_superadmin :: boolean(),
    created_at :: iso8601:datetimems(),
    updated_at :: iso8601:datetimems()
}).

-record(personnel_account_profile, {
    id :: igor_types:long(),
    rev :: igor_types:int(),
    username :: binary(),
    name :: binary() | 'undefined',
    email :: binary() | 'undefined',
    phone :: binary() | 'undefined',
    api_key :: binary() | 'undefined',
    is_blocked :: boolean(),
    is_deleted :: boolean(),
    is_game_manager :: boolean(),
    is_superadmin :: boolean(),
    created_at :: iso8601:datetimems(),
    updated_at :: iso8601:datetimems()
}).

-record(personnel_api_key_update_response, {
    api_key :: binary()
}).

-record(personnel_group, {
    id :: igor_types:long(),
    rev :: igor_types:int(),
    name :: binary(),
    description :: binary() | 'undefined',
    is_deleted :: boolean(),
    members :: [binary()],
    member_count :: igor_types:int(),
    is_superadmin :: boolean(),
    created_at :: iso8601:datetimems(),
    updated_at :: iso8601:datetimems()
}).

-record(personnel_account_role, {
    personnel_id :: igor_types:long(),
    username :: binary(),
    game_id :: binary(),
    game_title :: binary(),
    game_branches :: igor_json:json(),
    group_roles :: igor_json:json() | 'undefined',
    user_role :: web_protocol:access_role() | 'undefined',
    is_global :: boolean() | 'undefined',
    branch_ids :: [igor_types:long()] | 'undefined'
}).

-record(personnel_group_role, {
    group_id :: igor_types:long(),
    group_name :: binary(),
    game_id :: binary(),
    game_title :: binary(),
    game_branches :: igor_json:json(),
    group_role :: web_protocol:access_role() | 'undefined',
    is_global :: boolean() | 'undefined',
    branch_ids :: [igor_types:long()] | 'undefined'
}).

-record(access_role_update_request, {
    role :: web_protocol:access_role(),
    is_global :: boolean() | 'undefined',
    branch_ids :: [igor_types:long()] | 'undefined'
}).

-record(settings, {
    personnel_session_duration :: igor_types:int(),
    client_session_duration :: igor_types:int(),
    register_confirm_code_lifetime :: igor_types:int(),
    phone_confirm_code_lifetime :: igor_types:int(),
    password_reset_confirm_code_lifetime :: igor_types:int(),
    ci_api_key :: binary() | 'undefined'
}).

-record(settings_update_request, {
    personnel_session_duration :: igor_types:int() | 'undefined',
    client_session_duration :: igor_types:int() | 'undefined',
    register_confirm_code_lifetime :: igor_types:int() | 'undefined',
    phone_confirm_code_lifetime :: igor_types:int() | 'undefined',
    password_reset_confirm_code_lifetime :: igor_types:int() | 'undefined'
}).

-record(regenerate_ci_api_key_response, {
    ci_api_key :: binary() | 'undefined'
}).

-record(build, {
    id :: igor_types:long(),
    rev :: igor_types:int(),
    game_id :: binary(),
    game_title :: binary(),
    branch_tags :: [binary()],
    build_rev :: binary(),
    commentary :: binary(),
    change_list :: binary(),
    total_size :: igor_types:long(),
    compressed_size :: igor_types:long(),
    exe_path :: binary(),
    log_path :: binary(),
    crash_report_path :: binary(),
    config_path :: binary(),
    optional_file_masks = [] :: [binary()],
    preserved_file_masks = [] :: [binary()],
    redistributables = [] :: [web_protocol:redistributable_entry()],
    pdb_files = [] :: [binary()],
    cdn_root_url :: binary(),
    platform :: web_protocol:platform(),
    is_permanent :: boolean(),
    is_draft :: boolean(),
    is_processing :: boolean(),
    archived_size :: igor_types:long(),
    processed_size :: igor_types:long(),
    is_deleted :: boolean(),
    created_at :: iso8601:datetimems(),
    updated_at :: iso8601:datetimems()
}).

-record(build_file, {
    id :: igor_types:long(),
    build_id :: igor_types:long(),
    file_path :: binary(),
    file_size :: igor_types:long(),
    compressed_file_path :: binary(),
    compressed_file_size :: igor_types:long(),
    md5 :: binary(),
    created_at :: iso8601:datetimems(),
    updated_at :: iso8601:datetimems()
}).

-record(draft_build_create_request, {
    build_rev :: binary(),
    platform :: web_protocol:platform()
}).

-record(draft_build_create_response, {
    result :: boolean(),
    error :: web_protocol:draft_build_create_error() | 'undefined',
    build :: web_protocol:build() | 'undefined'
}).

-record(draft_build_update_request, {
    commentary :: binary() | 'undefined',
    change_list :: binary() | 'undefined',
    exe_path :: binary() | 'undefined',
    log_path :: binary() | 'undefined',
    crash_report_path :: binary() | 'undefined',
    config_path :: binary() | 'undefined',
    optional_file_masks :: [binary()] | 'undefined',
    preserved_file_masks :: [binary()] | 'undefined',
    redistributables :: [web_protocol:redistributable_entry()] | 'undefined',
    pdb_files :: [binary()] | 'undefined',
    platform :: web_protocol:platform() | 'undefined'
}).

-record(draft_build_update_response, {
    result :: boolean(),
    error :: web_protocol:draft_build_update_error() | 'undefined',
    build :: web_protocol:build() | 'undefined'
}).

-record(build_publish_response, {
    result :: boolean(),
    error :: web_protocol:build_publish_error() | 'undefined',
    build :: web_protocol:build() | 'undefined'
}).

-record(build_update_request, {
    commentary :: binary() | 'undefined',
    change_list :: binary() | 'undefined',
    config_path :: binary() | 'undefined',
    optional_file_masks :: [binary()] | 'undefined',
    preserved_file_masks :: [binary()] | 'undefined',
    redistributables :: [web_protocol:redistributable_entry()] | 'undefined',
    pdb_files :: [binary()] | 'undefined',
    is_permanent :: boolean() | 'undefined'
}).

-record(build_update_response, {
    result :: boolean(),
    error :: web_protocol:build_update_error() | 'undefined',
    build :: web_protocol:build() | 'undefined'
}).

-record(build_delete_response, {
    result :: boolean(),
    error :: web_protocol:build_delete_error() | 'undefined',
    build :: web_protocol:build() | 'undefined'
}).

-record(popular_game, {
    id :: binary(),
    title :: binary(),
    description :: binary(),
    price :: float(),
    currency :: binary(),
    purchases :: igor_types:int()
}).

-record(build_manifest, {
    guid :: binary(),
    branch :: binary(),
    build_rev :: binary(),
    cdn_root_url :: binary(),
    total_build_size :: igor_types:long(),
    total_compressed_size :: igor_types:long(),
    exe_path :: binary(),
    log_path :: binary(),
    crash_report_path :: binary(),
    config_path :: binary(),
    optional_file_masks = [] :: [binary()],
    preserved_file_masks = [] :: [binary()],
    redistributables = [] :: [web_protocol:redistributable_entry()],
    pdb_files = [] :: [binary()],
    platform = windows :: web_protocol:platform(),
    files :: [web_protocol:game_file()]
}).

