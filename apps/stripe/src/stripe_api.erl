%% @author Igor compiler
%% @doc Compiler version: igorc 2.1.0
%% DO NOT EDIT THIS FILE - it is machine generated

-module(stripe_api).

-export([
    get_balance/0,
    create_customer/1,
    get_charges/0,
    create_charge/1
]).

get_balance() ->
    Url = io_lib:format("~s/balance", ["https://api.stripe.com/v1"]),
    Request = {Url, stripe:default_headers()},
    case httpc:request(get, Request, [], [{body_format, binary}]) of
        {ok, {{_HttpVersion, StatusCode, _ReasonPhrase}, _Headers, Body}} when StatusCode < 300 ->
            stripe_protocol:balance_from_json(jsx:decode(Body, [return_maps]));
        {ok, {{_HttpVersion, StatusCode, _ReasonPhrase}, _Headers, Body}} ->
            error({http_error, StatusCode, Body});
        {error, Reason} ->
            error(Reason)
    end.

create_customer(RequestContent) ->
    Url = io_lib:format("~s/customers", ["https://api.stripe.com/v1"]),
    Request = {Url, stripe:default_headers(), "application/x-www-form-urlencoded", iolist_to_binary(stripe_protocol:create_customer_request_to_form(RequestContent))},
    case httpc:request(post, Request, [], [{body_format, binary}]) of
        {ok, {{_HttpVersion, StatusCode, _ReasonPhrase}, _Headers, Body}} when StatusCode < 300 ->
            stripe_protocol:customer_from_json(jsx:decode(Body, [return_maps]));
        {ok, {{_HttpVersion, StatusCode, _ReasonPhrase}, _Headers, Body}} ->
            error({http_error, StatusCode, Body});
        {error, Reason} ->
            error(Reason)
    end.

get_charges() ->
    Url = io_lib:format("~s/charges", ["https://api.stripe.com/v1"]),
    Request = {Url, stripe:default_headers()},
    case httpc:request(get, Request, [], [{body_format, binary}]) of
        {ok, {{_HttpVersion, StatusCode, _ReasonPhrase}, _Headers, Body}} when StatusCode < 300 ->
            stripe_protocol:stripe_list_from_json(jsx:decode(Body, [return_maps]), {custom, fun stripe_protocol:charge_from_json/1});
        {ok, {{_HttpVersion, StatusCode, _ReasonPhrase}, _Headers, Body}} ->
            error({http_error, StatusCode, Body});
        {error, Reason} ->
            error(Reason)
    end.

create_charge(RequestContent) ->
    Url = io_lib:format("~s/charges", ["https://api.stripe.com/v1"]),
    Request = {Url, stripe:default_headers(), "application/x-www-form-urlencoded", iolist_to_binary(stripe_protocol:create_charge_request_to_form(RequestContent))},
    case httpc:request(post, Request, [], [{body_format, binary}]) of
        {ok, {{_HttpVersion, StatusCode, _ReasonPhrase}, _Headers, Body}} when StatusCode < 300 ->
            stripe_protocol:charge_from_json(jsx:decode(Body, [return_maps]));
        {ok, {{_HttpVersion, StatusCode, _ReasonPhrase}, _Headers, Body}} ->
            error({http_error, StatusCode, Body});
        {error, Reason} ->
            error(Reason)
    end.

