%% @author Igor compiler
%% @doc Compiler version: igorc 2.1.0
%% DO NOT EDIT THIS FILE - it is machine generated

-module(stripe_protocol).

-include_lib("stdlib/include/assert.hrl").
-include("stripe_protocol.hrl").

-export([
    error_type_to_json/1,
    error_type_from_json/1,
    charge_status_to_json/1,
    charge_status_from_json/1,
    stripe_list_to_json/2,
    stripe_list_from_json/2,
    funds_to_json/1,
    funds_from_json/1,
    balance_to_json/1,
    balance_from_json/1,
    customer_to_json/1,
    customer_from_json/1,
    charge_to_json/1,
    charge_from_json/1,
    create_customer_request_to_json/1,
    create_customer_request_from_json/1,
    create_customer_request_to_form/1,
    create_customer_request_from_form/1,
    create_charge_request_to_json/1,
    create_charge_request_from_json/1,
    create_charge_request_to_form/1,
    create_charge_request_from_form/1
]).

-export_type([
    error_type/0,
    charge_status/0,
    stripe_list/1,
    funds/0,
    balance/0,
    customer/0,
    charge/0,
    create_customer_request/0,
    create_charge_request/0
]).

-type error_type() :: 'api_connection_error' | 'api_error' | 'authentication_error' | 'card_error' | 'idempotency_error' | 'invalid_request_error' | 'rate_limit_error'.
-type charge_status() :: 'succeeded' | 'pending' | 'failed'.
-type stripe_list(_T) :: #stripe_list{}.
-type funds() :: #funds{}.
-type balance() :: #balance{}.
-type customer() :: #customer{}.
-type charge() :: #charge{}.
-type create_customer_request() :: #create_customer_request{}.
-type create_charge_request() :: #create_charge_request{}.

-spec error_type_to_json(error_type()) -> igor_json:json_string().

error_type_to_json(api_connection_error) -> <<"api_connection_error">>;
error_type_to_json(api_error) -> <<"api_error">>;
error_type_to_json(authentication_error) -> <<"authentication_error">>;
error_type_to_json(card_error) -> <<"card_error">>;
error_type_to_json(idempotency_error) -> <<"idempotency_error">>;
error_type_to_json(invalid_request_error) -> <<"invalid_request_error">>;
error_type_to_json(rate_limit_error) -> <<"rate_limit_error">>.

-spec error_type_from_json(igor_json:json()) -> error_type().

error_type_from_json(<<"api_connection_error">>) -> api_connection_error;
error_type_from_json(<<"api_error">>) -> api_error;
error_type_from_json(<<"authentication_error">>) -> authentication_error;
error_type_from_json(<<"card_error">>) -> card_error;
error_type_from_json(<<"idempotency_error">>) -> idempotency_error;
error_type_from_json(<<"invalid_request_error">>) -> invalid_request_error;
error_type_from_json(<<"rate_limit_error">>) -> rate_limit_error.

-spec charge_status_to_json(charge_status()) -> igor_json:json_string().

charge_status_to_json(succeeded) -> <<"succeeded">>;
charge_status_to_json(pending) -> <<"pending">>;
charge_status_to_json(failed) -> <<"failed">>.

-spec charge_status_from_json(igor_json:json()) -> charge_status().

charge_status_from_json(<<"succeeded">>) -> succeeded;
charge_status_from_json(<<"pending">>) -> pending;
charge_status_from_json(<<"failed">>) -> failed.

-spec stripe_list_to_json(stripe_list(T), igor_json:pack_type(T)) -> igor_json:json_object().

stripe_list_to_json(Record, T) ->
    #stripe_list{
        object = Object,
        url = Url,
        has_more = HasMore,
        data = Data
    } = Record,
    ?assert(Object =/= undefined),
    ?assert(HasMore =/= undefined),
    ?assert(Data =/= undefined),
    #{
        <<"object">> => igor_json:pack(Object, string),
        <<"url">> => igor_json:pack(Url, string),
        <<"has_more">> => igor_json:pack(HasMore, boolean),
        <<"data">> => igor_json:pack(Data, {list, T})
    }.

-spec stripe_list_from_json(igor_json:json_object(), igor_json:parse_type(T)) -> stripe_list(T).

stripe_list_from_json(Json, T) ->
    Object = igor_json:parse(Json, <<"object">>, string, <<"list">>),
    Url = igor_json:parse(Json, <<"url">>, string, undefined),
    HasMore = igor_json:parse(Json, <<"has_more">>, boolean),
    Data = igor_json:parse(Json, <<"data">>, {list, T}),
    #stripe_list{
        object = Object,
        url = Url,
        has_more = HasMore,
        data = Data
    }.

-spec funds_to_json(funds()) -> igor_json:json_object().

funds_to_json(Record) ->
    #funds{currency = Currency, amount = Amount, source_types = SourceTypes} = Record,
    ?assert(Currency =/= undefined),
    ?assert(Amount =/= undefined),
    ?assert(SourceTypes =/= undefined),
    #{
        <<"currency">> => igor_json:pack(Currency, string),
        <<"amount">> => igor_json:pack(Amount, int),
        <<"source_types">> => igor_json:pack(SourceTypes, {dict, string, int})
    }.

-spec funds_from_json(igor_json:json_object()) -> funds().

funds_from_json(Json) ->
    Currency = igor_json:parse(Json, <<"currency">>, string),
    Amount = igor_json:parse(Json, <<"amount">>, int),
    SourceTypes = igor_json:parse(Json, <<"source_types">>, {dict, string, int}),
    #funds{currency = Currency, amount = Amount, source_types = SourceTypes}.

-spec balance_to_json(balance()) -> igor_json:json_object().

balance_to_json(Record) ->
    #balance{
        object = Object,
        available = Available,
        connect_reserved = ConnectReserved,
        livemode = Livemode,
        pending = Pending
    } = Record,
    ?assert(Object =/= undefined),
    ?assert(Available =/= undefined),
    ?assert(Livemode =/= undefined),
    ?assert(Pending =/= undefined),
    #{
        <<"object">> => igor_json:pack(Object, string),
        <<"available">> => igor_json:pack(Available, {list, {custom, fun stripe_protocol:funds_to_json/1}}),
        <<"connect_reserved">> => igor_json:pack(ConnectReserved, {list, {custom, fun stripe_protocol:funds_to_json/1}}),
        <<"livemode">> => igor_json:pack(Livemode, boolean),
        <<"pending">> => igor_json:pack(Pending, {list, {custom, fun stripe_protocol:funds_to_json/1}})
    }.

-spec balance_from_json(igor_json:json_object()) -> balance().

balance_from_json(Json) ->
    Object = igor_json:parse(Json, <<"object">>, string, <<"balance">>),
    Available = igor_json:parse(Json, <<"available">>, {list, {custom, fun stripe_protocol:funds_from_json/1}}),
    ConnectReserved = igor_json:parse(Json, <<"connect_reserved">>, {list, {custom, fun stripe_protocol:funds_from_json/1}}, undefined),
    Livemode = igor_json:parse(Json, <<"livemode">>, boolean),
    Pending = igor_json:parse(Json, <<"pending">>, {list, {custom, fun stripe_protocol:funds_from_json/1}}),
    #balance{
        object = Object,
        available = Available,
        connect_reserved = ConnectReserved,
        livemode = Livemode,
        pending = Pending
    }.

-spec customer_to_json(customer()) -> igor_json:json_object().

customer_to_json(Record) ->
    #customer{id = Id, object = Object} = Record,
    ?assert(Id =/= undefined),
    ?assert(Object =/= undefined),
    #{
        <<"id">> => igor_json:pack(Id, string),
        <<"object">> => igor_json:pack(Object, string)
    }.

-spec customer_from_json(igor_json:json_object()) -> customer().

customer_from_json(Json) ->
    Id = igor_json:parse(Json, <<"id">>, string),
    Object = igor_json:parse(Json, <<"object">>, string, <<"customer">>),
    #customer{id = Id, object = Object}.

-spec charge_to_json(charge()) -> igor_json:json_object().

charge_to_json(Record) ->
    #charge{
        id = Id,
        object = Object,
        amount = Amount,
        amount_refunded = AmountRefunded,
        application = Application,
        application_fee = ApplicationFee,
        balance_transaction = BalanceTransaction,
        captured = Captured,
        created = Created,
        currency = Currency,
        customer = Customer,
        description = Description,
        destination = Destination,
        dispute = Dispute,
        failure_code = FailureCode,
        failure_message = FailureMessage,
        invoice = Invoice,
        livemode = Livemode,
        on_behalf_of = OnBehalfOf,
        order = Order,
        paid = Paid,
        receipt_email = ReceiptEmail,
        receipt_number = ReceiptNumber,
        refunded = Refunded,
        review = Review,
        source_transfer = SourceTransfer,
        statement_descriptor = StatementDescriptor,
        status = Status,
        transfer = Transfer,
        transfer_group = TransferGroup
    } = Record,
    ?assert(Id =/= undefined),
    ?assert(Object =/= undefined),
    ?assert(Amount =/= undefined),
    ?assert(AmountRefunded =/= undefined),
    ?assert(Captured =/= undefined),
    ?assert(Created =/= undefined),
    ?assert(Livemode =/= undefined),
    ?assert(Paid =/= undefined),
    ?assert(Refunded =/= undefined),
    ?assert(Status =/= undefined),
    #{
        <<"id">> => igor_json:pack(Id, string),
        <<"object">> => igor_json:pack(Object, string),
        <<"amount">> => igor_json:pack(Amount, uint),
        <<"amount_refunded">> => igor_json:pack(AmountRefunded, uint),
        <<"application">> => igor_json:pack(Application, string),
        <<"application_fee">> => igor_json:pack(ApplicationFee, string),
        <<"balance_transaction">> => igor_json:pack(BalanceTransaction, string),
        <<"captured">> => igor_json:pack(Captured, boolean),
        <<"created">> => igor_json:pack(Created, uint),
        <<"currency">> => igor_json:pack(Currency, string),
        <<"customer">> => igor_json:pack(Customer, string),
        <<"description">> => igor_json:pack(Description, string),
        <<"destination">> => igor_json:pack(Destination, string),
        <<"dispute">> => igor_json:pack(Dispute, string),
        <<"failure_code">> => igor_json:pack(FailureCode, string),
        <<"failure_message">> => igor_json:pack(FailureMessage, string),
        <<"invoice">> => igor_json:pack(Invoice, string),
        <<"livemode">> => igor_json:pack(Livemode, boolean),
        <<"on_behalf_of">> => igor_json:pack(OnBehalfOf, string),
        <<"order">> => igor_json:pack(Order, string),
        <<"paid">> => igor_json:pack(Paid, boolean),
        <<"receipt_email">> => igor_json:pack(ReceiptEmail, string),
        <<"receipt_number">> => igor_json:pack(ReceiptNumber, string),
        <<"refunded">> => igor_json:pack(Refunded, boolean),
        <<"review">> => igor_json:pack(Review, string),
        <<"source_transfer">> => igor_json:pack(SourceTransfer, string),
        <<"statement_descriptor">> => igor_json:pack(StatementDescriptor, string),
        <<"status">> => igor_json:pack(Status, {custom, fun stripe_protocol:charge_status_to_json/1}),
        <<"transfer">> => igor_json:pack(Transfer, string),
        <<"transfer_group">> => igor_json:pack(TransferGroup, string)
    }.

-spec charge_from_json(igor_json:json_object()) -> charge().

charge_from_json(Json) ->
    Id = igor_json:parse(Json, <<"id">>, string),
    Object = igor_json:parse(Json, <<"object">>, string, <<"charge">>),
    Amount = igor_json:parse(Json, <<"amount">>, uint),
    AmountRefunded = igor_json:parse(Json, <<"amount_refunded">>, uint),
    Application = igor_json:parse(Json, <<"application">>, string, undefined),
    ApplicationFee = igor_json:parse(Json, <<"application_fee">>, string, undefined),
    BalanceTransaction = igor_json:parse(Json, <<"balance_transaction">>, string, undefined),
    Captured = igor_json:parse(Json, <<"captured">>, boolean),
    Created = igor_json:parse(Json, <<"created">>, uint),
    Currency = igor_json:parse(Json, <<"currency">>, string, undefined),
    Customer = igor_json:parse(Json, <<"customer">>, string, undefined),
    Description = igor_json:parse(Json, <<"description">>, string, undefined),
    Destination = igor_json:parse(Json, <<"destination">>, string, undefined),
    Dispute = igor_json:parse(Json, <<"dispute">>, string, undefined),
    FailureCode = igor_json:parse(Json, <<"failure_code">>, string, undefined),
    FailureMessage = igor_json:parse(Json, <<"failure_message">>, string, undefined),
    Invoice = igor_json:parse(Json, <<"invoice">>, string, undefined),
    Livemode = igor_json:parse(Json, <<"livemode">>, boolean),
    OnBehalfOf = igor_json:parse(Json, <<"on_behalf_of">>, string, undefined),
    Order = igor_json:parse(Json, <<"order">>, string, undefined),
    Paid = igor_json:parse(Json, <<"paid">>, boolean),
    ReceiptEmail = igor_json:parse(Json, <<"receipt_email">>, string, undefined),
    ReceiptNumber = igor_json:parse(Json, <<"receipt_number">>, string, undefined),
    Refunded = igor_json:parse(Json, <<"refunded">>, boolean),
    Review = igor_json:parse(Json, <<"review">>, string, undefined),
    SourceTransfer = igor_json:parse(Json, <<"source_transfer">>, string, undefined),
    StatementDescriptor = igor_json:parse(Json, <<"statement_descriptor">>, string, undefined),
    Status = igor_json:parse(Json, <<"status">>, {custom, fun stripe_protocol:charge_status_from_json/1}),
    Transfer = igor_json:parse(Json, <<"transfer">>, string, undefined),
    TransferGroup = igor_json:parse(Json, <<"transfer_group">>, string, undefined),
    #charge{
        id = Id,
        object = Object,
        amount = Amount,
        amount_refunded = AmountRefunded,
        application = Application,
        application_fee = ApplicationFee,
        balance_transaction = BalanceTransaction,
        captured = Captured,
        created = Created,
        currency = Currency,
        customer = Customer,
        description = Description,
        destination = Destination,
        dispute = Dispute,
        failure_code = FailureCode,
        failure_message = FailureMessage,
        invoice = Invoice,
        livemode = Livemode,
        on_behalf_of = OnBehalfOf,
        order = Order,
        paid = Paid,
        receipt_email = ReceiptEmail,
        receipt_number = ReceiptNumber,
        refunded = Refunded,
        review = Review,
        source_transfer = SourceTransfer,
        statement_descriptor = StatementDescriptor,
        status = Status,
        transfer = Transfer,
        transfer_group = TransferGroup
    }.

-spec create_customer_request_to_json(create_customer_request()) -> igor_json:json_object().

create_customer_request_to_json(Record) ->
    #create_customer_request{email = Email, source = Source, description = Description} = Record,
    ?assert(Email =/= undefined),
    ?assert(Source =/= undefined),
    ?assert(Description =/= undefined),
    #{
        <<"email">> => igor_json:pack(Email, string),
        <<"source">> => igor_json:pack(Source, string),
        <<"description">> => igor_json:pack(Description, string)
    }.

-spec create_customer_request_from_json(igor_json:json_object()) -> create_customer_request().

create_customer_request_from_json(Json) ->
    Email = igor_json:parse(Json, <<"email">>, string),
    Source = igor_json:parse(Json, <<"source">>, string),
    Description = igor_json:parse(Json, <<"description">>, string),
    #create_customer_request{email = Email, source = Source, description = Description}.

-spec create_customer_request_to_form(create_customer_request()) -> string().

create_customer_request_to_form(Record) ->
    #create_customer_request{email = Email, source = Source, description = Description} = Record,
    ?assert(Email =/= undefined),
    ?assert(Source =/= undefined),
    ?assert(Description =/= undefined),
    igor_http:compose_query([{"email", Email, string}, {"source", Source, string}, {"description", Description, string}]).

-spec create_customer_request_from_form(string()) -> create_customer_request().

create_customer_request_from_form(Form) ->
    Email = igor_http:parse_query(Form, email, string),
    Source = igor_http:parse_query(Form, source, string),
    Description = igor_http:parse_query(Form, description, string),
    #create_customer_request{email = Email, source = Source, description = Description}.

-spec create_charge_request_to_json(create_charge_request()) -> igor_json:json_object().

create_charge_request_to_json(Record) ->
    #create_charge_request{
        amount = Amount,
        currency = Currency,
        description = Description,
        source = Source,
        customer = Customer
    } = Record,
    ?assert(Amount =/= undefined),
    ?assert(Currency =/= undefined),
    ?assert(Description =/= undefined),
    #{
        <<"amount">> => igor_json:pack(Amount, int),
        <<"currency">> => igor_json:pack(Currency, string),
        <<"description">> => igor_json:pack(Description, string),
        <<"source">> => igor_json:pack(Source, string),
        <<"customer">> => igor_json:pack(Customer, string)
    }.

-spec create_charge_request_from_json(igor_json:json_object()) -> create_charge_request().

create_charge_request_from_json(Json) ->
    Amount = igor_json:parse(Json, <<"amount">>, int),
    Currency = igor_json:parse(Json, <<"currency">>, string),
    Description = igor_json:parse(Json, <<"description">>, string),
    Source = igor_json:parse(Json, <<"source">>, string, undefined),
    Customer = igor_json:parse(Json, <<"customer">>, string, undefined),
    #create_charge_request{
        amount = Amount,
        currency = Currency,
        description = Description,
        source = Source,
        customer = Customer
    }.

-spec create_charge_request_to_form(create_charge_request()) -> string().

create_charge_request_to_form(Record) ->
    #create_charge_request{
        amount = Amount,
        currency = Currency,
        description = Description,
        source = Source,
        customer = Customer
    } = Record,
    ?assert(Amount =/= undefined),
    ?assert(Currency =/= undefined),
    ?assert(Description =/= undefined),
    igor_http:compose_query([{"amount", Amount, int}, {"currency", Currency, string}, {"description", Description, string}, {"source", Source, {option, string}}, {"customer", Customer, {option, string}}]).

-spec create_charge_request_from_form(string()) -> create_charge_request().

create_charge_request_from_form(Form) ->
    Amount = igor_http:parse_query(Form, amount, int),
    Currency = igor_http:parse_query(Form, currency, string),
    Description = igor_http:parse_query(Form, description, string),
    Source = igor_http:parse_query(Form, source, {option, string}, undefined),
    Customer = igor_http:parse_query(Form, customer, {option, string}, undefined),
    #create_charge_request{
        amount = Amount,
        currency = Currency,
        description = Description,
        source = Source,
        customer = Customer
    }.

