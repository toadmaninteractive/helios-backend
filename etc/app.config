[
    {kernel, [
        % {logger_sasl_compatible, true},
        {logger_level, debug},
        {logger, [
            %% Console logger
            {handler, default, logger_std_h, #{
                formatter => {logevent_formatter, #{
                    template => [
                        time, " [", level, "] ", {caption, caption, ""}, {caption, ": ", ""},
                        {what, "<", ""}, {what, what, ""}, {what, "> ", ""},
                        msg, data, stacktrace, "\n"
                    ],
                    single_line => true,
                    style => pretty
                }}
            }},

            %% Disk logger for errors
            {handler, disk_log_error, logger_disk_log_h, #{
                level => error,
                config => #{
                    file => "log/error.log",
                    type => wrap,
                    max_no_files => 10,
                    max_no_bytes => 52428800 % 10 x 5mb
                },
                formatter => {logevent_formatter, #{
                    template => [
                        datetime, " [", level, "] ", {caption, caption, ""}, {caption, ": ", ""},
                        {what, "<", ""}, {what, what, ""}, {what, "> ", ""},
                        msg, data, stacktrace, "\n"
                    ],
                    single_line => true,
                    style => pretty
                }}
            }},

            %% Disk logger for debug messages
            {handler, disk_log_debug, logger_disk_log_h, #{
                level => debug,
                config => #{
                    file => "log/debug.log",
                    type => wrap,
                    max_no_files => 10,
                    max_no_bytes => 52428800 % 10 x 5mb
                },
                filters => [
                    {debug_filter, {fun logger_filters:level/2, {log, eq, debug}}}
                ],
                filter_default => stop,
                formatter => {logevent_formatter, #{
                    template => [
                        datetime, " [", level, "] ", {caption, caption, ""}, {caption, ": ", ""},
                        {what, "<", ""}, {what, what, ""}, {what, "> ", ""},
                        msg, data, stacktrace, "\n"
                    ],
                    single_line => true,
                    style => pretty
                }}
            }},

            %% Disk logger for info messages
            {handler, disk_log_info, logger_disk_log_h, #{
                level => info,
                config => #{
                    file => "log/info.log",
                    type => wrap,
                    max_no_files => 10,
                    max_no_bytes => 52428800 % 10 x 5mb
                },
                filters => [
                    {info_filter, {fun logger_filters:level/2, {log, lt, error}}}
                ],
                filter_default => stop,
                formatter => {logevent_formatter, #{
                    template => [
                        datetime, " [", level, "] ", {caption, caption, ""}, {caption, ": ", ""},
                        {what, "<", ""}, {what, what, ""}, {what, "> ", ""},
                        msg, data, stacktrace, "\n"
                    ],
                    single_line => true,
                    style => pretty
                }}
            }}
        ]}
    ]},

    {sasl, [
        {sasl_error_logger, false}
    ]},

    {cerberus, [
        {realms, [
            % Example LDAP
            {yourcompany, [
                {title, "Your Company LDAP"},
                {directory,
                    {cerberus_ldap, [
                        {host, "ldap.yourcompany.com"},
                        {port, 636},
                        {ssl, true},
                        {base, "ou=Users,dc=yourcompany,dc=com"},
                        {base_groups, "ou=Groups,dc=yourcompany,dc=com"},
                        {bind_dn, "cn=binduser,ou=Users,dc=yourcompany,dc=com"},
                        {bind_password, "bindusersecret"},
                        {timeout, 5000}
                    ]}
                }
            ]}
        ]}
    ]},

    {db, [
        {hostname, "127.0.0.1"},
        {database, "helios"},
        {username, "helios"},
        {password, "helios_pwd"},
        {auto_migrate, true},
        {pool_size, 5},
        {pool_max_overflow, 5},
        {timeout, 60000}
    ]},

    {access, [
        {auth_realm, yourcompany},
        {admin_group, "admins"}
    ]},

    {sendgrid, [
        {api_host, "api.sendgrid.com"},
        {api_key, "CHANGE_ME"},
        {from_email, "info@yourcompany.com"},
        {from_name, "Your Company"},
        {register_template_id, "CHANGE_ME"},
        {register_confirm_template_id, "CHANGE_ME"},
        {password_reset_template_id, "CHANGE_ME"}
    ]},

    {stripe, [
        {secret_key, "CHANGE_ME"},
        {publishable_key, "CHANGE_ME"}
    ]},

    {captcha, [
        {font, "Arial-Bold"}
    ]},

    {web, [
        {bind_ip, {0, 0, 0, 0}},
        {bind_port, 7700},
        {acceptors, 5},
        {max_upload_size, 268435456},
        {proxy_enabled, false},
        {secure, false},
        {cacertfile, "/opt/ssl/ssl.ca-bundle.crt"},
        {certfile, "/opt/ssl/ssl.crt"},
        {keyfile, "/opt/ssl/ssl.pvk"},
        {url, "https://helios.yourcompany.com/"},
        {cdn_root_url, "http://cdn.yourcompany.com/"},
        {cdn_root_url_ssl, "https://cdn.yourcompany.com/"},
        {www_root, "var/www"},
        {captcha_dir, "var/captcha"},
        {uploads_dir, "var/uploads"},
        {recaptcha, [
            {site_key, "CHANGE_ME"},
            {secret_key, "CHANGE_ME"}
        ]}
    ]}
].
